This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)


================================================================
Directory Structure
================================================================
_docs/
  ArtShare.md
  braindumpIMG2VID.md
  braindumpTXT2IMG.md
  debugClassList.md
  oldArt_Share.md
  repomix.md
  RLSMigrationsSQL.md
  supabase_localVcloud.md
  UIDesign.md
.cursor/
  rules/
    create-feature-prd.mdc
    debug-commands.mdc
    generate-tasks.mdc
    mobile-first-web.mdc
    npm-package-check.mdc
    process-task-list.mdc
    react-native-expo.mdc
    terminal-path-verification.mdc
    ui-design-guide.mdc
    yoda-quotes.mdc
app/
  (auth)/
    _layout.tsx
    login.tsx
    profile-setup.tsx
    register.tsx
  (tabs)/
    _layout.tsx
    camera.tsx
    index.tsx
  _layout.tsx
  +not-found.tsx
  index.tsx
components/
  auth/
    AuthForm.tsx
  feed/
    ClassJoinModal.tsx
    ClassListScreen.tsx
    ClassWelcomeScreen.tsx
  ui/
    GlassMorphismCard.tsx
    IconSymbol.ios.tsx
    IconSymbol.tsx
    TabBarBackground.ios.tsx
    TabBarBackground.tsx
  Collapsible.tsx
  ExternalLink.tsx
  HapticTab.tsx
  HelloWave.tsx
  ParallaxScrollView.tsx
  ThemedText.tsx
  ThemedView.tsx
constants/
  Colors.ts
hooks/
  useColorScheme.ts
  useColorScheme.web.ts
  useThemeColor.ts
lib/
  auth.ts
  classService.ts
  photoService.ts
  supabase.ts
scripts/
  migrate-both.js
  reset-demo.js
  reset-project.js
  validate-demo.js
store/
  authStore.ts
  classStore.ts
supabase/
  migrations/
    20250101000001_auth_tables.sql
    20250101000002_setup_storage.sql
    20250101000003_create_photos_table.sql
    20250101000004_storage_policies.sql
    20250102000001_create_classes_table.sql
    20250102000002_create_posts_table.sql
    20250102000003_create_comments_table.sql
    20250102000004_create_ai_feedback_table.sql
    20250102000005_demo_data_seed.sql
    20250102000009_fix_all_recursive_policies.sql
  .gitignore
  config.toml
tasks/
  old-prd-veo-creative-image-messenger.md
  old-tasks-prd-veo-creative-image-messenger.md
  prd-ephemeral-art-sharing.md
  tasks-prd-ephemeral-art-sharing.md
.env.example
.gitignore
app.config.js
eas.json
eslint.config.js
package.json
README.md
temp_refresh_demo.sql
tsconfig.json

================================================================
Files
================================================================

================
File: _docs/braindumpIMG2VID.md
================
# VEO Creative Video Messenger
## Product Requirements Document

### Product Overview

Creative Video Messenger is an ephemeral video messaging platform that transforms photos into AI-generated videos using creative prompts. Users capture images, select AI prompts, and send transformed videos to friends through group messaging. Only the AI-generated video result is shared, creating surprising and entertaining conversations that automatically delete after 24 hours.

### Target Audience

Social media users who want to connect with friends through creative, AI-enhanced video content and enjoy spontaneous, humorous digital interactions.

---

## Core User Stories

1. **Authentication**: As a user, I want to authenticate with Supabase so I can access my groups and video history
2. **Group Creation**: As a user, I want to select from pre-populated fake users to create a 3-4 person group so I can share videos with multiple friends
3. **Image Capture**: As a user, I want to capture a photo with my phone camera so I can create an image to transform into video content
4. **Automatic Deletion**: As a user, I want my transformed videos to automatically delete after 24 hours so conversations stay ephemeral and spontaneous
5. **Image-to-Video Transformation**: As a user, I want to add an AI prompt to my image and send it to my group so friends receive a surprising AI-generated video
6. **Prompt Selection**: As a user, I want to choose from categorized prompt suggestions or create custom prompts so I can easily transform my videos in creative ways

---

## Technical Requirements

### Technology Stack
- **Frontend**: React Native with Expo for cross-platform mobile development
- **Backend**: Supabase (PostgreSQL, Edge Functions, Authentication, Storage, Realtime)
- **AI Processing**: Replicate API with minimax/video-01 model (free tier) for image-to-video generation
- **Styling**: NativeWind/Tailwind CSS for responsive design
- **State Management**: Zustand for app state management

### Core Features

#### Authentication & User Management
- Supabase authentication integration
- Pre-populated fake user system for testing and demonstration
- Simple user profiles with usernames and avatars

#### Group Management
- Create groups by selecting 3-4 fake users from pre-populated list
- Simple group messaging interface
- Group member management

#### Image Capture & Video Generation
- Photo capture using device camera
- Categorized AI prompt suggestion system:
  - **Mood-based**: "Make it epic", "Turn it spooky", "Make it vintage"
  - **Style-based**: "Pixar animation", "Comic book", "Oil painting"
  - **Action-based**: "Add explosions", "Slow motion drama", "Make it dance"
- Custom prompt text input
- Replicate API integration with minimax/video-01 for image-to-video transformation
- Real-time processing status updates via Supabase Realtime
- Processing completion required before sending

#### Messaging & Sharing
- Group video sharing (transformed videos only)
- 24-hour automatic content deletion
- Processing status indicators
- Basic video viewing interface

### Database Schema

```sql
-- Pre-populated fake users
users (id, username, avatar_url, created_at)

-- Group management
groups (id, name, created_by, created_at)
group_members (group_id, user_id, joined_at)

-- Prompt templates
prompt_templates (id, category, title, prompt, popularity)

-- Image messages with video generation status
image_messages (
  id, user_id, group_id, 
  original_image_url, selected_prompt, generated_video_url,
  status, created_at, expires_at
)
```

### Processing Flow

1. User captures photo with device camera
2. User selects AI prompt from categories or creates custom prompt
3. Image uploaded to Supabase Storage
4. Image-to-video generation request sent to Replicate API (minimax/video-01) via Supabase Edge Function
5. Real-time status updates provided to user during processing (20-60 seconds)
6. Completed AI-generated video sent to group members
7. Original image and generated video automatically deleted after 24 hours

---

## Design Requirements

### User Experience
- **Playful, humorous UI personality** that matches the creative, entertaining nature of the app
- **Seamless image capture workflow** from photo taking to prompt selection to sending
- **Clear processing state indicators** to manage user expectations during AI transformation
- **Mobile-first responsive design** optimized for smartphone usage
- **Simple group creation interface** for easy fake user selection

### Key Screens
1. **Authentication Screen**: Simple login/signup via Supabase
2. **Group Selection/Creation**: Browse and create groups with fake users
3. **Image Capture**: Photo taking with camera controls
4. **Prompt Selection**: Categorized suggestions + custom input
5. **Processing Status**: Real-time progress indicator for video generation
6. **Group Chat**: View received AI-generated videos
7. **Settings**: Basic user preferences

---

## Technical Considerations

### Performance Requirements
- Image-to-video generation: 20-60 seconds typical (handled by Replicate minimax/video-01)
- Image upload/video download: Sub-3 second response times
- Real-time updates: Immediate status notifications via Supabase Realtime
- Storage: Automatic cleanup of expired content

### Cost Estimation
- Replicate API: FREE with minimax/video-01 model
- Supabase: Generous free tier for prototype/testing
- Storage: Minimal due to 24-hour ephemeral nature

### Scalability Notes
- Template app approach with fake users eliminates user acquisition complexity
- Supabase handles infrastructure scaling automatically
- Replicate API manages AI model scaling and availability

---

## Success Metrics

### Core Functionality
- All 6 user stories fully functional
- Successful image-to-video generation rate >95%
- Processing completion within 60 seconds
- Zero data persistence beyond 24-hour limit

### User Experience
- Seamless image capture flow without interruption
- Intuitive prompt selection with <10 second decision time
- Clear processing status communication
- Engaging AI-generated video results

---


### Technical Debt Management
- Abstract video generation to easily swap AI providers
- Modular prompt system for easy category expansion
- Clean separation between fake user system and future real user implementation

================
File: _docs/braindumpTXT2IMG.md
================
# VEO Creative Image Messenger
## Product Requirements Document

### Product Overview

VEO Creative Image Messenger is an ephemeral messaging platform that transforms text prompts into AI-generated images using Google's Imagen-4. Users create text prompts and send AI-generated images to friends through group messaging. Only the AI-generated image result is shared, creating surprising and entertaining conversations that automatically delete after 24 hours.

### Target Audience

Social media users who want to connect with friends through creative, AI-enhanced video content and enjoy spontaneous, humorous digital interactions.

---

## Core User Stories

1. **Authentication**: As a user, I want to authenticate with Supabase so I can access my groups and video history
2. **Group Creation**: As a user, I want to select from pre-populated fake users to create a 3-4 person group so I can share videos with multiple friends
3. **Text Prompt Creation**: As a user, I want to create text prompts so I can generate AI images to share
4. **Automatic Deletion**: As a user, I want my generated images to automatically delete after 24 hours so conversations stay ephemeral and spontaneous
5. **Text-to-Image Generation**: As a user, I want to send my text prompt to my group so friends receive a surprising AI-generated image
6. **Prompt Selection**: As a user, I want to choose from categorized prompt suggestions or create custom prompts so I can easily generate creative images

---

## Technical Requirements

### Technology Stack
- **Frontend**: React Native with Expo for cross-platform mobile development
- **Backend**: Supabase (PostgreSQL, Edge Functions, Authentication, Storage, Realtime)
- **AI Processing**: Replicate API with google/imagen-4 model for text-to-image generation
- **Styling**: NativeWind/Tailwind CSS for responsive design
- **State Management**: Zustand for app state management

### Core Features

#### Authentication & User Management
- Supabase authentication integration
- Pre-populated fake user system for testing and demonstration
- Simple user profiles with usernames and avatars

#### Group Management
- Create groups by selecting 3-4 fake users from pre-populated list
- Simple group messaging interface
- Group member management

#### Text-to-Image Generation
- Text prompt input interface with character limits
- Categorized AI prompt suggestion system:
  - **Style-based**: "photorealistic", "cartoon style", "oil painting", "anime"
  - **Mood-based**: "epic fantasy", "cozy atmosphere", "dramatic lighting"
  - **Subject-based**: "cute animals", "space scenes", "food photography"
- Custom prompt text input with helpful tips
- Replicate API integration with google/imagen-4 for text-to-image generation
- Real-time processing status updates via Supabase Realtime
- Processing completion required before sending

#### Messaging & Sharing
- Group video sharing (transformed videos only)
- 24-hour automatic content deletion
- Processing status indicators
- Basic video viewing interface

### Database Schema

```sql
-- Pre-populated fake users
users (id, username, avatar_url, created_at)

-- Group management
groups (id, name, created_by, created_at)
group_members (group_id, user_id, joined_at)

-- Prompt templates
prompt_templates (id, category, title, prompt, popularity)

-- Text prompt messages with image generation status
text_messages (
  id, user_id, group_id, 
  text_prompt, generated_image_url,
  status, created_at, expires_at
)
```

### Processing Flow

1. User creates text prompt using input interface or selects from suggestions
2. User selects or customizes prompt categories and styles
3. Text prompt processed by Replicate API (google/imagen-4) via Supabase Edge Function
4. Real-time status updates provided to user during processing (5-15 seconds)
5. Completed AI-generated image sent to group members
6. Generated images automatically deleted after 24 hours

---

## Design Requirements

### User Experience
- **Playful, humorous UI personality** that matches the creative, entertaining nature of the app
- **Seamless prompt creation workflow** from text input to generation to sending
- **Clear processing state indicators** to manage user expectations during AI transformation
- **Mobile-first responsive design** optimized for smartphone usage
- **Simple group creation interface** for easy fake user selection

### Key Screens
1. **Authentication Screen**: Simple login/signup via Supabase
2. **Group Selection/Creation**: Browse and create groups with fake users
3. **Text Prompt Input**: Text creation interface with suggestions
4. **Style Selection**: Categorized style and mood options
5. **Processing Status**: Real-time progress indicator for image generation
6. **Group Chat**: View received AI-generated images
7. **Settings**: Basic user preferences

---

## Technical Considerations

### Performance Requirements
- Text-to-image generation: 5-15 seconds typical (handled by Replicate google/imagen-4)
- Image download: Sub-3 second response times
- Real-time updates: Immediate status notifications via Supabase Realtime
- Storage: Automatic cleanup of expired content

### Cost Estimation
- Replicate API: ~$0.01-0.05 per image generation (very affordable)
- Supabase: Generous free tier for prototype/testing
- Storage: Minimal due to 24-hour ephemeral nature

### Scalability Notes
- Template app approach with fake users eliminates user acquisition complexity
- Supabase handles infrastructure scaling automatically
- Replicate API manages AI model scaling and availability

---

## Success Metrics

### Core Functionality
- All 6 user stories fully functional
- Successful text-to-image generation rate >95%
- Processing completion within 15 seconds
- Zero data persistence beyond 24-hour limit

### User Experience
- Seamless prompt creation flow without interruption
- Intuitive style selection with <10 second decision time
- Clear processing status communication
- High-quality AI-generated image results

---

## Future Considerations

================
File: _docs/debugClassList.md
================
1. Logs from Step1


*** Upon first press of the Join Class button a "Monday Fundamentals" class is piopulated in the list. I am succussfully able to go into the class and I am taken to 4 prepopulated artwork that is outlined in demo_data_seed.sql and class Store. this is what I expect. and what I want. The logs from this event are below ***



- LOG  📝 Register Screen - Rendering glass morphism registration interface
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  📝 AuthForm - Rendering glass morphism register form
- LOG  ✅ Auth Store - User registered successfully
- LOG  🚀 Root Layout - Initializing Draft app with proper typography
- LOG  🔑 Login Screen - Rendering glass morphism login interface
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  📝 AuthForm - Rendering glass morphism login form
- LOG  📝 Register Screen - Rendering glass morphism registration interface
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  📝 AuthForm - Rendering glass morphism register form
- LOG  ✅ Register Screen - Registration successful, user automatically signed in
- LOG  ✅ AuthForm - register form submitted successfully
- LOG  📝 AuthForm - Rendering glass morphism register form
- LOG  🎉 Register Screen - User ready to start, redirecting to camera
- LOG  🎥 Camera Screen - Rendering with permission: undefined
- LOG  📷 Camera Screen - Captured photo: No photo
- LOG  ⏫ Camera Screen - Upload state: {"isUploading": false, "uploadSuccess": false}
- LOG  ⏳ Camera Screen - Permission loading
- LOG  🎥 Camera Screen - Rendering with permission: true
- LOG  📷 Camera Screen - Captured photo: No photo
- LOG  ⏫ Camera Screen - Upload state: {"isUploading": false, "uploadSuccess": false}
- LOG  🎥 Camera Screen - Rendering with permission: true
- LOG  📷 Camera Screen - Captured photo: No photo
- LOG  ⏫ Camera Screen - Upload state: {"isUploading": false, "uploadSuccess": false}
- LOG  🎨 Class Feed Screen - Rendering glass morphism artwork-as-background feed
- LOG  📚 Class List Screen - Rendering class selection interface
- LOG  📚 Class List Screen - User classes count: 0
- LOG  🔧 DEBUG - ClassListScreen render: {"classIds": [], "classNames": [], "isLoading": false, "timestamp": 1750980193896, "userClassesCount": 0}
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  🏫 Class Join Modal - Rendering class join modal
- LOG  📚 Class Feed Screen - Loading user classes for: a5aedeaa-02b5-4313-8bbc-9c6a798f1e13
- LOG  📚 Class Store - Loading user classes: a5aedeaa-02b5-4313-8bbc-9c6a798f1e13
- LOG  🔧 DEBUG - loadUserClasses START: {"currentClassIds": [], "currentUserClassesCount": 0, "timestamp": 1750980193922}
- LOG  📋 Class Service - Fetching user classes: a5aedeaa-02b5-4313-8bbc-9c6a798f1e13
- LOG  📰 Class Feed Screen - Current class changed: undefined
- LOG  🔍 Class Feed Screen - Checking class membership status
- LOG  📚 Class Feed Screen - No class selected, showing class list
- LOG  🎥 Camera Screen - Rendering with permission: true
- LOG  📷 Camera Screen - Captured photo: No photo
- LOG  ⏫ Camera Screen - Upload state: {"isUploading": false, "uploadSuccess": false}
- LOG  🎨 Class Feed Screen - Rendering glass morphism artwork-as-background feed
- LOG  📚 Class List Screen - Rendering class selection interface
- LOG  📚 Class List Screen - User classes count: 0
- LOG  🔧 DEBUG - ClassListScreen render: {"classIds": [], "classNames": [], "isLoading": true, "timestamp": 1750980193931, "userClassesCount": 0}
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  🏫 Class Join Modal - Rendering class join modal
- LOG  🔍 Class Feed Screen - Checking class membership status
- LOG  ✅ Class Service - Found 0 classes for user
- LOG  ✅ Class Store - Loaded 0 classes
- LOG  🔧 DEBUG - loadUserClasses END: {"newClassIds": [], "newClassNames": [], "newUserClassesCount": 0, "timestamp": 1750980193993}
- LOG  🎥 Camera Screen - Rendering with permission: true
- LOG  📷 Camera Screen - Captured photo: No photo
- LOG  ⏫ Camera Screen - Upload state: {"isUploading": false, "uploadSuccess": false}
- LOG  🎨 Class Feed Screen - Rendering glass morphism artwork-as-background feed
- LOG  📚 Class List Screen - Rendering class selection interface
- LOG  📚 Class List Screen - User classes count: 0
- LOG  🔧 DEBUG - ClassListScreen render: {"classIds": [], "classNames": [], "isLoading": false, "timestamp": 1750980193995, "userClassesCount": 0}
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  🏫 Class Join Modal - Rendering class join modal
- LOG  🔍 Class Feed Screen - Checking class membership status
- LOG  📚 Class Feed Screen - No class selected, showing class list
- LOG  🎨 Class Feed Screen - Rendering glass morphism artwork-as-background feed
- LOG  ➕ Class List Screen - Opening join class modal
- LOG  ➕ Class Feed Screen - Opening join modal from class list
- LOG  🎨 Class Feed Screen - Rendering glass morphism artwork-as-background feed
- LOG  📚 Class List Screen - Rendering class selection interface
- LOG  📚 Class List Screen - User classes count: 0
- LOG  🔧 DEBUG - ClassListScreen render: {"classIds": [], "classNames": [], "isLoading": false, "timestamp": 1750980205123, "userClassesCount": 0}
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  🏫 Class Join Modal - Rendering class join modal
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  🏫 Class Join Modal - Rendering class join modal
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  🏫 Class Join Modal - Rendering class join modal
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  🏫 Class Join Modal - Rendering class join modal
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  🏫 Class Join Modal - Rendering class join modal
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  🏫 Class Join Modal - Rendering class join modal
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  🏫 Class Join Modal - Rendering class join modal
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  🏫 Class Join Modal - Rendering class join modal
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  🚀 Class Join Modal - Attempting to join class with code: DRAW01
- LOG  🚀 Class Store - Joining class with code: DRAW01
- LOG  🚀 Class Service - User attempting to join class: {"joinCode": "DRAW01", "userId": "a5aedeaa-02b5-4313-8bbc-9c6a798f1e13"}
- LOG  🔍 Class Service - Validating class join code: DRAW01
- LOG  🔍 Class Service - Validating join code format: DRAW01
- LOG  ✅ Class Service - Join code format validation: true
- LOG  📝 Class Service - Normalized join code: DRAW01
- LOG  🎥 Camera Screen - Rendering with permission: true
- LOG  📷 Camera Screen - Captured photo: No photo
- LOG  ⏫ Camera Screen - Upload state: {"isUploading": false, "uploadSuccess": false}
- LOG  🎨 Class Feed Screen - Rendering glass morphism artwork-as-background feed
- LOG  📚 Class List Screen - Rendering class selection interface
- LOG  📚 Class List Screen - User classes count: 0
- LOG  🔧 DEBUG - ClassListScreen render: {"classIds": [], "classNames": [], "isLoading": true, "timestamp": 1750980266609, "userClassesCount": 0}
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  🏫 Class Join Modal - Rendering class join modal
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  🔍 Class Feed Screen - Checking class membership status
- LOG  🏫 Class Join Modal - Rendering class join modal
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  ✅ Class Service - Class found: Monday Drawing Fundamentals
- LOG  ✅ Class Service - Join code validated for class: Monday Drawing Fundamentals
- LOG  📊 Class Service - Current member count: 0 / 30
- LOG  🎉 Class Service - Successfully joined class!
- LOG  🎉 Class Store - Successfully joined class: Monday Drawing Fundamentals
- LOG  🔧 DEBUG - State after joinClassWithCode: {"classIds": ["539c0b4e-f741-45a7-8df6-44afff8ccedc"], "classNames": ["Monday Drawing Fundamentals"], "newClassAdded": "Monday Drawing Fundamentals", "timestamp": 1750980266806, "userClassesCount": 1}
- LOG  🎥 Camera Screen - Rendering with permission: true
- LOG  📷 Camera Screen - Captured photo: No photo
- LOG  ⏫ Camera Screen - Upload state: {"isUploading": false, "uploadSuccess": false}
- LOG  🎨 Class Feed Screen - Rendering glass morphism artwork-as-background feed
- LOG  📚 Class List Screen - Rendering class selection interface
- LOG  📚 Class List Screen - User classes count: 1
- LOG  🔧 DEBUG - ClassListScreen render: {"classIds": ["539c0b4e-f741-45a7-8df6-44afff8ccedc"], "classNames": ["Monday Drawing Fundamentals"], "isLoading": false, "timestamp": 1750980266809, "userClassesCount": 1}
- LOG  🌟 GlassMorphismCard - Rendering secondary glass card
- LOG  🏫 Class Join Modal - Rendering class join modal
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  🔍 Class Feed Screen - Checking class membership status
- LOG  📚 Class Feed Screen - No class selected, showing class list
- LOG  🎉 Class Join Modal - Successfully joined class
- LOG  🎉 Class Feed Screen - Successfully joined class
- LOG  🔧 DEBUG - handleJoinSuccess START: {"currentClassId": undefined, "currentClassName": undefined, "showClassList": true, "showJoinModal": true, "timestamp": 1750980266824, "userClassesCount": 0}
- LOG  🔄 Class Feed Screen - Refreshing user classes after join
- LOG  🔧 DEBUG - About to call loadUserClasses: {"timestamp": 1750980266824, "userId": "a5aedeaa-02b5-4313-8bbc-9c6a798f1e13"}
- LOG  📚 Class Store - Loading user classes: a5aedeaa-02b5-4313-8bbc-9c6a798f1e13
- LOG  🔧 DEBUG - loadUserClasses START: {"currentClassIds": ["539c0b4e-f741-45a7-8df6-44afff8ccedc"], "currentUserClassesCount": 1, "timestamp": 1750980266825}
- LOG  📋 Class Service - Fetching user classes: a5aedeaa-02b5-4313-8bbc-9c6a798f1e13
- LOG  🎥 Camera Screen - Rendering with permission: true
- LOG  📷 Camera Screen - Captured photo: No photo
- LOG  ⏫ Camera Screen - Upload state: {"isUploading": false, "uploadSuccess": false}
- LOG  🎨 Class Feed Screen - Rendering glass morphism artwork-as-background feed
- LOG  📚 Class List Screen - Rendering class selection interface
- LOG  📚 Class List Screen - User classes count: 1
- LOG  🔧 DEBUG - ClassListScreen render: {"classIds": ["539c0b4e-f741-45a7-8df6-44afff8ccedc"], "classNames": ["Monday Drawing Fundamentals"], "isLoading": true, "timestamp": 1750980266829, "userClassesCount": 1}
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  🏫 Class Join Modal - Rendering class join modal
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  🔍 Class Feed Screen - Checking class membership status
- LOG  ✅ Class Service - Found 1 classes for user
- LOG  ✅ Class Store - Loaded 1 classes
- LOG  🔧 DEBUG - loadUserClasses END: {"newClassIds": ["539c0b4e-f741-45a7-8df6-44afff8ccedc"], "newClassNames": ["Monday Drawing Fundamentals"], "newUserClassesCount": 1, "timestamp": 1750980266856}
- LOG  🎥 Camera Screen - Rendering with permission: true
- LOG  📷 Camera Screen - Captured photo: No photo
- LOG  ⏫ Camera Screen - Upload state: {"isUploading": false, "uploadSuccess": false}
- LOG  🎨 Class Feed Screen - Rendering glass morphism artwork-as-background feed
- LOG  📚 Class List Screen - Rendering class selection interface
- LOG  📚 Class List Screen - User classes count: 1
- LOG  🔧 DEBUG - ClassListScreen render: {"classIds": ["539c0b4e-f741-45a7-8df6-44afff8ccedc"], "classNames": ["Monday Drawing Fundamentals"], "isLoading": false, "timestamp": 1750980266858, "userClassesCount": 1}
- LOG  🌟 GlassMorphismCard - Rendering secondary glass card
- LOG  🏫 Class Join Modal - Rendering class join modal
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  🔍 Class Feed Screen - Checking class membership status
- LOG  📚 Class Feed Screen - No class selected, showing class list
- LOG  🎨 Class Feed Screen - Rendering glass morphism artwork-as-background feed
- LOG  🎯 Class List Screen - Selected class: Monday Drawing Fundamentals
- LOG  🔧 DEBUG - handleClassPress called: {"classId": "539c0b4e-f741-45a7-8df6-44afff8ccedc", "className": "Monday Drawing Fundamentals", "foundClass": "YES", "timestamp": 1750980287279, "userClassesCount": 1}
- LOG  🎯 Class Feed Screen - Class selected from list: 539c0b4e-f741-45a7-8df6-44afff8ccedc
- LOG  🔧 DEBUG - handleClassSelect called: {"availableClassIds": ["539c0b4e-f741-45a7-8df6-44afff8ccedc"], "classId": "539c0b4e-f741-45a7-8df6-44afff8ccedc", "timestamp": 1750980287280, "userClassesCount": 1}
- LOG  🔧 DEBUG - selectedClass found: {"className": "Monday Drawing Fundamentals", "found": true, "timestamp": 1750980287280}
- LOG  🎯 Class Store - Setting current class: Monday Drawing Fundamentals
- LOG  🎥 Camera Screen - Rendering with permission: true
- LOG  📷 Camera Screen - Captured photo: No photo
- LOG  ⏫ Camera Screen - Upload state: {"isUploading": false, "uploadSuccess": false}
- LOG  🎨 Class Feed Screen - Rendering glass morphism artwork-as-background feed
- LOG  📚 Class List Screen - Rendering class selection interface
- LOG  📚 Class List Screen - User classes count: 1
- LOG  🔧 DEBUG - ClassListScreen render: {"classIds": ["539c0b4e-f741-45a7-8df6-44afff8ccedc"], "classNames": ["Monday Drawing Fundamentals"], "isLoading": false, "timestamp": 1750980287287, "userClassesCount": 1}
- LOG  🌟 GlassMorphismCard - Rendering secondary glass card
- LOG  🏫 Class Join Modal - Rendering class join modal
- LOG  📰 Class Feed Screen - Current class changed: Monday Drawing Fundamentals
- LOG  📰 Class Store - Loading posts for class: 539c0b4e-f741-45a7-8df6-44afff8ccedc
- LOG  🔍 Class Feed Screen - Checking class membership status
- LOG  🎨 Class Feed Screen - Class selected, showing feed
- LOG  🎥 Camera Screen - Rendering with permission: true
- LOG  📷 Camera Screen - Captured photo: No photo
- LOG  ⏫ Camera Screen - Upload state: {"isUploading": false, "uploadSuccess": false}
- LOG  🎨 Class Feed Screen - Rendering glass morphism artwork-as-background feed
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  🏫 Class Join Modal - Rendering class join modal
- LOG  ✅ Class Store - Loaded 4 posts
- LOG  🎥 Camera Screen - Rendering with permission: true
- LOG  📷 Camera Screen - Captured photo: No photo
- LOG  ⏫ Camera Screen - Upload state: {"isUploading": false, "uploadSuccess": false}
- LOG  🎨 Class Feed Screen - Rendering glass morphism artwork-as-background feed
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  🌟 GlassMorphismCard - Rendering secondary glass card
  

2. 



 *** Then I click the back button and I am successfully returned to the class list screen and can see the Monday Fundamentals button. However the moment I press the back buttton and am returned here some weirdness happens in the logs which i have recorded below. This I think is where things break down ***
  
  
- LOG  🔙 Class Feed Screen - Back button pressed, returning to class list
- LOG  🎨 Class Feed Screen - Rendering glass morphism artwork-as-background feed
- LOG  📚 Class List Screen - Rendering class selection interface
- LOG  📚 Class List Screen - User classes count: 1
- LOG  🔧 DEBUG - ClassListScreen render: {"classIds": ["539c0b4e-f741-45a7-8df6-44afff8ccedc"], "classNames": ["Monday Drawing Fundamentals"], "isLoading": false, "timestamp": 1750980831673, "userClassesCount": 1}
- LOG  🌟 GlassMorphismCard - Rendering secondary glass card
- LOG  🏫 Class Join Modal - Rendering class join modal
  
3. 

*** I try to click the Monday Fundamentals class button for a 2nd time - the one that says "tap to enter class", which was the last time i pressed it and took me to the classes artwork. Now when I press again to return to the artwork i get these logs. ***
  
- LOG  🎯 Class List Screen - Selected class: Monday Drawing Fundamentals
- LOG  🔧 DEBUG - handleClassPress called: {"classId": "539c0b4e-f741-45a7-8df6-44afff8ccedc", "className": "Monday Drawing Fundamentals", "foundClass": "YES", "timestamp": 1750981116492, "userClassesCount": 1}
- LOG  🎯 Class Feed Screen - Class selected from list: 539c0b4e-f741-45a7-8df6-44afff8ccedc
- LOG  🔧 DEBUG - handleClassSelect called: {"availableClassIds": ["539c0b4e-f741-45a7-8df6-44afff8ccedc"], "classId": "539c0b4e-f741-45a7-8df6-44afff8ccedc", "timestamp": 1750981116492, "userClassesCount": 1}
- LOG  🔧 DEBUG - selectedClass found: {"className": "Monday Drawing Fundamentals", "found": true, "timestamp": 1750981116492}
- LOG  🎯 Class Store - Setting current class: Monday Drawing Fundamentals
- LOG  🎥 Camera Screen - Rendering with permission: true
- LOG  📷 Camera Screen - Captured photo: No photo
- LOG  ⏫ Camera Screen - Upload state: {"isUploading": false, "uploadSuccess": false}
- LOG  🎨 Class Feed Screen - Rendering glass morphism artwork-as-background feed
- LOG  📚 Class List Screen - Rendering class selection interface
- LOG  📚 Class List Screen - User classes count: 1
- LOG  🔧 DEBUG - ClassListScreen render: {"classIds": ["539c0b4e-f741-45a7-8df6-44afff8ccedc"], "classNames": ["Monday Drawing Fundamentals"], "isLoading": false, "timestamp": 1750981116500, "userClassesCount": 1}
- LOG  🌟 GlassMorphismCard - Rendering secondary glass card
- LOG  🏫 Class Join Modal - Rendering class join modal
  
  
  
3
  *** so when I then use the Join Class button for a 2nd time and enter the code I then am automatically taken to A TOTALLY DIFFERENT PAGE that I do not expect to be at. It is a page that reads " Be the first to share artwork in Your classmates will see your post appear here with a live countdown timer". This is not where I expect to be taken, because I know there is prepopilated data in the Monday Fundamentals class. ***
  
- LOG  ➕ Class List Screen - Opening join class modal
- LOG  ➕ Class Feed Screen - Opening join modal from class list
- LOG  🎨 Class Feed Screen - Rendering glass morphism artwork-as-background feed
- LOG  📚 Class List Screen - Rendering class selection interface
- LOG  📚 Class List Screen - User classes count: 1
- LOG  🔧 DEBUG - ClassListScreen render: {"classIds": ["539c0b4e-f741-45a7-8df6-44afff8ccedc"], "classNames": ["Monday Drawing Fundamentals"], "isLoading": false, "timestamp": 1750981165326, "userClassesCount": 1}
- LOG  🌟 GlassMorphismCard - Rendering secondary glass card
- LOG  🏫 Class Join Modal - Rendering class join modal
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  🏫 Class Join Modal - Rendering class join modal
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  🏫 Class Join Modal - Rendering class join modal
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  🏫 Class Join Modal - Rendering class join modal
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  🏫 Class Join Modal - Rendering class join modal
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  🏫 Class Join Modal - Rendering class join modal
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  🏫 Class Join Modal - Rendering class join modal
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  🏫 Class Join Modal - Rendering class join modal
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  🚀 Class Join Modal - Attempting to join class with code: DRAW01
- LOG  🚀 Class Store - Joining class with code: DRAW01
- LOG  🚀 Class Service - User attempting to join class: {"joinCode": "DRAW01", "userId": "a5aedeaa-02b5-4313-8bbc-9c6a798f1e13"}
- LOG  🔍 Class Service - Validating class join code: DRAW01
- LOG  🔍 Class Service - Validating join code format: DRAW01
- LOG  ✅ Class Service - Join code format validation: true
- LOG  📝 Class Service - Normalized join code: DRAW01
- LOG  🎥 Camera Screen - Rendering with permission: true
- LOG  📷 Camera Screen - Captured photo: No photo
- LOG  ⏫ Camera Screen - Upload state: {"isUploading": false, "uploadSuccess": false}
- LOG  🎨 Class Feed Screen - Rendering glass morphism artwork-as-background feed
- LOG  📚 Class List Screen - Rendering class selection interface
- LOG  📚 Class List Screen - User classes count: 1
- LOG  🔧 DEBUG - ClassListScreen render: {"classIds": ["539c0b4e-f741-45a7-8df6-44afff8ccedc"], "classNames": ["Monday Drawing Fundamentals"], "isLoading": true, "timestamp": 1750981183868, "userClassesCount": 1}
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  🏫 Class Join Modal - Rendering class join modal
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  🔍 Class Feed Screen - Checking class membership status
- LOG  🏫 Class Join Modal - Rendering class join modal
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  ✅ Class Service - Class found: Monday Drawing Fundamentals
- LOG  ✅ Class Service - Join code validated for class: Monday Drawing Fundamentals
- LOG  ℹ️ Class Service - User is already a member
- LOG  🎉 Class Store - Successfully joined class: Monday Drawing Fundamentals
- LOG  ℹ️ Class Store - User already member of class, not adding duplicate
- LOG  🎥 Camera Screen - Rendering with permission: true
- LOG  📷 Camera Screen - Captured photo: No photo
- LOG  ⏫ Camera Screen - Upload state: {"isUploading": false, "uploadSuccess": false}
- LOG  🎨 Class Feed Screen - Rendering glass morphism artwork-as-background feed
- LOG  📚 Class List Screen - Rendering class selection interface
- LOG  📚 Class List Screen - User classes count: 1
- LOG  🔧 DEBUG - ClassListScreen render: {"classIds": ["539c0b4e-f741-45a7-8df6-44afff8ccedc"], "classNames": ["Monday Drawing Fundamentals"], "isLoading": false, "timestamp": 1750981184080, "userClassesCount": 1}
- LOG  🌟 GlassMorphismCard - Rendering secondary glass card
- LOG  🏫 Class Join Modal - Rendering class join modal
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  🔍 Class Feed Screen - Checking class membership status
- LOG  🎨 Class Feed Screen - Class selected, showing feed
- LOG  🎉 Class Join Modal - Successfully joined class
- LOG  🎉 Class Feed Screen - Successfully joined class
- LOG  🔧 DEBUG - handleJoinSuccess START: {"currentClassId": "539c0b4e-f741-45a7-8df6-44afff8ccedc", "currentClassName": "Monday Drawing Fundamentals", "showClassList": true, "showJoinModal": true, "timestamp": 1750981184099, "userClassesCount": 1}
- LOG  🔄 Class Feed Screen - Refreshing user classes after join
- LOG  🔧 DEBUG - About to call loadUserClasses: {"timestamp": 1750981184100, "userId": "a5aedeaa-02b5-4313-8bbc-9c6a798f1e13"}
- LOG  📚 Class Store - Loading user classes: a5aedeaa-02b5-4313-8bbc-9c6a798f1e13
- LOG  🔧 DEBUG - loadUserClasses START: {"currentClassIds": ["539c0b4e-f741-45a7-8df6-44afff8ccedc"], "currentUserClassesCount": 1, "timestamp": 1750981184100}
- LOG  📋 Class Service - Fetching user classes: a5aedeaa-02b5-4313-8bbc-9c6a798f1e13
- LOG  🎥 Camera Screen - Rendering with permission: true
- LOG  📷 Camera Screen - Captured photo: No photo
- LOG  ⏫ Camera Screen - Upload state: {"isUploading": false, "uploadSuccess": false}
- LOG  🎨 Class Feed Screen - Rendering glass morphism artwork-as-background feed
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  🏫 Class Join Modal - Rendering class join modal
- LOG  🔍 Class Feed Screen - Checking class membership status
- LOG  ✅ Class Service - Found 1 classes for user
- LOG  ✅ Class Store - Loaded 1 classes
- LOG  🔧 DEBUG - loadUserClasses END: {"newClassIds": ["539c0b4e-f741-45a7-8df6-44afff8ccedc"], "newClassNames": ["Monday Drawing Fundamentals"], "newUserClassesCount": 1, "timestamp": 1750981184154}
- LOG  🎥 Camera Screen - Rendering with permission: true
- LOG  📷 Camera Screen - Captured photo: No photo
- LOG  ⏫ Camera Screen - Upload state: {"isUploading": false, "uploadSuccess": false}
- LOG  🎨 Class Feed Screen - Rendering glass morphism artwork-as-background feed
- LOG  🌟 GlassMorphismCard - Rendering primary glass card
- LOG  🏫 Class Join Modal - Rendering class join modal
- LOG  🔍 Class Feed Screen - Checking class membership status
- LOG  🎨 Class Feed Screen - Class selected, showing feed
- LOG  🎨 Class Feed Screen - Rendering glass morphism artwork-as-background feed

================
File: _docs/oldArt_Share.md
================
# EphemeralArt - Temporary Art Sharing Platform

## Project Description
A mobile app for art students to share works-in-progress in low-pressure, ephemeral environments. Students join class groups via teacher-provided codes, share artwork with controlled visibility and timing, and receive both peer feedback and optional AI guidance (limited to 2 AI feedbacks per day).

## Target Audience
**Primary**: Art students in structured drawing/painting classes
**Use case**: Alex, taking a drawing class, wants to share a quick sketch with 3-5 classmates for 30 minutes before bed

## Desired Features
### Core Functionality
- [ ] Simple authentication (name + join class code)
- [ ] Join class groups via 6-digit codes (e.g., "DRAW01")
- [ ] In-app camera for artwork photography
- [ ] Basic sharing controls (max viewers: 1-20, duration: 10min-24hrs)
- [ ] Auto-deletion system for shared content
- [ ] View counter (tracks actual viewers vs max allowed)
- [ ] Simple peer commenting

### AI Features (Simplified)
- [ ] Optional AI feedback button (post-sharing)
- [ ] GPT-4V analysis with encouraging, actionable art advice
- [ ] Rate limit: 2 AI feedback requests per day per user

### Essential Social Features
- [ ] Class-based group feeds
- [ ] Real-time notifications for new posts/comments
- [ ] Clear privacy indicators

## Database Schema
### Tables
- [ ] Users (id, name, class_id, ai_feedback_count, last_ai_reset)
- [ ] Classes (id, name, join_code)
- [ ] Posts (id, user_id, image_url, expires_at, max_viewers, view_count)
- [ ] Comments (id, post_id, user_id, text, created_at)

## Design Requests
- [ ] Camera-first interface (like Snapchat)
    - [ ] Simple controls for viewer limit and duration
    - [ ] Clear countdown timers showing when content expires
- [ ] Encouraging, anxiety-reducing design
    - [ ] Clear privacy indicators ("Only 3 people can see this")
    - [ ] AI feedback quota display ("1 AI feedback remaining today")

## Technical Implementation
- [ ] React Native + Expo
- [ ] Supabase (auth, database, storage, real-time)
- [ ] OpenAI GPT-4V API (direct calls)
- [ ] Expo Camera API
- [ ] Join code system with 6-digit alphanumeric codes

## Testing Data
- [ ] 2 sample classes: "Monday Drawing Fundamentals" (DRAW01), "Advanced Sketching" (SKETCH2)
- [ ] 5 users per class with sample artwork
- [ ] Simple drawings provided for testing posts

## Other Notes
- 7-day development timeline
- Teachers create classes and distribute join codes
- Completely ephemeral - no private saving options
- No user profiles or skill levels

================
File: _docs/repomix.md
================
npx repomix --output repomix-output.txt --style plain

================
File: _docs/RLSMigrationsSQL.md
================
# RLS Migrations & SQL Database Structure

## Overview

This document describes the comprehensive database structure, Row Level Security (RLS) policies, and migration strategy for the Draft (Ephemeral Art Sharing) application. The database has been designed with a **TypeScript-first, non-recursive RLS** approach to ensure security without performance issues.

## Migration Strategy

### Philosophy: Fix at Source
Rather than applying band-aid fixes, we implemented **non-recursive RLS policies from the start** in the original migration files. This approach ensures:
- Clean migration history
- No recursive policy dependencies
- Optimal performance
- Maintainable security model

### Migration Timeline

```
20250101000001_auth_tables.sql          - User authentication & profiles
20250101000002_setup_storage.sql        - Supabase Storage bucket setup
20250101000003_create_photos_table.sql  - Photo metadata storage
20250101000004_storage_policies.sql     - Storage bucket RLS policies
20250102000001_create_classes_table.sql - Classes & membership system
20250102000002_create_posts_table.sql   - Ephemeral posts & views tracking
20250102000003_create_comments_table.sql- Comments with character limits
20250102000004_create_ai_feedback_table.sql - AI feedback integration
20250102000005_demo_data_seed.sql       - Demo content for testing
20250102000009_fix_all_recursive_policies.sql - Safety net (mostly no-ops)
```

## Database Schema

### Core Tables

#### 1. `public.users`
**Purpose**: User profiles extending auth.users
```sql
CREATE TABLE public.users (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  email TEXT UNIQUE NOT NULL,
  username TEXT UNIQUE,
  avatar_url TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

**RLS Policies**:
- `"Users can view own profile"` - Users see their own data
- `"Users can insert own profile"` - Registration support
- `"Users can update own profile"` - Profile editing
- `"Users can view other profiles"` - Social features (usernames, avatars)

#### 2. `public.classes`
**Purpose**: Art classes with join codes
```sql
CREATE TABLE public.classes (
  id UUID PRIMARY KEY,
  name TEXT NOT NULL,
  join_code TEXT UNIQUE NOT NULL CHECK (join_code ~ '^[A-Z0-9]{6}$'),
  description TEXT,
  created_by UUID REFERENCES auth.users(id),
  is_active BOOLEAN DEFAULT true,
  max_students INTEGER DEFAULT 30,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

**Features**:
- Automatic 6-character join code generation
- Class capacity management
- Soft deletion via `is_active`

**RLS Policies**:
- `"Active classes are viewable by everyone"` - Public class discovery
- `"Authenticated users can create classes"` - Class creation
- `"Class creators can update their classes"` - Management by creators
- `"Class creators can delete their classes"` - Deletion by creators

#### 3. `public.class_members`
**Purpose**: User-class relationships
```sql
CREATE TABLE public.class_members (
  id UUID PRIMARY KEY,
  class_id UUID NOT NULL REFERENCES public.classes(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  role TEXT DEFAULT 'student' CHECK (role IN ('student', 'teacher', 'admin')),
  joined_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  is_active BOOLEAN DEFAULT true,
  CONSTRAINT class_members_unique_membership UNIQUE(class_id, user_id)
);
```

**RLS Policies** (Non-Recursive):
- `"Users can view own membership only"` - **SIMPLIFIED**: Users only see their own memberships
- `"Users can join classes"` - Self-registration
- `"Users can update own membership"` - Leave/rejoin functionality

**Note**: Advanced admin policies were removed to prevent recursion. Class membership validation happens at the application level.

#### 4. `public.posts`
**Purpose**: Ephemeral artwork posts
```sql
CREATE TABLE public.posts (
  id UUID PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  class_id UUID NOT NULL REFERENCES public.classes(id) ON DELETE CASCADE,
  image_url TEXT NOT NULL,
  image_path TEXT,
  frame_style TEXT,
  title TEXT,
  description TEXT,
  max_viewers INTEGER DEFAULT 5 CHECK (max_viewers > 0 AND max_viewers <= 50),
  view_count INTEGER DEFAULT 0,
  duration_minutes INTEGER NOT NULL CHECK (duration_minutes > 0),
  expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
  is_expired BOOLEAN DEFAULT false,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

**Features**:
- Automatic expiration calculation
- View count tracking with limits
- Frame overlay support
- Ephemeral lifecycle management

**RLS Policies** (Non-Recursive):
- `"Users can view posts in their classes"` - **SIMPLIFIED**: Users see own posts + posts in active classes
- `"Users can create posts"` - **SIMPLIFIED**: Basic class existence check
- `"Users can update own posts"` - Self-management
- `"Users can delete own posts"` - Self-deletion

**Note**: Class membership validation moved to application level to avoid recursion.

#### 5. `public.post_views`
**Purpose**: Track individual post views (prevent double-counting)
```sql
CREATE TABLE public.post_views (
  id UUID PRIMARY KEY,
  post_id UUID NOT NULL REFERENCES public.posts(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  viewed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  CONSTRAINT post_views_unique_view UNIQUE(post_id, user_id)
);
```

**RLS Policies**:
- `"Users can view own viewing history"` - Self-tracking
- `"Users can record own views"` - View logging
- `"Post owners can see viewers"` - Analytics for post creators

#### 6. `public.comments`
**Purpose**: Peer feedback with character limits
```sql
CREATE TABLE public.comments (
  id UUID PRIMARY KEY,
  post_id UUID NOT NULL REFERENCES public.posts(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  content TEXT NOT NULL CHECK (length(content) >= 1 AND length(content) <= 150),
  is_edited BOOLEAN DEFAULT false,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

**Features**:
- 150-character limit for focused feedback
- Edit tracking
- Automatic timestamps

**RLS Policies** (Non-Recursive):
- `"Users can view comments on accessible posts"` - **SIMPLIFIED**: Own posts + non-expired posts
- `"Users can create comments"` - **SIMPLIFIED**: Basic post existence check
- `"Users can update own comments"` - Self-editing
- `"Users can delete own comments"` - Self-deletion

#### 7. `public.ai_feedback`
**Purpose**: AI-generated artwork analysis
```sql
CREATE TABLE public.ai_feedback (
  id UUID PRIMARY KEY,
  post_id UUID NOT NULL REFERENCES public.posts(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  feedback_text TEXT NOT NULL,
  feedback_status TEXT DEFAULT 'completed',
  processing_time_ms INTEGER,
  ai_model TEXT DEFAULT 'gpt-4v',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  CONSTRAINT ai_feedback_unique_per_post UNIQUE(post_id)
);
```

**Features**:
- One feedback per post limit
- Processing status tracking
- AI model versioning
- Performance metrics

**RLS Policies**:
- `"Users can view AI feedback on own posts"` - Post owners only
- `"Users can request AI feedback on own posts"` - Self-service
- `"Users can update own AI feedback"` - Status management
- `"Users can delete own AI feedback"` - Self-management

#### 8. `public.photos`
**Purpose**: Photo metadata for camera functionality
```sql
CREATE TABLE public.photos (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  file_name TEXT NOT NULL,
  file_path TEXT NOT NULL UNIQUE,
  file_size BIGINT NOT NULL DEFAULT 0,
  mime_type TEXT NOT NULL DEFAULT 'image/jpeg',
  width INTEGER,
  height INTEGER,
  taken_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  uploaded_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  storage_bucket TEXT NOT NULL DEFAULT 'photos',
  public_url TEXT
);
```

**RLS Policies**:
- `"Photos are viewable by everyone"` - Public sharing
- `"Users can upload photos"` - Upload functionality
- `"Users can update own photos"` - Metadata editing
- `"Users can delete own photos"` - Cleanup

## RLS Security Model

### Non-Recursive Approach

**Problem Solved**: Original policies created infinite recursion by querying the same tables they were protecting.

**Solution**: Simplified policies that:
1. **Avoid self-referential queries** - No table queries itself in its own policies
2. **Move complex logic to application layer** - Class membership validation in TypeScript
3. **Use direct table references only** - Simple existence checks without joins
4. **Prioritize performance over granular security** - Trust application-level validation

### Security Layers

1. **Database Level**: Basic ownership and existence checks
2. **Application Level**: Complex business logic (class membership, permissions)
3. **Storage Level**: Bucket-based access control
4. **Authentication Level**: Supabase Auth integration

### Policy Patterns

```sql
-- ✅ GOOD: Non-recursive, simple ownership check
USING (auth.uid() = user_id)

-- ✅ GOOD: Direct table reference without joins
USING (class_id IN (SELECT id FROM public.classes WHERE is_active = true))

-- ❌ BAD: Recursive - queries same table being protected
USING (class_id IN (SELECT class_id FROM public.class_members WHERE user_id = auth.uid()))

-- ❌ BAD: Complex joins that can cause recursion
USING (post_id IN (
  SELECT p.id FROM public.posts p
  INNER JOIN public.class_members cm ON p.class_id = cm.class_id
  WHERE cm.user_id = auth.uid()
))
```

## Database Functions

### Utility Functions

1. **`generate_join_code()`** - Creates unique 6-character class codes
2. **`set_join_code()`** - Trigger function for automatic code generation
3. **`handle_updated_at()`** - Automatic timestamp updates
4. **`handle_new_user()`** - Auto-create user profiles on registration

### Post Management Functions

1. **`set_post_expiration()`** - Calculate expiration times from duration
2. **`mark_expired_posts()`** - Batch expiration processing
3. **`increment_post_view()`** - Safe view count incrementation

### Comment & AI Functions

1. **`track_comment_edit()`** - Mark comments as edited
2. **`validate_comment_content()`** - Content validation
3. **`validate_ai_feedback_request()`** - AI feedback validation
4. **`get_post_comment_count()`** - Comment counting
5. **`has_ai_feedback()`** - AI feedback existence check

## Storage Configuration

### Buckets

- **`photos`**: Public bucket for artwork images
  - 50MB file size limit
  - Supports: JPEG, PNG, WebP, GIF
  - Public read access
  - Authenticated upload only

### Storage Policies

```sql
-- Public read access
CREATE POLICY "Photos are publicly viewable" ON storage.objects
FOR SELECT TO public USING (bucket_id = 'photos');

-- Authenticated upload
CREATE POLICY "Authenticated users can upload to photos bucket" ON storage.objects
FOR INSERT TO authenticated WITH CHECK (bucket_id = 'photos');
```

## Demo Data Structure

### Test Environment

- **Demo Class**: "Monday Drawing Fundamentals" (join code: `DRAW01`)
- **Demo Users**: Maya, Jordan, Sam, Casey, Riley (5 fake classmates)
- **Sample Posts**: 4 artwork posts with realistic timing and engagement
- **Realistic Data**: View counts, comments, AI feedback examples

### Demo Post Examples

1. **Maya's Charcoal Portrait** - Expires in 45min, 3/5 viewers
2. **Jordan's Watercolor Landscape** - Expires in 2h20m, 2/4 viewers  
3. **Sam's Pencil Hand Study** - Expires in 18min, 5/5 viewers (max)
4. **Casey's Digital Character** - Expires in 23h45m, 1/3 viewers

## Performance Considerations

### Indexing Strategy

- **Primary Keys**: All tables use UUID primary keys
- **Foreign Keys**: Indexed for join performance
- **Query Patterns**: Compound indexes for common access patterns
- **Time-based**: Indexes on created_at, expires_at for sorting

### Query Optimization

- **Avoid N+1 queries**: Batch user data fetching in application
- **Minimize RLS overhead**: Simple policies with direct checks
- **Cache frequently accessed data**: Class memberships, user info
- **Efficient pagination**: Cursor-based pagination for feeds

## Future Enhancements

### Planned Improvements

1. **Enhanced Admin Policies**: Non-recursive admin management
2. **Real-time Subscriptions**: Live feed updates
3. **Advanced Analytics**: Post performance tracking
4. **Content Moderation**: Automated content filtering
5. **Backup & Archival**: Expired content management

### Migration Strategy

- **Additive Changes**: New tables and columns only
- **Backward Compatibility**: Maintain existing API contracts
- **Feature Flags**: Gradual rollout of new features
- **Data Migration**: Safe data transformation procedures

---

## Summary

This database structure provides a robust foundation for the Draft ephemeral art sharing application with:

- ✅ **Non-recursive RLS policies** for optimal performance
- ✅ **Comprehensive security model** with layered protection
- ✅ **Ephemeral content management** with automatic expiration
- ✅ **Social features** (comments, AI feedback, view tracking)
- ✅ **Scalable architecture** ready for future enhancements
- ✅ **Clean migration history** with fixes applied at source

The key innovation is the **non-recursive RLS approach** that moves complex business logic to the application layer while maintaining database-level security for ownership and basic validation.

================
File: _docs/supabase_localVcloud.md
================
/**
 * Supabase Client Configuration
 * 
 * This file configures the Supabase client for the SnapClone application.
 * It automatically switches between local and cloud environments based on
 * the development mode (`__DEV__`).
 */

import { createClient } from '@supabase/supabase-js';
import Constants from 'expo-constants';

// The __DEV__ global variable is `true` when running in development mode,
// and `false` when running in a production build.
const isDevelopment = __DEV__;

console.log('Running in', isDevelopment ? 'DEVELOPMENT' : 'PRODUCTION', 'mode.');

// Conditionally choose the Supabase URL and Key
const supabaseUrl = isDevelopment
  ? Constants.expoConfig?.extra?.EXPO_PUBLIC_SUPABASE_URL_LOCAL
  : Constants.expoConfig?.extra?.EXPO_PUBLIC_SUPABASE_URL;

const supabaseAnonKey = isDevelopment
  ? Constants.expoConfig?.extra?.EXPO_PUBLIC_SUPABASE_ANON_KEY_LOCAL
  : Constants.expoConfig?.extra?.EXPO_PUBLIC_SUPABASE_ANON_KEY;

console.log('🔧 Supabase Config - Initializing client for', isDevelopment ? 'Local' : 'Cloud');
console.log('📍 Supabase URL:', supabaseUrl ? 'Set ✓' : 'Missing ❌');
console.log('🔑 Supabase Anon Key:', supabaseAnonKey ? 'Set ✓' : 'Missing ❌');

if (!supabaseUrl || !supabaseAnonKey) {
  const missingVar = !supabaseUrl ? 'URL' : 'Key';
  const envName = isDevelopment ? `EXPO_PUBLIC_SUPABASE_${missingVar}_LOCAL` : `EXPO_PUBLIC_SUPABASE_${missingVar}`;
  throw new Error(
    `Missing Supabase environment variable: ${envName}. Please check your .env file.`
  );
}

/**
 * Supabase client instance
 * Configured with auto-refresh for authentication and proper URL handling
 */
export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false,
  },
});

/**
 * Database Types for TypeScript support
 */
export interface Photo {
  id: string;
  user_id?: string;
  file_name: string;
  file_path: string;
  file_size: number;
  mime_type: string;
  width?: number;
  height?: number;
  taken_at: string;
  uploaded_at: string;
  storage_bucket: string;
  public_url?: string;
}

export interface Database {
  public: {
    Tables: {
      photos: {
        Row: Photo;
        Insert: Omit<Photo, 'id' | 'uploaded_at'>;
        Update: Partial<Omit<Photo, 'id' | 'uploaded_at'>>;
      };
    };
  };
}

console.log('✅ Supabase client initialized successfully');

================
File: .cursor/rules/create-feature-prd.mdc
================
---
description: Guide for generating a detailed Product Requirements Document (PRD) based on user prompts
globs: **/tasks/**/*.md, **/prd-*.md
---

# Rule: Generating a Product Requirements Document (PRD)

// Description: Guide for generating a detailed Product Requirements Document (PRD) based on user prompts
// Recommended Globs: **/tasks/**/*.md, **/prd-*.md

## Goal

To guide an AI assistant in creating a detailed Product Requirements Document (PRD) in Markdown format, based on an initial user prompt. The PRD should be clear, actionable, and suitable for a junior developer to understand and implement the feature.

## Process

1.  **Receive Initial Prompt:** The user provides a brief description or request for a new feature or functionality.
2.  **Ask Clarifying Questions:** Before writing the PRD, the AI *must* ask clarifying questions to gather sufficient detail. The goal is to understand the "what" and "why" of the feature, not necessarily the "how" (which the developer will figure out).
3.  **Generate PRD:** Based on the initial prompt and the user's answers to the clarifying questions, generate a PRD using the structure outlined below.
4.  **Save PRD:** Save the generated document as `prd-[feature-name].md` inside the `/tasks` directory.

## Clarifying Questions (Examples)

The AI should adapt its questions based on the prompt, but here are some common areas to explore:

*   **Problem/Goal:** "What problem does this feature solve for the user?" or "What is the main goal we want to achieve with this feature?"
*   **Target User:** "Who is the primary user of this feature?"
*   **Core Functionality:** "Can you describe the key actions a user should be able to perform with this feature?"
*   **User Stories:** "Could you provide a few user stories? (e.g., As a [type of user], I want to [perform an action] so that [benefit].)"
*   **Acceptance Criteria:** "How will we know when this feature is successfully implemented? What are the key success criteria?"
*   **Scope/Boundaries:** "Are there any specific things this feature *should not* do (non-goals)?"
*   **Data Requirements:** "What kind of data does this feature need to display or manipulate?"
*   **Design/UI:** "Are there any existing design mockups or UI guidelines to follow?" or "Can you describe the desired look and feel?"
*   **Edge Cases:** "Are there any potential edge cases or error conditions we should consider?"

## PRD Structure

The generated PRD should include the following sections:

1.  **Introduction/Overview:** Briefly describe the feature and the problem it solves. State the goal.
2.  **Goals:** List the specific, measurable objectives for this feature.
3.  **User Stories:** Detail the user narratives describing feature usage and benefits.
4.  **Functional Requirements:** List the specific functionalities the feature must have. Use clear, concise language (e.g., "The system must allow users to upload a profile picture."). Number these requirements.
5.  **Non-Goals (Out of Scope):** Clearly state what this feature will *not* include to manage scope.
6.  **Design Considerations (Optional):** Link to mockups, describe UI/UX requirements, or mention relevant components/styles if applicable.
7.  **Technical Considerations (Optional):** Mention any known technical constraints, dependencies, or suggestions (e.g., "Should integrate with the existing Auth module").
8.  **Success Metrics:** How will the success of this feature be measured? (e.g., "Increase user engagement by 10%", "Reduce support tickets related to X").
9.  **Open Questions:** List any remaining questions or areas needing further clarification.

## Target Audience

Assume the primary reader of the PRD is a **junior developer**. Therefore, requirements should be explicit, unambiguous, and avoid jargon where possible. Provide enough detail for them to understand the feature's purpose and core logic.

## Output

*   **Format:** Markdown (`.md`)
*   **Location:** `/tasks/`
*   **Filename:** `prd-[feature-name].md`

## Final instructions

1. Do NOT start implementing the PRD
2. Make sure to ask the user clarifying questions
3. Take the user's answers to the clarifying questions and improve the PRD

================
File: .cursor/rules/debug-commands.mdc
================
---
description: This tool performs debugging steps for applications
globs: **/*.{js,ts,jsx,tsx,py,html,css,json}
---

# Debug Commands

// Description: This tool performs debugging steps for applications
// Recommended Globs: **/*.{js,ts,jsx,tsx,py,html,css,json}

## Overview
Debug commands provide a streamlined approach to troubleshooting applications by gathering console logs, network errors, and taking screenshots to help identify and fix issues.

## Core Commands

### `/debug` Command
When you type `/debug` in the chat, the AI will automatically:
1. Gather all console logs from the browser
2. Collect any console errors
3. Take a screenshot of the current application state

## Implementation

```javascript
// Example implementation of debug command handler
async function handleDebugCommand() {
  // Gather console logs
  const consoleLogs = await mcp__getConsoleLogs();
  
  // Collect console errors
  const consoleErrors = await mcp__getConsoleErrors();
  
  // Take screenshot
  const screenshot = await mcp__takeScreenshot();
  
  // Analyze and present results
  return {
    consoleLogs,
    consoleErrors,
    screenshot
  };
}
```

## Usage Examples

### Example 1: Debugging a React Application
```
User: My React app is showing a blank screen
AI: Let me help you debug this issue. Type /debug to gather diagnostic information.
User: /debug
AI: [Executes debug command and analyzes results]
    I've found the following issues:
    1. Console error: "TypeError: Cannot read property 'map' of undefined"
    The screenshot shows a blank page with React's error boundary not properly configured.
```

### Example 2: Troubleshooting API Integration
```
User: My API calls are failing and I'm not sure why
AI: Let's investigate. Type /debug while the application is making the API call.
User: /debug
AI: [Executes debug command and analyzes results]
    I've found the following issues:
    1. Console log shows the authorization header is missing
    Based on the screenshot, you need to add proper authentication to your API calls.
```

## Best Practices

### When to Use Debug Commands
- When an application shows unexpected behavior
- When there are no visible error messages
- When troubleshooting network or API issues
- When investigating performance problems
- When helping users who can't easily access developer tools

### Interpreting Debug Results
- Look for patterns in console errors
- Check for failed network requests
- Examine the visual state in screenshots
- Correlate timestamps between different logs
- Identify missing resources or dependencies

### Security Considerations
- Ensure sensitive information is not captured in logs or screenshots
- Be cautious with debugging production environments
- Consider implementing log sanitization for sensitive data
- Use secure channels when sharing debug information

## Supported Environments
- Web browsers (Chrome, Firefox, Safari, Edge)
- React, Angular, Vue applications
- Node.js backend services
- Python applications with proper logging
- Mobile web applications

## Additional Commands

### `/debug:console`
Focus specifically on console output:
```
User: /debug:console
AI: [Gathers console logs and errors]
```

### `/debug:visual`
Focus specifically on visual issues:
```
User: /debug:visual
AI: [Takes screenshot and analyzes visual elements]
```

## Resources
- [Browser DevTools Documentation](https://developer.chrome.com/docs/devtools/)
- [React Error Boundaries](https://reactjs.org/docs/error-boundaries.html)
- [JavaScript Debugging Techniques](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Debugging)
- [Python Debugging Tools](https://docs.python.org/3/library/debug.html)

================
File: .cursor/rules/generate-tasks.mdc
================
---
description: Guide for creating detailed task lists from Product Requirements Documents (PRDs)
globs: **/tasks/**/*.md, **/tasks-*.md
---

# Rule: Generating a Task List from a PRD

// Description: Guide for creating detailed task lists from Product Requirements Documents (PRDs)
// Recommended Globs: **/tasks/**/*.md, **/tasks-*.md

## Goal

To guide an AI assistant in creating a detailed, step-by-step task list in Markdown format based on an existing Product Requirements Document (PRD). The task list should guide a developer through implementation.

## Output

- **Format:** Markdown (`.md`)
- **Location:** `/tasks/`
- **Filename:** `tasks-[prd-file-name].md` (e.g., `tasks-prd-user-profile-editing.md`)

## Process

1.  **Receive PRD Reference:** The user points the AI to a specific PRD file
2.  **Analyze PRD:** The AI reads and analyzes the functional requirements, user stories, and other sections of the specified PRD.
3.  **Phase 1: Generate Parent Tasks:** Based on the PRD analysis, create the file and generate the main, high-level tasks required to implement the feature. Use your judgement on how many high-level tasks to use. It's likely to be about 5. Present these tasks to the user in the specified format (without sub-tasks yet). Inform the user: "I have generated the high-level tasks based on the PRD. Ready to generate the sub-tasks? Respond with 'Go' to proceed."
4.  **Wait for Confirmation:** Pause and wait for the user to respond with "Go".
5.  **Phase 2: Generate Sub-Tasks:** Once the user confirms, break down each parent task into smaller, actionable sub-tasks necessary to complete the parent task. Ensure sub-tasks logically follow from the parent task and cover the implementation details implied by the PRD.
6.  **Identify Relevant Files:** Based on the tasks and PRD, identify potential files that will need to be created or modified. List these under the `Relevant Files` section, including corresponding test files if applicable.
7.  **Generate Final Output:** Combine the parent tasks, sub-tasks, relevant files, and notes into the final Markdown structure.
8.  **Save Task List:** Save the generated document in the `/tasks/` directory with the filename `tasks-[prd-file-name].md`, where `[prd-file-name]` matches the base name of the input PRD file (e.g., if the input was `prd-user-profile-editing.md`, the output is `tasks-prd-user-profile-editing.md`).

## Output Format

The generated task list _must_ follow this structure:

```markdown
## Relevant Files

- `path/to/potential/file1.ts` - Brief description of why this file is relevant (e.g., Contains the main component for this feature).
- `path/to/file1.test.ts` - Unit tests for `file1.ts`.
- `path/to/another/file.tsx` - Brief description (e.g., API route handler for data submission).
- `path/to/another/file.test.tsx` - Unit tests for `another/file.tsx`.
- `lib/utils/helpers.ts` - Brief description (e.g., Utility functions needed for calculations).
- `lib/utils/helpers.test.ts` - Unit tests for `helpers.ts`.

### Notes

- Unit tests should typically be placed alongside the code files they are testing (e.g., `MyComponent.tsx` and `MyComponent.test.tsx` in the same directory).
- Use `npx jest [optional/path/to/test/file]` to run tests. Running without a path executes all tests found by the Jest configuration.

## Tasks

- [ ] 1.0 Parent Task Title
  - [ ] 1.1 [Sub-task description 1.1]
  - [ ] 1.2 [Sub-task description 1.2]
- [ ] 2.0 Parent Task Title
  - [ ] 2.1 [Sub-task description 2.1]
- [ ] 3.0 Parent Task Title (may not require sub-tasks if purely structural or configuration)
```

## Interaction Model

The process explicitly requires a pause after generating parent tasks to get user confirmation ("Go") before proceeding to generate the detailed sub-tasks. This ensures the high-level plan aligns with user expectations before diving into details.

## Target Audience

Assume the primary reader of the task list is a **junior developer** who will implement the feature.

================
File: .cursor/rules/mobile-first-web.mdc
================
---
description: Best practices for mobile-first web development using Tailwind, React, and Firebase
globs: **/*.{js,jsx,ts,tsx}, **/tailwind.config.{js,ts}, **/firebase.config.{js,ts}
---

# Mobile First Web Development

// Description: Best practices for mobile-first web development using Tailwind, React, and Firebase
// Recommended Globs: **/*.{js,jsx,ts,tsx}, **/tailwind.config.{js,ts}, **/firebase.config.{js,ts}

## Project Structure
```
src/
  components/
    common/
      Button.tsx
      Card.tsx
      Modal.tsx
    features/
      medications/
        MedicationCard.tsx
        MedicationList.tsx
        AdherenceReport.tsx
    layout/
      Header.tsx
      Navigation.tsx
  hooks/
    useMedications.ts
    useAuth.ts
    useFirestore.ts
  pages/
    dashboard/
    medications/
    reports/
  services/
    firebase/
    analytics/
  styles/
    tailwind.css
  utils/
    dates.ts
    statistics.ts
```

## Design System Configuration
```javascript
// tailwind.config.js
module.exports = {
  content: ['./src/**/*.{js,jsx,ts,tsx}'],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#f0f9ff',
          100: '#e0f2fe',
          // ... other shades
          900: '#0c4a6e'
        },
        // ... other color scales
      },
      spacing: {
        'safe-top': 'env(safe-area-inset-top)',
        'safe-bottom': 'env(safe-area-inset-bottom)'
      },
      fontSize: {
        'fluid-sm': 'clamp(0.875rem, 0.8rem + 0.25vw, 1rem)',
        'fluid-base': 'clamp(1rem, 0.925rem + 0.375vw, 1.125rem)',
        'fluid-lg': 'clamp(1.125rem, 1.05rem + 0.5vw, 1.25rem)'
      }
    }
  },
  plugins: [
    require('@tailwindcss/forms'),
    require('@tailwindcss/aspect-ratio')
  ]
}
```

## Responsive Components
```typescript
// src/components/features/medications/MedicationCard.tsx
import { useState } from 'react';
import { motion } from 'framer-motion';

interface MedicationCardProps {
  medication: Medication;
  onTake: () => void;
  onSkip: () => void;
}

export function MedicationCard({ medication, onTake, onSkip }: MedicationCardProps) {
  const [showConfirm, setShowConfirm] = useState(false);

  return (
    <motion.div
      layout
      className="p-4 bg-white rounded-lg shadow-md
                 sm:p-6 md:p-8
                 hover:shadow-lg transition-shadow
                 touch-manipulation"
      whileTap={{ scale: 0.98 }}
    >
      <div className="flex items-center space-x-4">
        <div className="flex-shrink-0">
          <img
            src={medication.imageUrl}
            alt={medication.name}
            className="w-16 h-16 rounded-full
                       sm:w-20 sm:h-20
                       object-cover"
          />
        </div>
        <div className="flex-1 min-w-0">
          <h3 className="text-fluid-lg font-semibold text-gray-900
                         truncate">
            {medication.name}
          </h3>
          <p className="text-fluid-sm text-gray-500">
            {medication.dosage} • {medication.schedule}
          </p>
        </div>
      </div>

      <div className="mt-4 flex space-x-3
                      sm:mt-6">
        <button
          onClick={() => setShowConfirm(true)}
          className="flex-1 min-h-[44px] px-4 py-2
                     bg-primary-600 text-white
                     rounded-lg font-medium
                     hover:bg-primary-700
                     focus:outline-none focus:ring-2
                     focus:ring-primary-500 focus:ring-offset-2
                     transition-colors"
          aria-label={`Take ${medication.name}`}
        >
          Take
        </button>
        <button
          onClick={() => setShowConfirm(true)}
          className="flex-1 min-h-[44px] px-4 py-2
                     border border-gray-300
                     text-gray-700
                     rounded-lg font-medium
                     hover:bg-gray-50
                     focus:outline-none focus:ring-2
                     focus:ring-primary-500 focus:ring-offset-2
                     transition-colors"
          aria-label={`Skip ${medication.name}`}
        >
          Skip
        </button>
      </div>

      {showConfirm && (
        <ConfirmationModal
          medication={medication}
          onConfirm={onTake}
          onCancel={() => setShowConfirm(false)}
        />
      )}
    </motion.div>
  );
}
```

## Firebase Integration
- Use Node.js 20 for Cloud Functions (MANDATORY as v18 is being deprecated)
- Follow modular SDK approach

```typescript
// functions/package.json
{
  "name": "functions",
  "engines": {
    "node": "20"
  },
  "dependencies": {
    "firebase-admin": "^12.0.0",
    "firebase-functions": "^4.5.0"
  }
}

// src/services/firebase/medications.ts
import { collection, query, where, orderBy, getDocs } from 'firebase/firestore';

export async function getMedicationsBySchedule(userId: string, schedule: string) {
  try {
    const q = query(
      collection(db, 'medications'),
      where('userId', '==', userId),
      where('schedule', '==', schedule),
      orderBy('name')
    );

    const querySnapshot = await getDocs(q);
    return querySnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    }));
  } catch (error) {
    console.error('Error fetching medications:', error);
    throw error;
  }
}

export async function logMedicationAction(
  userId: string,
  medicationId: string,
  action: 'take' | 'skip',
  notes?: string
) {
  try {
    await addDoc(collection(db, 'medication_logs'), {
      userId,
      medicationId,
      action,
      notes,
      timestamp: serverTimestamp()
    });
  } catch (error) {
    console.error('Error logging medication action:', error);
    throw error;
  }
}
```

## Custom Hooks
```typescript
// src/hooks/useMedications.ts
import { useState, useEffect } from 'react';
import { useFirestore } from './useFirestore';
import { useAuth } from './useAuth';

export function useMedications(schedule: string) {
  const [medications, setMedications] = useState<Medication[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<Error | null>(null);
  const { user } = useAuth();
  const { getMedicationsBySchedule } = useFirestore();

  useEffect(() => {
    if (!user) return;

    async function fetchMedications() {
      try {
        const data = await getMedicationsBySchedule(user.id, schedule);
        setMedications(data);
      } catch (err) {
        setError(err as Error);
      } finally {
        setLoading(false);
      }
    }

    fetchMedications();
  }, [user, schedule]);

  return { medications, loading, error };
}
```

## Best Practices

### Mobile-First Design
- Start with mobile layout and progressively enhance for larger screens
- Use Tailwind's responsive prefixes (sm:, md:, lg:, xl:) consistently
- Ensure touch targets are at least 44x44 pixels
- Implement proper safe area insets for modern mobile devices

### Performance
- Implement code splitting with React.lazy() and Suspense
- Use proper image optimization techniques
- Implement virtualization for long lists
- Enable Firebase offline persistence

### Accessibility
- Maintain WCAG 2.1 compliance
- Use semantic HTML elements
- Implement proper ARIA attributes
- Ensure proper color contrast ratios

### Firebase Security
- Implement proper security rules
- Use batch operations for related updates
- Implement proper error handling
- Enable offline persistence

### Animation Guidelines
- Use subtle animations for feedback
- Implement proper loading states
- Consider reduced motion preferences
- Use consistent transition timing

### Form Handling
- Implement proper validation
- Show clear error messages
- Use proper input types
- Implement proper keyboard handling

## Resources
- [Tailwind CSS Documentation](https://tailwindcss.com/docs)
- [React Documentation](https://reactjs.org/docs)
- [Firebase Documentation](https://firebase.google.com/docs)
- [WCAG Guidelines](https://www.w3.org/WAI/standards-guidelines/wcag/)

================
File: .cursor/rules/npm-package-check.mdc
================
---
description: Best practices for checking and installing NPM packages before use
globs: **/*.{js,jsx,ts,tsx}, **/package.json
---

# NPM Package Check

// Description: Best practices for checking and installing NPM packages before use
// Recommended Globs: **/*.{js,jsx,ts,tsx}, **/package.json

## Overview
Ensure all required NPM packages are properly installed before use to prevent runtime errors.

## Package Check Process
1. Before requiring any npm package, check package.json dependencies
2. If package exists in dependencies:
   - Output: "✓ {package_name} is already installed"
3. If package NOT found:
   - Output terminal command: `npm install {package_name}`

## Example Implementation
```javascript
const fs = require('fs');
const path = require('path');

function checkPackage(packageName) {
  try {
    const packageJson = JSON.parse(
      fs.readFileSync(path.join(process.cwd(), 'package.json'), 'utf8')
    );

    const deps = {
      ...packageJson.dependencies,
      ...packageJson.devDependencies
    };

    if (deps[packageName]) {
      console.log(`✓ ${packageName} is already installed`);
      return true;
    } else {
      console.log(`Installing ${packageName}...`);
      console.log(`Run: npm install ${packageName}`);
      return false;
    }
  } catch (error) {
    console.error('Error reading package.json:', error);
    return false;
  }
}
```

## Usage Example
```javascript
// Before importing a package
if (checkPackage('express')) {
  const express = require('express');
  // Use express...
} else {
  console.error('Please install express first');
  process.exit(1);
}
```

## Best Practices
- Always check packages before requiring them
- Handle missing package.json gracefully
- Consider both dependencies and devDependencies
- Provide clear installation instructions
- Exit gracefully if required packages are missing

## Common Patterns
- Pre-startup dependency check
- Dynamic package loading
- Development tooling setup
- Build process validation

================
File: .cursor/rules/process-task-list.mdc
================
---
description: Guidelines for managing task lists in markdown files to track progress on completing a PRD
globs: **/tasks/**/*.md, **/tasks-*.md
---

# Task List Management

// Description: Guidelines for managing task lists in markdown files to track progress on completing a PRD
// Recommended Globs: **/tasks/**/*.md, **/tasks-*.md

Guidelines for managing task lists in markdown files to track progress on completing a PRD

## Task Implementation
- **One sub-task at a time:** Do **NOT** start the next sub‑task until you ask the user for permission and they say "yes" or "y"
- **Completion protocol:**
  1. When you finish a **sub‑task**, immediately mark it as completed by changing `[ ]` to `[x]`.
  2. If **all** subtasks underneath a parent task are now `[x]`, also mark the **parent task** as completed.
- Stop after each sub‑task and wait for the user's go‑ahead.

## Task List Maintenance

1. **Update the task list as you work:**
   - Mark tasks and subtasks as completed (`[x]`) per the protocol above.
   - Add new tasks as they emerge.

2. **Maintain the "Relevant Files" section:**
   - List every file created or modified.
   - Give each file a one‑line description of its purpose.

## AI Instructions

When working with task lists, the AI must:

1. Regularly update the task list file after finishing any significant work.
2. Follow the completion protocol:
   - Mark each finished **sub‑task** `[x]`.
   - Mark the **parent task** `[x]` once **all** its subtasks are `[x]`.
3. Add newly discovered tasks.
4. Keep "Relevant Files" accurate and up to date.
5. Before starting work, check which sub‑task is next.
6. After implementing a sub‑task, update the file and then pause for user approval.

================
File: .cursor/rules/react-native-expo.mdc
================
---
description: Best practices for React Native development using Expo SDK and TypeScript
globs: **/*.{ts,tsx}, **/app.json, **/app.config.{js,ts}, **/assets/**/*
---

# React Native Expo

// Description: Best practices for React Native development using Expo SDK and TypeScript
// Recommended Globs: **/*.{ts,tsx}, **/app.json, **/app.config.{js,ts}, **/assets/**/*

## Project Structure
```
project_name/
├── assets/
│   ├── fonts/
│   └── images/
├── src/
│   ├── components/
│   │   ├── common/
│   │   └── screens/
│   ├── screens/
│   │   ├── auth/
│   │   └── main/
│   ├── navigation/
│   │   ├── types.ts
│   │   └── AppNavigator.tsx
│   ├── hooks/
│   │   ├── useAuth.ts
│   │   └── useTheme.ts
│   └── utils/
│       ├── api.ts
│       └── storage.ts
├── App.tsx
├── app.json
├── app.config.ts
└── tsconfig.json
```

## Component Structure
```typescript
import { StyleSheet } from 'react-native';
import { useTheme } from '@hooks/useTheme';

interface CardProps {
  title: string;
  description?: string;
  onPress?: () => void;
}

export const Card: React.FC<CardProps> = ({
  title,
  description,
  onPress
}) => {
  const { colors } = useTheme();

  return (
    <Pressable
      style={[styles.container, { backgroundColor: colors.card }]}
      onPress={onPress}
    >
      <Text style={[styles.title, { color: colors.text }]}>
        {title}
      </Text>
      {description && (
        <Text style={[styles.description, { color: colors.text }]}>
          {description}
        </Text>
      )}
    </Pressable>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: 16,
    borderRadius: 8,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
  },
  description: {
    marginTop: 8,
    fontSize: 14,
  },
});
```

## Navigation Setup
```typescript
// src/navigation/types.ts
export type RootStackParamList = {
  Home: undefined;
  Profile: { userId: string };
  Settings: undefined;
};

// src/navigation/AppNavigator.tsx
import { NavigationContainer } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';

const Stack = createNativeStackNavigator<RootStackParamList>();

export const AppNavigator = () => {
  return (
    <NavigationContainer>
      <Stack.Navigator>
        <Stack.Screen name="Home" component={HomeScreen} />
        <Stack.Screen name="Profile" component={ProfileScreen} />
        <Stack.Screen name="Settings" component={SettingsScreen} />
      </Stack.Navigator>
    </NavigationContainer>
  );
};
```

## Custom Hooks
```typescript
// src/hooks/useAuth.ts
import { useSecureStore } from './useSecureStore';

interface AuthState {
  token: string | null;
  user: User | null;
}

export const useAuth = () => {
  const [state, setState] = useState<AuthState>({
    token: null,
    user: null,
  });

  const { getItem, setItem } = useSecureStore();

  const login = async (credentials: Credentials) => {
    try {
      const response = await api.auth.login(credentials);
      await setItem('token', response.token);
      setState({ token: response.token, user: response.user });
    } catch (error) {
      throw new Error('Login failed');
    }
  };

  return { ...state, login };
};
```

## Asset Management
```typescript
// app.config.ts
import { ExpoConfig } from '@expo/config';

const config: ExpoConfig = {
  name: 'MyApp',
  version: '1.0.0',
  extra: {
    apiUrl: process.env.API_URL,
  },
  splash: {
    image: './assets/splash.png',
    resizeMode: 'contain',
    backgroundColor: '#ffffff',
  },
  updates: {
    fallbackToCacheTimeout: 0,
    url: 'https://u.expo.dev/your-project-id',
  },
  assetBundlePatterns: [
    'assets/images/*',
    'assets/fonts/*',
  ],
};

export default config;
```

## Error Handling
```typescript
// src/utils/error-boundary.tsx
import * as Sentry from 'sentry-expo';

interface ErrorBoundaryProps {
  children: React.ReactNode;
  fallback: React.ReactNode;
}

export class ErrorBoundary extends React.Component<
  ErrorBoundaryProps,
  { hasError: boolean }
> {
  constructor(props: ErrorBoundaryProps) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError() {
    return { hasError: true };
  }

  componentDidCatch(error: Error, info: React.ErrorInfo) {
    Sentry.Native.captureException(error);
  }

  render() {
    if (this.state.hasError) {
      return this.props.fallback;
    }

    return this.props.children;
  }
}
```

## Push Notifications
```typescript
// src/utils/notifications.ts
import * as Notifications from 'expo-notifications';

export const registerForPushNotifications = async () => {
  const { status } = await Notifications.requestPermissionsAsync();
  if (status !== 'granted') {
    return;
  }

  const token = await Notifications.getExpoPushTokenAsync({
    projectId: 'your-project-id',
  });

  return token;
};

export const configurePushNotifications = () => {
  Notifications.setNotificationHandler({
    handleNotification: async () => ({
      shouldShowAlert: true,
      shouldPlaySound: true,
      shouldSetBadge: true,
    }),
  });
};
```

## Best Practices

### Component Design
- Use functional components with hooks
- Keep components small and focused
- Implement proper prop types with TypeScript
- Use memo for performance optimization

### State Management
- Use Context for global state
- Implement proper data fetching patterns
- Handle loading and error states
- Use proper form state management

### Performance
- Implement proper list rendering
- Use proper image optimization
- Implement proper memory management
- Handle offline support

### Security
- Use Expo's secure store for sensitive data
- Implement proper authentication flow
- Handle proper data encryption
- Implement proper session management

## Resources
- [Expo Documentation](https://docs.expo.dev)
- [React Navigation](https://reactnavigation.org)
- [Expo Vector Icons](https://icons.expo.fyi)
- [Sentry Expo](https://docs.expo.dev/guides/using-sentry)

================
File: .cursor/rules/terminal-path-verification.mdc
================
---
description: Best practices for verifying paths and locations before executing terminal commands
globs: **/*.{js,jsx,ts,tsx}, **/*.sh
---

# Terminal Path Verification

// Description: Best practices for verifying paths and locations before executing terminal commands
// Recommended Globs: **/*.{js,jsx,ts,tsx}, **/*.sh

## Overview
Always verify current directory and path structure before executing path-related commands to prevent errors and unintended operations.

## Core Rules
1. Before any `cd` command:
   - Use `pwd` to verify current location
   - Use `ls` to verify target directory exists
2. Before file operations:
   - Use `ls` to verify file existence
   - Use `ls -la` for detailed file information when needed

## Examples

### ✅ Good Practice
```bash
# Before changing directory
pwd  # Check current location
ls   # Verify directory structure
cd target_directory

# Before file operations
ls -la file_to_modify.txt  # Verify file exists and check permissions
vim file_to_modify.txt
```

### ❌ Bad Practice
```bash
# Directly changing directory without verification
cd some_directory  # Might not exist!

# File operations without verification
rm file.txt  # Dangerous without verification!
```

## Implementation in Cursor
```typescript
async function executeTerminalCommand(command: string) {
  // Always verify location before path-related commands
  if (command.startsWith('cd ')) {
    await verifyPath(command.split(' ')[1]);
  }

  // Always verify file existence before file operations
  if (isFileOperation(command)) {
    await verifyFileExistence(command);
  }
}

async function verifyPath(targetPath: string) {
  // Check current location
  console.log('Current location:');
  await runCommand('pwd');

  // List directory contents
  console.log('\nDirectory contents:');
  await runCommand('ls');

  // Verify target exists
  if (!(await pathExists(targetPath))) {
    throw new Error(`Target path does not exist: ${targetPath}`);
  }
}
```

## Best Practices
- Always use `pwd` before changing directories
- Use `ls` to verify directory contents
- Use `ls -la` when file permissions are important
- Implement path verification in automated scripts
- Add error handling for non-existent paths

## Common Patterns
1. Directory Navigation:
   ```bash
   pwd  # Verify current location
   ls   # Check directory structure
   cd ./project/src
   ```

2. File Operations:
   ```bash
   ls -la target_file.txt  # Verify file and permissions
   chmod +x target_file.txt
   ```

3. Project Root Verification:
   ```bash
   pwd  # Ensure we're in project root
   ls package.json  # Verify project file exists
   npm install
   ```

## Error Prevention
- Always verify paths before destructive operations
- Use absolute paths when location is uncertain
- Implement safeguards in automated scripts
- Add validation for user-provided paths

## Testing
- Test path verification in different environments
- Verify behavior with non-existent paths
- Test with various file permissions
- Validate error handling

## Resources
- [Bash Documentation](https://www.gnu.org/software/bash/manual/)
- [Linux File System Hierarchy](https://refspecs.linuxfoundation.org/FHS_3.0/fhs/index.html)
- [File System Navigation Best Practices](https://tldp.org/LDP/abs/html/)

================
File: .cursor/rules/ui-design-guide.mdc
================
---
description: 
globs: 
alwaysApply: false
---
Follow the guidance outlined in [UIDesign.md](mdc:_docs/UIDesign.md) for direction on what UI experience to create.

================
File: .cursor/rules/yoda-quotes.mdc
================
---
description: End each Cursor chat with a wise, Yoda-style inspirational quote
globs: **/*.{md,txt}
---

# Yoda-Style Quote Endings

// Description: End each Cursor chat with a wise, Yoda-style inspirational quote
// Recommended Globs: **/*.{md,txt}

## Rule Description
At the end of every Cursor AI chat, include a wise and inspirational quote in Yoda's style.

## Format
- Add a line break after the last technical response
- Start with '---'
- Add '➡️ ' before the quote
- Add the quote in Yoda's distinctive speech pattern
- Keep it short and meaningful

## Examples
```
---
➡️ Code well you must, for in the details, greatness lies.
```

```
---
➡️ Debug or debug not. There is no try-catch.
```

## Guidelines
- Keep quotes programming or learning related
- Maintain Yoda's distinctive inverted speech pattern
- Focus on wisdom and encouragement
- Keep it light and fun
- Always include the '➡️ ' emoji prefix

## Purpose
- Add personality to coding sessions
- Provide encouragement during challenging tasks
- Make debugging more enjoyable
- Test rule installation functionality

================
File: app/+not-found.tsx
================
import { Link, Stack } from 'expo-router';
import { StyleSheet } from 'react-native';

import { ThemedText } from '@/components/ThemedText';
import { ThemedView } from '@/components/ThemedView';

export default function NotFoundScreen() {
  return (
    <>
      <Stack.Screen options={{ title: 'Oops!' }} />
      <ThemedView style={styles.container}>
        <ThemedText type="title">This screen does not exist.</ThemedText>
        <Link href="/" style={styles.link}>
          <ThemedText type="link">Go to home screen!</ThemedText>
        </Link>
      </ThemedView>
    </>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  link: {
    marginTop: 15,
    paddingVertical: 15,
  },
});

================
File: app/index.tsx
================
/**
 * App Index - Initial Route Handler
 * 
 * This component handles the initial routing logic:
 * - Redirects unauthenticated users to the auth flow
 * - Redirects authenticated users to the main app tabs
 * - Shows loading while determining auth state
 */

import { useColorScheme } from '@/hooks/useColorScheme';
import { useAuthStore } from '@/store/authStore';
import { router } from 'expo-router';
import { useEffect } from 'react';
import { ActivityIndicator, View } from 'react-native';

export default function IndexScreen() {
  const { user, isInitialized, isLoading } = useAuthStore();
  const colorScheme = useColorScheme();

  console.log('🏠 Index Screen - Checking auth state');
  console.log('👤 User:', user ? 'Authenticated' : 'Not authenticated');
  console.log('⚙️ Auth state:', { isInitialized, isLoading });

  useEffect(() => {
    if (!isInitialized) {
      console.log('⏳ Index Screen - Auth not initialized yet, waiting...');
      return;
    }

    if (user) {
      console.log('✅ Index Screen - User authenticated, redirecting to tabs');
      router.replace('/(tabs)');
    } else {
      console.log('🔒 Index Screen - User not authenticated, redirecting to auth');
      router.replace('/(auth)/login');
    }
  }, [user, isInitialized]);

  // Show loading screen while determining auth state
  console.log('⏳ Index Screen - Showing loading screen');
  return (
    <View style={{
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: colorScheme === 'dark' ? '#151718' : '#fff'
    }}>
      <ActivityIndicator 
        size="large" 
        color={colorScheme === 'dark' ? '#fff' : '#0a7ea4'} 
      />
    </View>
  );
}

================
File: components/feed/ClassWelcomeScreen.tsx
================
/**
 * Class Welcome Screen Component - Task 3.7
 * 
 * This screen appears after a user successfully joins a class, providing:
 * - Welcome message with class details
 * - Overview of what they can do in the class
 * - Encouraging messaging to reduce anxiety
 * - Call-to-action to start sharing artwork
 * 
 * Implements glass morphism design system per UIDesign.md specifications.
 */

import { router } from 'expo-router';
import React from 'react';
import {
    SafeAreaView,
    ScrollView,
    StyleSheet,
    TouchableOpacity,
    View
} from 'react-native';

import { Colors } from '../../constants/Colors';
import { useColorScheme } from '../../hooks/useColorScheme';
import type { Class, ClassMember } from '../../lib/supabase';
import { ThemedText } from '../ThemedText';
import GlassMorphismCard from '../ui/GlassMorphismCard';

interface ClassWelcomeScreenProps {
  classData: Class & { membership: ClassMember };
  onGetStarted: () => void;
}

export default function ClassWelcomeScreen({ classData, onGetStarted }: ClassWelcomeScreenProps) {
  console.log('🎉 Class Welcome Screen - Rendering welcome for class:', classData.name);

  const colorScheme = useColorScheme();
  const colors = Colors[colorScheme ?? 'light'];

  /**
   * Handle navigation to camera
   */
  const handleShareFirst = () => {
    console.log('📸 Class Welcome Screen - Navigating to camera for first share');
    router.push('/(tabs)/camera');
    onGetStarted();
  };

  /**
   * Handle continue to feed
   */
  const handleViewFeed = () => {
    console.log('👀 Class Welcome Screen - Continuing to class feed');
    onGetStarted();
  };

  return (
    <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>
      <ScrollView 
        style={styles.scrollView}
        contentContainerStyle={styles.scrollContent}
        showsVerticalScrollIndicator={false}
      >
        {/* Welcome Header */}
        <GlassMorphismCard type="primary" style={styles.welcomeCard}>
          <View style={styles.welcomeHeader}>
            <ThemedText type="title" style={[styles.welcomeEmoji, { color: colors.accent }]}>
              🎉
            </ThemedText>
            <ThemedText type="screenTitle" style={[styles.welcomeTitle, { color: colors.text }]}>
              Welcome to the Class!
            </ThemedText>
            <ThemedText type="bodyText" style={[styles.classNameText, { color: colors.accent }]}>
              {classData.name}
            </ThemedText>
          </View>

          <View style={styles.welcomeContent}>
            <ThemedText type="bodyText" style={[styles.welcomeDescription, { color: colors.textSecondary }]}>
              You've successfully joined your class! This is a supportive, anxiety-free environment 
              where you can share your artwork with classmates and receive encouraging feedback.
            </ThemedText>
          </View>
        </GlassMorphismCard>

        {/* What You Can Do */}
        <GlassMorphismCard type="secondary" style={styles.featuresCard}>
          <ThemedText type="subheading" style={[styles.featuresTitle, { color: colors.text }]}>
            What You Can Do
          </ThemedText>
          
          <View style={styles.featuresList}>
            <View style={styles.featureItem}>
              <View style={[styles.featureIcon, { backgroundColor: colors.accentSage }]}>
                <ThemedText style={styles.featureIconText}>📸</ThemedText>
              </View>
              <View style={styles.featureContent}>
                <ThemedText type="username" style={[styles.featureTitle, { color: colors.text }]}>
                  Share Your Artwork
                </ThemedText>
                <ThemedText type="caption" style={[styles.featureDescription, { color: colors.textSecondary }]}>
                  Capture photos with optional frames and share them with your classmates
                </ThemedText>
              </View>
            </View>

            <View style={styles.featureItem}>
              <View style={[styles.featureIcon, { backgroundColor: colors.accentSage }]}>
                <ThemedText style={styles.featureIconText}>⏰</ThemedText>
              </View>
              <View style={styles.featureContent}>
                <ThemedText type="username" style={[styles.featureTitle, { color: colors.text }]}>
                  Set Your Own Timer
                </ThemedText>
                <ThemedText type="caption" style={[styles.featureDescription, { color: colors.textSecondary }]}>
                  Choose how long your posts stay visible (30 minutes to tomorrow)
                </ThemedText>
              </View>
            </View>

            <View style={styles.featureItem}>
              <View style={[styles.featureIcon, { backgroundColor: colors.accentSage }]}>
                <ThemedText style={styles.featureIconText}>💬</ThemedText>
              </View>
              <View style={styles.featureContent}>
                <ThemedText type="username" style={[styles.featureTitle, { color: colors.text }]}>
                  Receive Peer Support
                </ThemedText>
                <ThemedText type="caption" style={[styles.featureDescription, { color: colors.textSecondary }]}>
                  Get encouraging comments and feedback from your classmates
                </ThemedText>
              </View>
            </View>

            <View style={styles.featureItem}>
              <View style={[styles.featureIcon, { backgroundColor: colors.accentTan }]}>
                <ThemedText style={styles.featureIconText}>🤖</ThemedText>
              </View>
              <View style={styles.featureContent}>
                <ThemedText type="username" style={[styles.featureTitle, { color: colors.text }]}>
                  AI Feedback Available
                </ThemedText>
                <ThemedText type="caption" style={[styles.featureDescription, { color: colors.textSecondary }]}>
                  Request AI analysis and constructive feedback on your own posts
                </ThemedText>
              </View>
            </View>
          </View>
        </GlassMorphismCard>

        {/* Encouraging Message */}
        <GlassMorphismCard type="secondary" style={styles.encouragementCard}>
          <ThemedText type="subheading" style={[styles.encouragementTitle, { color: colors.text }]}>
            Remember
          </ThemedText>
          <ThemedText type="bodyText" style={[styles.encouragementText, { color: colors.textSecondary }]}>
            This is a judgment-free space designed to build confidence. Your posts automatically 
            disappear, so there's no pressure for perfection. Focus on experimentation, 
            learning, and creative growth.
          </ThemedText>
        </GlassMorphismCard>

        {/* Class Information */}
        <GlassMorphismCard type="secondary" style={styles.classInfoCard}>
          <ThemedText type="subheading" style={[styles.classInfoTitle, { color: colors.text }]}>
            Class Information
          </ThemedText>
          
          <View style={styles.classInfoList}>
            <View style={styles.classInfoItem}>
              <ThemedText type="label" style={[styles.classInfoLabel, { color: colors.textSecondary }]}>
                Join Code:
              </ThemedText>
              <ThemedText type="bodyText" style={[styles.classInfoValue, { color: colors.text, fontFamily: 'Montserrat_600SemiBold' }]}>
                {classData.join_code}
              </ThemedText>
            </View>
            
            {classData.description && (
              <View style={styles.classInfoItem}>
                <ThemedText type="label" style={[styles.classInfoLabel, { color: colors.textSecondary }]}>
                  Description:
                </ThemedText>
                <ThemedText type="bodyText" style={[styles.classInfoValue, { color: colors.text }]}>
                  {classData.description}
                </ThemedText>
              </View>
            )}

            <View style={styles.classInfoItem}>
              <ThemedText type="label" style={[styles.classInfoLabel, { color: colors.textSecondary }]}>
                Your Role:
              </ThemedText>
              <ThemedText type="bodyText" style={[styles.classInfoValue, { color: colors.accent }]}>
                {classData.membership.role.charAt(0).toUpperCase() + classData.membership.role.slice(1)}
              </ThemedText>
            </View>
          </View>
        </GlassMorphismCard>
      </ScrollView>

      {/* Action Buttons */}
      <View style={[styles.actionSection, { backgroundColor: colors.background }]}>
        <TouchableOpacity
          style={[styles.primaryButton, { backgroundColor: colors.accentSage }]}
          onPress={handleShareFirst}
          activeOpacity={0.8}
        >
          <ThemedText type="button" style={styles.primaryButtonText}>
            📸 Share Your First Artwork
          </ThemedText>
        </TouchableOpacity>

        <TouchableOpacity
          style={[styles.secondaryButton, { borderColor: colors.border }]}
          onPress={handleViewFeed}
          activeOpacity={0.8}
        >
          <ThemedText type="button" style={[styles.secondaryButtonText, { color: colors.textSecondary }]}>
            Explore the Class Feed
          </ThemedText>
        </TouchableOpacity>
      </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    paddingHorizontal: 24,
    paddingTop: 32,
    paddingBottom: 24,
    gap: 24,
  },

  // Welcome Card
  welcomeCard: {
    padding: 32,
    alignItems: 'center',
  },
  welcomeHeader: {
    alignItems: 'center',
    gap: 12,
    marginBottom: 20,
  },
  welcomeEmoji: {
    fontSize: 48,
    marginBottom: 8,
  },
  welcomeTitle: {
    textAlign: 'center',
  },
  classNameText: {
    textAlign: 'center',
    fontWeight: '600',
  },
  welcomeContent: {
    alignItems: 'center',
  },
  welcomeDescription: {
    textAlign: 'center',
    lineHeight: 24,
  },

  // Features Card
  featuresCard: {
    padding: 24,
  },
  featuresTitle: {
    marginBottom: 20,
  },
  featuresList: {
    gap: 20,
  },
  featureItem: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    gap: 16,
  },
  featureIcon: {
    width: 44,
    height: 44,
    borderRadius: 22,
    justifyContent: 'center',
    alignItems: 'center',
  },
  featureIconText: {
    fontSize: 20,
  },
  featureContent: {
    flex: 1,
    gap: 4,
  },
  featureTitle: {
    fontWeight: '600',
  },
  featureDescription: {
    lineHeight: 18,
  },

  // Encouragement Card
  encouragementCard: {
    padding: 24,
    alignItems: 'center',
  },
  encouragementTitle: {
    marginBottom: 12,
    textAlign: 'center',
  },
  encouragementText: {
    textAlign: 'center',
    lineHeight: 24,
  },

  // Class Info Card
  classInfoCard: {
    padding: 24,
  },
  classInfoTitle: {
    marginBottom: 16,
  },
  classInfoList: {
    gap: 16,
  },
  classInfoItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    gap: 16,
  },
  classInfoLabel: {
    minWidth: 80,
  },
  classInfoValue: {
    flex: 1,
    textAlign: 'right',
  },

  // Action Section
  actionSection: {
    paddingHorizontal: 24,
    paddingVertical: 24,
    borderTopWidth: 1,
    borderTopColor: 'rgba(229, 229, 229, 0.5)',
    gap: 12,
  },
  primaryButton: {
    height: 56,
    borderRadius: 28,
    justifyContent: 'center',
    alignItems: 'center',
  },
  primaryButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  secondaryButton: {
    height: 48,
    borderRadius: 24,
    borderWidth: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  secondaryButtonText: {
    fontSize: 14,
    fontWeight: '500',
  },
});

================
File: components/ui/GlassMorphismCard.tsx
================
/**
 * Glass Morphism Card Component
 * 
 * Implements the glass morphism card specifications from UIDesign.md:
 * - Primary Glass Cards: rgba(255,255,255,0.15) with 12px blur, 20px border radius
 * - Secondary Glass Cards: rgba(255,255,255,0.1) with 8px blur, 16px border radius
 * - Interactive states: hover, active, focus with opacity and scale changes
 * - Platform-specific blur implementations (iOS BlurView, Android shadow approximations)
 */

import { BlurView } from 'expo-blur';
import React from 'react';
import {
    Platform,
    StyleSheet,
    View,
    ViewProps,
} from 'react-native';
import { Colors } from '../../constants/Colors';
import { useColorScheme } from '../../hooks/useColorScheme';

export type GlassMorphismCardType = 'primary' | 'secondary';

export interface GlassMorphismCardProps extends ViewProps {
  type?: GlassMorphismCardType;
  intensity?: number;           // Blur intensity override
  borderRadius?: number;        // Border radius override
  children?: React.ReactNode;
}

export default function GlassMorphismCard({
  type = 'primary',
  intensity,
  borderRadius,
  style,
  children,
  ...props
}: GlassMorphismCardProps) {
  console.log(`🌟 GlassMorphismCard - Rendering ${type} glass card`);

  const colorScheme = useColorScheme();
  const colors = Colors[colorScheme ?? 'light'];

  // Get specifications based on card type (Per UIDesign.md)
  const getCardSpecs = () => {
    switch (type) {
      case 'primary':
        return {
          backgroundColor: colors.glassPrimary,      // rgba(255,255,255,0.15)
          borderColor: colors.glassBorderPrimary,    // rgba(255,255,255,0.2)
          borderRadius: borderRadius ?? 20,          // 20px per UIDesign.md
          blur: intensity ?? 12,                     // 12px blur per UIDesign.md
          shadow: {
            shadowColor: '#000',
            shadowOffset: { width: 0, height: 4 },
            shadowOpacity: 0.08,
            shadowRadius: 20,
            elevation: 8,                            // Android elevation
          },
        };
      case 'secondary':
        return {
          backgroundColor: colors.glassSecondary,    // rgba(255,255,255,0.1) 
          borderColor: colors.glassBorderSecondary,  // rgba(255,255,255,0.15)
          borderRadius: borderRadius ?? 16,          // 16px per UIDesign.md
          blur: intensity ?? 8,                      // 8px blur per UIDesign.md
          shadow: {
            shadowColor: '#000',
            shadowOffset: { width: 0, height: 2 },
            shadowOpacity: 0.05,
            shadowRadius: 12,
            elevation: 4,                            // Android elevation
          },
        };
    }
  };

  const specs = getCardSpecs();

  // iOS Implementation - Uses native BlurView
  const renderIOSCard = () => (
    <BlurView
      intensity={specs.blur * 8.33}  // Convert px to BlurView intensity (12px ≈ 100 intensity)
      tint="light"
      style={[
        styles.card,
        {
          borderRadius: specs.borderRadius,
          borderWidth: 1,
          borderColor: specs.borderColor,
          backgroundColor: 'transparent', // BlurView handles background
          ...specs.shadow,
        },
        style,
      ]}
      {...props}
    >
      {children}
    </BlurView>
  );

  // Android Implementation - Uses background color with shadow approximation
  const renderAndroidCard = () => (
    <View
      style={[
        styles.card,
        {
          backgroundColor: specs.backgroundColor,
          borderRadius: specs.borderRadius,
          borderWidth: 1,
          borderColor: specs.borderColor,
          ...specs.shadow,
        },
        style,
      ]}
      {...props}
    >
      {children}
    </View>
  );

  // Platform-specific rendering
  return Platform.OS === 'ios' ? renderIOSCard() : renderAndroidCard();
}

const styles = StyleSheet.create({
  card: {
    // Base card styles - platform-specific styles applied above
    overflow: 'hidden',         // Ensure content respects border radius
  },
});

================
File: components/ui/IconSymbol.ios.tsx
================
import { SymbolView, SymbolViewProps, SymbolWeight } from 'expo-symbols';
import { StyleProp, ViewStyle } from 'react-native';

export function IconSymbol({
  name,
  size = 24,
  color,
  style,
  weight = 'regular',
}: {
  name: SymbolViewProps['name'];
  size?: number;
  color: string;
  style?: StyleProp<ViewStyle>;
  weight?: SymbolWeight;
}) {
  return (
    <SymbolView
      weight={weight}
      tintColor={color}
      resizeMode="scaleAspectFit"
      name={name}
      style={[
        {
          width: size,
          height: size,
        },
        style,
      ]}
    />
  );
}

================
File: components/ui/TabBarBackground.ios.tsx
================
import { useBottomTabBarHeight } from '@react-navigation/bottom-tabs';
import { BlurView } from 'expo-blur';
import { StyleSheet } from 'react-native';

export default function BlurTabBarBackground() {
  return (
    <BlurView
      // System chrome material automatically adapts to the system's theme
      // and matches the native tab bar appearance on iOS.
      tint="systemChromeMaterial"
      intensity={100}
      style={StyleSheet.absoluteFill}
    />
  );
}

export function useBottomTabOverflow() {
  return useBottomTabBarHeight();
}

================
File: components/ui/TabBarBackground.tsx
================
// This is a shim for web and Android where the tab bar is generally opaque.
export default undefined;

export function useBottomTabOverflow() {
  return 0;
}

================
File: components/Collapsible.tsx
================
import { PropsWithChildren, useState } from 'react';
import { StyleSheet, TouchableOpacity } from 'react-native';

import { ThemedText } from '@/components/ThemedText';
import { ThemedView } from '@/components/ThemedView';
import { IconSymbol } from '@/components/ui/IconSymbol';
import { Colors } from '@/constants/Colors';
import { useColorScheme } from '@/hooks/useColorScheme';

export function Collapsible({ children, title }: PropsWithChildren & { title: string }) {
  const [isOpen, setIsOpen] = useState(false);
  const theme = useColorScheme() ?? 'light';

  return (
    <ThemedView>
      <TouchableOpacity
        style={styles.heading}
        onPress={() => setIsOpen((value) => !value)}
        activeOpacity={0.8}>
        <IconSymbol
          name="chevron.right"
          size={18}
          weight="medium"
          color={theme === 'light' ? Colors.light.icon : Colors.dark.icon}
          style={{ transform: [{ rotate: isOpen ? '90deg' : '0deg' }] }}
        />

        <ThemedText type="defaultSemiBold">{title}</ThemedText>
      </TouchableOpacity>
      {isOpen && <ThemedView style={styles.content}>{children}</ThemedView>}
    </ThemedView>
  );
}

const styles = StyleSheet.create({
  heading: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 6,
  },
  content: {
    marginTop: 6,
    marginLeft: 24,
  },
});

================
File: components/ExternalLink.tsx
================
import { Href, Link } from 'expo-router';
import { openBrowserAsync } from 'expo-web-browser';
import { type ComponentProps } from 'react';
import { Platform } from 'react-native';

type Props = Omit<ComponentProps<typeof Link>, 'href'> & { href: Href & string };

export function ExternalLink({ href, ...rest }: Props) {
  return (
    <Link
      target="_blank"
      {...rest}
      href={href}
      onPress={async (event) => {
        if (Platform.OS !== 'web') {
          // Prevent the default behavior of linking to the default browser on native.
          event.preventDefault();
          // Open the link in an in-app browser.
          await openBrowserAsync(href);
        }
      }}
    />
  );
}

================
File: components/HapticTab.tsx
================
import { BottomTabBarButtonProps } from '@react-navigation/bottom-tabs';
import { PlatformPressable } from '@react-navigation/elements';
import * as Haptics from 'expo-haptics';

export function HapticTab(props: BottomTabBarButtonProps) {
  return (
    <PlatformPressable
      {...props}
      onPressIn={(ev) => {
        if (process.env.EXPO_OS === 'ios') {
          // Add a soft haptic feedback when pressing down on the tabs.
          Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
        }
        props.onPressIn?.(ev);
      }}
    />
  );
}

================
File: components/HelloWave.tsx
================
import { useEffect } from 'react';
import { StyleSheet } from 'react-native';
import Animated, {
  useAnimatedStyle,
  useSharedValue,
  withRepeat,
  withSequence,
  withTiming,
} from 'react-native-reanimated';

import { ThemedText } from '@/components/ThemedText';

export function HelloWave() {
  const rotationAnimation = useSharedValue(0);

  useEffect(() => {
    rotationAnimation.value = withRepeat(
      withSequence(withTiming(25, { duration: 150 }), withTiming(0, { duration: 150 })),
      4 // Run the animation 4 times
    );
  }, [rotationAnimation]);

  const animatedStyle = useAnimatedStyle(() => ({
    transform: [{ rotate: `${rotationAnimation.value}deg` }],
  }));

  return (
    <Animated.View style={animatedStyle}>
      <ThemedText style={styles.text}>👋</ThemedText>
    </Animated.View>
  );
}

const styles = StyleSheet.create({
  text: {
    fontSize: 28,
    lineHeight: 32,
    marginTop: -6,
  },
});

================
File: components/ParallaxScrollView.tsx
================
import type { PropsWithChildren, ReactElement } from 'react';
import { StyleSheet } from 'react-native';
import Animated, {
  interpolate,
  useAnimatedRef,
  useAnimatedStyle,
  useScrollViewOffset,
} from 'react-native-reanimated';

import { ThemedView } from '@/components/ThemedView';
import { useBottomTabOverflow } from '@/components/ui/TabBarBackground';
import { useColorScheme } from '@/hooks/useColorScheme';

const HEADER_HEIGHT = 250;

type Props = PropsWithChildren<{
  headerImage: ReactElement;
  headerBackgroundColor: { dark: string; light: string };
}>;

export default function ParallaxScrollView({
  children,
  headerImage,
  headerBackgroundColor,
}: Props) {
  const colorScheme = useColorScheme() ?? 'light';
  const scrollRef = useAnimatedRef<Animated.ScrollView>();
  const scrollOffset = useScrollViewOffset(scrollRef);
  const bottom = useBottomTabOverflow();
  const headerAnimatedStyle = useAnimatedStyle(() => {
    return {
      transform: [
        {
          translateY: interpolate(
            scrollOffset.value,
            [-HEADER_HEIGHT, 0, HEADER_HEIGHT],
            [-HEADER_HEIGHT / 2, 0, HEADER_HEIGHT * 0.75]
          ),
        },
        {
          scale: interpolate(scrollOffset.value, [-HEADER_HEIGHT, 0, HEADER_HEIGHT], [2, 1, 1]),
        },
      ],
    };
  });

  return (
    <ThemedView style={styles.container}>
      <Animated.ScrollView
        ref={scrollRef}
        scrollEventThrottle={16}
        scrollIndicatorInsets={{ bottom }}
        contentContainerStyle={{ paddingBottom: bottom }}>
        <Animated.View
          style={[
            styles.header,
            { backgroundColor: headerBackgroundColor[colorScheme] },
            headerAnimatedStyle,
          ]}>
          {headerImage}
        </Animated.View>
        <ThemedView style={styles.content}>{children}</ThemedView>
      </Animated.ScrollView>
    </ThemedView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  header: {
    height: HEADER_HEIGHT,
    overflow: 'hidden',
  },
  content: {
    flex: 1,
    padding: 32,
    gap: 16,
    overflow: 'hidden',
  },
});

================
File: components/ThemedView.tsx
================
import { View, type ViewProps } from 'react-native';

import { useThemeColor } from '@/hooks/useThemeColor';

export type ThemedViewProps = ViewProps & {
  lightColor?: string;
  darkColor?: string;
};

export function ThemedView({ style, lightColor, darkColor, ...otherProps }: ThemedViewProps) {
  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');

  return <View style={[{ backgroundColor }, style]} {...otherProps} />;
}

================
File: hooks/useColorScheme.ts
================
export { useColorScheme } from 'react-native';

================
File: hooks/useColorScheme.web.ts
================
import { useEffect, useState } from 'react';
import { useColorScheme as useRNColorScheme } from 'react-native';

/**
 * To support static rendering, this value needs to be re-calculated on the client side for web
 */
export function useColorScheme() {
  const [hasHydrated, setHasHydrated] = useState(false);

  useEffect(() => {
    setHasHydrated(true);
  }, []);

  const colorScheme = useRNColorScheme();

  if (hasHydrated) {
    return colorScheme;
  }

  return 'light';
}

================
File: hooks/useThemeColor.ts
================
/**
 * Learn more about light and dark modes:
 * https://docs.expo.dev/guides/color-schemes/
 */

import { Colors } from '@/constants/Colors';
import { useColorScheme } from '@/hooks/useColorScheme';

export function useThemeColor(
  props: { light?: string; dark?: string },
  colorName: keyof typeof Colors.light & keyof typeof Colors.dark
) {
  const theme = useColorScheme() ?? 'light';
  const colorFromProps = props[theme];

  if (colorFromProps) {
    return colorFromProps;
  } else {
    return Colors[theme][colorName];
  }
}

================
File: lib/auth.ts
================
/**
 * Authentication Utilities
 * 
 * This module provides utility functions for authentication management including:
 * - Session validation and management
 * - User profile operations
 * - Email validation
 * - Password strength validation
 */

import type { UserProfile } from '../store/authStore';
import { supabase } from './supabase';

/**
 * Email validation regex pattern
 * Matches standard email format: user@domain.com
 */
const EMAIL_REGEX = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

/**
 * Password validation requirements
 * - Minimum 8 characters
 * - At least 1 uppercase letter
 * - At least 1 lowercase letter
 * - At least 1 number
 */
const PASSWORD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d@$!%*?&]{8,}$/;

/**
 * Validate email format
 */
export function validateEmail(email: string): boolean {
  console.log('📧 Auth Utils - Validating email format');
  return EMAIL_REGEX.test(email.trim());
}

/**
 * Validate password strength
 */
export function validatePassword(password: string): {
  isValid: boolean;
  errors: string[];
} {
  console.log('🔒 Auth Utils - Validating password strength');
  const errors: string[] = [];

  if (password.length < 8) {
    errors.push('Password must be at least 8 characters long');
  }

  if (!/[a-z]/.test(password)) {
    errors.push('Password must contain at least one lowercase letter');
  }

  if (!/[A-Z]/.test(password)) {
    errors.push('Password must contain at least one uppercase letter');
  }

  if (!/\d/.test(password)) {
    errors.push('Password must contain at least one number');
  }

  return {
    isValid: errors.length === 0,
    errors,
  };
}

/**
 * Validate username format
 * - 3-20 characters
 * - Alphanumeric and underscores only
 * - Cannot start or end with underscore
 */
export function validateUsername(username: string): {
  isValid: boolean;
  error?: string;
} {
  console.log('👤 Auth Utils - Validating username format');
  
  if (!username || username.length < 3) {
    return { isValid: false, error: 'Username must be at least 3 characters long' };
  }

  if (username.length > 20) {
    return { isValid: false, error: 'Username must be no more than 20 characters long' };
  }

  if (!/^[a-zA-Z0-9_]+$/.test(username)) {
    return { isValid: false, error: 'Username can only contain letters, numbers, and underscores' };
  }

  if (username.startsWith('_') || username.endsWith('_')) {
    return { isValid: false, error: 'Username cannot start or end with an underscore' };
  }

  return { isValid: true };
}

/**
 * Check if username is available
 */
export async function checkUsernameAvailability(username: string): Promise<{
  isAvailable: boolean;
  error?: string;
}> {
  console.log('🔍 Auth Utils - Checking username availability:', username);

  try {
    const { data, error } = await supabase
      .from('users')
      .select('username')
      .eq('username', username.toLowerCase())
      .maybeSingle();

    if (error) {
      console.error('❌ Auth Utils - Username check error:', error);
      return { isAvailable: false, error: 'Failed to check username availability' };
    }

    const isAvailable = !data;
    console.log('✅ Auth Utils - Username availability:', isAvailable ? 'Available' : 'Taken');
    
    return { isAvailable };
  } catch (error) {
    console.error('❌ Auth Utils - Username check unexpected error:', error);
    return { isAvailable: false, error: 'Failed to check username availability' };
  }
}

/**
 * Get current user session
 */
export async function getCurrentSession() {
  console.log('📱 Auth Utils - Getting current session');
  
  try {
    const { data: { session }, error } = await supabase.auth.getSession();
    
    if (error) {
      console.error('❌ Auth Utils - Session fetch error:', error);
      return { session: null, error: error.message };
    }

    console.log('✅ Auth Utils - Session retrieved:', session ? 'Found' : 'None');
    return { session, error: null };
  } catch (error) {
    console.error('❌ Auth Utils - Session fetch unexpected error:', error);
    return { 
      session: null, 
      error: error instanceof Error ? error.message : 'Failed to get session' 
    };
  }
}

/**
 * Get user profile by ID
 */
export async function getUserProfile(userId: string): Promise<{
  profile: UserProfile | null;
  error?: string;
}> {
  console.log('👤 Auth Utils - Getting user profile:', userId);

  try {
    const { data, error } = await supabase
      .from('users')
      .select('*')
      .eq('id', userId)
      .single();

    if (error) {
      console.error('❌ Auth Utils - Profile fetch error:', error);
      return { profile: null, error: error.message };
    }

    console.log('✅ Auth Utils - Profile retrieved successfully');
    return { profile: data };
  } catch (error) {
    console.error('❌ Auth Utils - Profile fetch unexpected error:', error);
    return { 
      profile: null, 
      error: error instanceof Error ? error.message : 'Failed to get profile' 
    };
  }
}

/**
 * Update user profile
 */
export async function updateUserProfile(
  userId: string, 
  updates: Partial<Pick<UserProfile, 'username' | 'avatar_url'>>
): Promise<{
  profile: UserProfile | null;
  error?: string;
}> {
  console.log('📝 Auth Utils - Updating user profile:', userId, updates);

  try {
    const { data, error } = await supabase
      .from('users')
      .update(updates)
      .eq('id', userId)
      .select()
      .single();

    if (error) {
      console.error('❌ Auth Utils - Profile update error:', error);
      return { profile: null, error: error.message };
    }

    console.log('✅ Auth Utils - Profile updated successfully');
    return { profile: data };
  } catch (error) {
    console.error('❌ Auth Utils - Profile update unexpected error:', error);
    return { 
      profile: null, 
      error: error instanceof Error ? error.message : 'Failed to update profile' 
    };
  }
}

/**
 * Check if user is authenticated
 */
export async function isAuthenticated(): Promise<boolean> {
  const { session } = await getCurrentSession();
  return !!session?.user;
}

/**
 * Get user ID from current session
 */
export async function getCurrentUserId(): Promise<string | null> {
  const { session } = await getCurrentSession();
  return session?.user?.id || null;
}

/**
 * Format authentication error messages for user display
 */
export function formatAuthError(error: string): string {
  console.log('⚠️ Auth Utils - Formatting auth error:', error);

  // Common Supabase auth error mappings
  const errorMappings: Record<string, string> = {
    'Invalid login credentials': 'Invalid email or password. Please check your credentials and try again.',
    'User not found': 'No account found with this email address. Please sign up first.',
    'Email not confirmed': 'Please check your email and click the confirmation link before signing in.',
    'Signup not allowed': 'Account registration is currently disabled. Please contact support.',
    'Password should be at least 6 characters': 'Password must be at least 6 characters long.',
    'User already registered': 'An account with this email already exists. Please sign in instead.',
    'Invalid email': 'Please enter a valid email address.',
    'Too many requests': 'Too many login attempts. Please wait a moment and try again.',
  };

  return errorMappings[error] || error;
}

/**
 * Generate a secure random password
 */
export function generateSecurePassword(length: number = 12): string {
  const charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@$!%*?&';
  let password = '';
  
  // Ensure at least one character from each required category
  password += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'[Math.floor(Math.random() * 26)]; // Uppercase
  password += 'abcdefghijklmnopqrstuvwxyz'[Math.floor(Math.random() * 26)]; // Lowercase
  password += '0123456789'[Math.floor(Math.random() * 10)]; // Number
  password += '@$!%*?&'[Math.floor(Math.random() * 7)]; // Special character
  
  // Fill remaining length with random characters
  for (let i = 4; i < length; i++) {
    password += charset[Math.floor(Math.random() * charset.length)];
  }
  
  // Shuffle the password to randomize character positions
  return password.split('').sort(() => Math.random() - 0.5).join('');
}

================
File: lib/photoService.ts
================
/**
 * Photo Service
 * 
 * This service handles all photo-related operations including:
 * - Uploading images to Supabase Storage
 * - Saving photo metadata to the database
 * - Retrieving photos and generating public URLs
 */

import { decode } from 'base64-arraybuffer';
import * as FileSystem from 'expo-file-system';
import { Photo, supabase } from './supabase';

/**
 * Upload result interface
 */
export interface PhotoUploadResult {
  success: boolean;
  photo?: Photo;
  error?: string;
  publicUrl?: string;
}

/**
 * Photo upload options
 */
export interface PhotoUploadOptions {
  userId?: string;
  quality?: number;
  generateThumbnail?: boolean;
}

/**
 * Generate a unique filename for the photo
 */
function generateUniqueFileName(originalName?: string): string {
  const timestamp = Date.now();
  const randomStr = Math.random().toString(36).substring(2, 15);
  const extension = originalName?.split('.').pop() || 'jpg';
  
  return `photo_${timestamp}_${randomStr}.${extension}`;
}

/**
 * Get file size from URI
 */
async function getFileSize(uri: string): Promise<number> {
  try {
    console.log('📏 Photo Service - Getting file size for:', uri);
    const fileInfo = await FileSystem.getInfoAsync(uri);
    
    if (fileInfo.exists && 'size' in fileInfo) {
      console.log('✅ Photo Service - File size:', fileInfo.size, 'bytes');
      return fileInfo.size;
    }
    
    console.log('⚠️ Photo Service - Could not determine file size, defaulting to 0');
    return 0;
  } catch (error) {
    console.error('❌ Photo Service - Error getting file size:', error);
    return 0;
  }
}

/**
 * Determine MIME type from file extension
 */
function getMimeType(fileName: string): string {
  const extension = fileName.split('.').pop()?.toLowerCase();
  
  const mimeTypes: { [key: string]: string } = {
    'jpg': 'image/jpeg',
    'jpeg': 'image/jpeg',
    'png': 'image/png',
    'webp': 'image/webp',
    'heic': 'image/heic',
    'heif': 'image/heif',
  };
  
  return mimeTypes[extension || 'jpg'] || 'image/jpeg';
}

/**
 * Upload photo to Supabase Storage and save metadata to database
 */
export async function uploadPhoto(
  photoUri: string,
  options: PhotoUploadOptions = {}
): Promise<PhotoUploadResult> {
  console.log('📤 Photo Service - Starting photo upload process');
  console.log('📍 Photo URI:', photoUri);
  console.log('⚙️ Upload options:', options);

  try {
    // Generate unique filename
    const fileName = generateUniqueFileName();
    const filePath = `uploads/${fileName}`;
    
    console.log('📝 Photo Service - Generated filename:', fileName);
    console.log('📂 Photo Service - File path:', filePath);

    // Get file info
    const fileSize = await getFileSize(photoUri);
    const mimeType = getMimeType(fileName);
    
    console.log('📊 Photo Service - File details:');
    console.log('  - Size:', fileSize, 'bytes');
    console.log('  - MIME type:', mimeType);

    // Read file as base64
    console.log('📖 Photo Service - Reading file as base64');
    const base64Response = await FileSystem.readAsStringAsync(photoUri, {
      encoding: FileSystem.EncodingType.Base64,
    });

    // Convert base64 to ArrayBuffer
    console.log('🔄 Photo Service - Converting base64 to ArrayBuffer');
    const arrayBuffer = decode(base64Response);

    // Upload to Supabase Storage
    console.log('☁️ Photo Service - Uploading to Supabase Storage');
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('photos')
      .upload(filePath, arrayBuffer, {
        contentType: mimeType,
        cacheControl: '3600', // Cache for 1 hour
        upsert: false, // Don't overwrite existing files
      });

    if (uploadError) {
      console.error('❌ Photo Service - Storage upload error:', uploadError);
      return {
        success: false,
        error: `Failed to upload file: ${uploadError.message}`,
      };
    }

    console.log('✅ Photo Service - File uploaded successfully');
    console.log('📁 Upload data:', uploadData);

    // Get public URL
    console.log('🔗 Photo Service - Generating public URL');
    const { data: urlData } = supabase.storage
      .from('photos')
      .getPublicUrl(filePath);

    const publicUrl = urlData.publicUrl;
    console.log('🌐 Photo Service - Public URL:', publicUrl);

    // Prepare photo metadata for database
    const photoMetadata = {
      user_id: options.userId || null,
      file_name: fileName,
      file_path: filePath,
      file_size: fileSize,
      mime_type: mimeType,
      taken_at: new Date().toISOString(),
      storage_bucket: 'photos',
      public_url: publicUrl,
    };

    console.log('💾 Photo Service - Saving metadata to database');
    console.log('📊 Photo metadata:', photoMetadata);

    // Save metadata to database
    const { data: dbData, error: dbError } = await supabase
      .from('photos')
      .insert(photoMetadata)
      .select()
      .single();

    if (dbError) {
      console.error('❌ Photo Service - Database error:', dbError);
      
      // Cleanup: delete the uploaded file if database save failed
      console.log('🧹 Photo Service - Cleaning up uploaded file due to database error');
      await supabase.storage.from('photos').remove([filePath]);
      
      return {
        success: false,
        error: `Failed to save photo metadata: ${dbError.message}`,
      };
    }

    console.log('✅ Photo Service - Photo uploaded and saved successfully!');
    console.log('📊 Saved photo data:', dbData);

    return {
      success: true,
      photo: dbData as Photo,
      publicUrl: publicUrl,
    };

  } catch (error) {
    console.error('❌ Photo Service - Unexpected error during upload:', error);
    return {
      success: false,
      error: `Unexpected error: ${error instanceof Error ? error.message : 'Unknown error'}`,
    };
  }
}

/**
 * Get all photos from the database
 */
export async function getAllPhotos(): Promise<Photo[]> {
  console.log('📋 Photo Service - Fetching all photos');

  try {
    const { data, error } = await supabase
      .from('photos')
      .select('*')
      .order('taken_at', { ascending: false });

    if (error) {
      console.error('❌ Photo Service - Error fetching photos:', error);
      throw new Error(`Failed to fetch photos: ${error.message}`);
    }

    console.log('✅ Photo Service - Successfully fetched', data?.length || 0, 'photos');
    return data || [];

  } catch (error) {
    console.error('❌ Photo Service - Unexpected error fetching photos:', error);
    return [];
  }
}

/**
 * Get photos by user ID
 */
export async function getPhotosByUser(userId: string): Promise<Photo[]> {
  console.log('👤 Photo Service - Fetching photos for user:', userId);

  try {
    const { data, error } = await supabase
      .from('photos')
      .select('*')
      .eq('user_id', userId)
      .order('taken_at', { ascending: false });

    if (error) {
      console.error('❌ Photo Service - Error fetching user photos:', error);
      throw new Error(`Failed to fetch user photos: ${error.message}`);
    }

    console.log('✅ Photo Service - Successfully fetched', data?.length || 0, 'photos for user');
    return data || [];

  } catch (error) {
    console.error('❌ Photo Service - Unexpected error fetching user photos:', error);
    return [];
  }
}

/**
 * Delete a photo (both from storage and database)
 */
export async function deletePhoto(photoId: string): Promise<boolean> {
  console.log('🗑️ Photo Service - Deleting photo with ID:', photoId);

  try {
    // First, get the photo data to know the file path
    const { data: photo, error: fetchError } = await supabase
      .from('photos')
      .select('file_path')
      .eq('id', photoId)
      .single();

    if (fetchError || !photo) {
      console.error('❌ Photo Service - Error fetching photo for deletion:', fetchError);
      return false;
    }

    console.log('📁 Photo Service - File path to delete:', photo.file_path);

    // Delete from storage
    const { error: storageError } = await supabase.storage
      .from('photos')
      .remove([photo.file_path]);

    if (storageError) {
      console.error('❌ Photo Service - Error deleting from storage:', storageError);
      // Continue with database deletion even if storage deletion fails
    } else {
      console.log('✅ Photo Service - Successfully deleted from storage');
    }

    // Delete from database
    const { error: dbError } = await supabase
      .from('photos')
      .delete()
      .eq('id', photoId);

    if (dbError) {
      console.error('❌ Photo Service - Error deleting from database:', dbError);
      return false;
    }

    console.log('✅ Photo Service - Successfully deleted photo');
    return true;

  } catch (error) {
    console.error('❌ Photo Service - Unexpected error deleting photo:', error);
    return false;
  }
}

================
File: scripts/migrate-both.js
================
#!/usr/bin/env node
/**
 * Migration Management Script
 * 
 * This script helps apply database migrations to both local and cloud Supabase environments
 * Usage: node scripts/migrate-both.js [command]
 * 
 * Commands:
 * - reset-local: Reset local database with migrations
 * - push-cloud: Push migrations to cloud environment
 * - reset-both: Reset both local and cloud databases
 * - status: Check migration status on both environments
 */

const { execSync } = require('child_process');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m'
};

function log(message, color = colors.white) {
  console.log(`${color}${message}${colors.reset}`);
}

function execCommand(command, description) {
  log(`\n🔄 ${description}...`, colors.cyan);
  try {
    execSync(command, { stdio: 'inherit' });
    log(`✅ ${description} completed successfully`, colors.green);
    return true;
  } catch (error) {
    log(`❌ ${description} failed`, colors.red);
    console.error(error.message);
    return false;
  }
}

function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(`${colors.yellow}${question}${colors.reset}`, (answer) => {
      resolve(answer.toLowerCase().trim());
    });
  });
}

async function resetLocal() {
  log('\n🏠 Resetting Local Supabase Database', colors.bright);
  
  const success = execCommand(
    'supabase db reset --local',
    'Reset local database with migrations'
  );
  
  if (success) {
    log('📊 Local database is now up to date with all migrations', colors.green);
  }
  
  return success;
}

async function pushToCloud() {
  log('\n☁️ Pushing Migrations to Cloud', colors.bright);
  
  const answer = await askQuestion(
    'This will apply migrations to your PRODUCTION cloud database. Are you sure? (yes/no): '
  );
  
  if (answer !== 'yes' && answer !== 'y') {
    log('❌ Cloud migration cancelled by user', colors.yellow);
    return false;
  }
  
  const success = execCommand(
    'supabase db push --linked',
    'Push migrations to cloud database'
  );
  
  if (success) {
    log('📊 Cloud database is now up to date with all migrations', colors.green);
  }
  
  return success;
}

async function checkStatus() {
  log('\n📊 Checking Migration Status', colors.bright);
  
  log('\n🏠 Local Database Status:', colors.cyan);
  execCommand(
    'supabase migration list --local',
    'Check local migration status'
  );
  
  log('\n☁️ Cloud Database Status:', colors.cyan);
  execCommand(
    'supabase migration list --linked',
    'Check cloud migration status'
  );
}

async function resetBoth() {
  log('\n🔄 Resetting Both Local and Cloud Databases', colors.bright);
  
  const answer = await askQuestion(
    '⚠️  WARNING: This will reset BOTH local AND cloud databases. All data will be lost! Continue? (yes/no): '
  );
  
  if (answer !== 'yes' && answer !== 'y') {
    log('❌ Operation cancelled by user', colors.yellow);
    return false;
  }
  
  // Reset local first
  const localSuccess = await resetLocal();
  
  if (localSuccess) {
    // Then push to cloud
    const cloudSuccess = await pushToCloud();
    
    if (cloudSuccess) {
      log('\n🎉 Both databases have been reset and synchronized!', colors.green);
      return true;
    }
  }
  
  return false;
}

async function main() {
  const command = process.argv[2];
  
  log('🗄️ Database Migration Manager', colors.bright);
  log('================================', colors.bright);
  
  switch (command) {
    case 'reset-local':
      await resetLocal();
      break;
      
    case 'push-cloud':
      await pushToCloud();
      break;
      
    case 'reset-both':
      await resetBoth();
      break;
      
    case 'status':
      await checkStatus();
      break;
      
    default:
      log('\nUsage: node scripts/migrate-both.js [command]', colors.yellow);
      log('\nAvailable commands:', colors.white);
      log('  reset-local  - Reset local database with migrations', colors.cyan);
      log('  push-cloud   - Push migrations to cloud environment', colors.cyan);
      log('  reset-both   - Reset both local and cloud databases', colors.cyan);
      log('  status       - Check migration status on both environments', colors.cyan);
      log('\nExamples:', colors.white);
      log('  node scripts/migrate-both.js reset-local', colors.gray);
      log('  node scripts/migrate-both.js status', colors.gray);
      break;
  }
  
  rl.close();
}

// Handle process termination
process.on('SIGINT', () => {
  log('\n\n👋 Migration manager interrupted', colors.yellow);
  rl.close();
  process.exit(0);
});

main().catch((error) => {
  log(`\n❌ Migration manager error: ${error.message}`, colors.red);
  rl.close();
  process.exit(1);
});

================
File: scripts/reset-demo.js
================
#!/usr/bin/env node

/**
 * Demo Data Reset Script - Task 3.12
 * 
 * This script resets demo data with fresh timestamps to ensure consistent 
 * demo experience across multiple sessions. It deletes existing demo posts 
 * and recreates them with relative timestamps from NOW().
 * 
 * Usage: node scripts/reset-demo.js
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Supabase configuration - prioritize local development environment
const supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL_LOCAL || process.env.EXPO_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY_LOCAL || process.env.SUPABASE_SERVICE_ROLE_KEY; // Needs service role for admin operations

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('❌ Missing required environment variables:');
  console.error('   - EXPO_PUBLIC_SUPABASE_URL');
  console.error('   - SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

/**
 * Reset demo data with fresh timestamps
 */
async function resetDemoData() {
  try {
    console.log('🔄 Starting demo data reset...');
    
    // Demo user IDs
    const demoUsers = {
      maya: '11111111-1111-1111-1111-111111111111',
      jordan: '22222222-2222-2222-2222-222222222222', 
      sam: '33333333-3333-3333-3333-333333333333',
      casey: '44444444-4444-4444-4444-444444444444',
      riley: '55555555-5555-5555-5555-555555555555'
    };

    // Get demo class ID
    const { data: demoClass, error: classError } = await supabase
      .from('classes')
      .select('id')
      .eq('join_code', 'DRAW01')
      .single();

    if (classError || !demoClass) {
      console.error('❌ Demo class DRAW01 not found:', classError);
      process.exit(1);
    }

    console.log('✅ Found demo class:', demoClass.id);

    // Fix demo user usernames first (they may be NULL from migration conflicts)
    console.log('👤 Updating demo user usernames...');
    const userUpdates = [
      { id: demoUsers.maya, username: 'maya_sketches' },
      { id: demoUsers.jordan, username: 'jordan_art' },
      { id: demoUsers.sam, username: 'sam_draws' },
      { id: demoUsers.casey, username: 'casey_creates' },
      { id: demoUsers.riley, username: 'riley_paints' }
    ];

    for (const update of userUpdates) {
      const { error: updateError } = await supabase
        .from('users')
        .update({ username: update.username })
        .eq('id', update.id);
      
      if (updateError) {
        console.error(`❌ Error updating username for ${update.username}:`, updateError);
      } else {
        console.log(`✅ Updated username: ${update.username}`);
      }
    }

    // Delete existing demo posts and related data
    console.log('🗑️  Deleting existing demo posts...');
    
    // Delete AI feedback for demo posts
    await supabase
      .from('ai_feedback')
      .delete()
      .in('user_id', Object.values(demoUsers));

    // Delete comments from demo posts
    await supabase
      .from('comments')
      .delete() 
      .in('user_id', Object.values(demoUsers));

    // Delete post views for demo posts
    await supabase
      .from('post_views')
      .delete()
      .in('user_id', Object.values(demoUsers));

    // Delete demo posts
    await supabase
      .from('posts')
      .delete()
      .in('user_id', Object.values(demoUsers));

    console.log('✅ Deleted existing demo data');

    // Calculate fresh timestamps relative to NOW
    const now = new Date();
    const formatInterval = (minutes) => {
      const future = new Date(now.getTime() + minutes * 60000);
      return future.toISOString();
    };

    const formatPast = (minutes) => {
      const past = new Date(now.getTime() - minutes * 60000);
      return past.toISOString();
    };

    // Recreate demo posts with fresh timestamps
    console.log('📝 Creating fresh demo posts...');

    const demoPosts = [
      {
        id: '10000000-0000-0000-0000-000000000001',
        user_id: demoUsers.maya,
        class_id: demoClass.id,
        image_url: 'https://picsum.photos/800/600?random=maya1',
        image_path: 'demo/maya_charcoal_portrait.jpg',
        frame_style: 'classic',
        title: 'Charcoal Portrait Study',
        description: 'Working on capturing light and shadow in this self-portrait. Still learning!',
        max_viewers: 5,
        view_count: 3,
        duration_minutes: 60,
        expires_at: formatInterval(45), // Expires in 45 minutes
        is_expired: false,
        created_at: formatPast(15), // Created 15 minutes ago
        updated_at: formatPast(15)
      },
      {
        id: '10000000-0000-0000-0000-000000000002',
        user_id: demoUsers.jordan,
        class_id: demoClass.id,
        image_url: 'https://picsum.photos/800/600?random=jordan1',
        image_path: 'demo/jordan_watercolor_landscape.jpg',
        frame_style: 'modern',
        title: 'Watercolor Landscape',
        description: 'First attempt at wet-on-wet technique. The colors bled more than expected but I like it!',
        max_viewers: 4,
        view_count: 2,
        duration_minutes: 180,
        expires_at: formatInterval(140), // Expires in 2h 20m
        is_expired: false,
        created_at: formatPast(40), // Created 40 minutes ago
        updated_at: formatPast(40)
      },
      {
        id: '10000000-0000-0000-0000-000000000003', 
        user_id: demoUsers.sam,
        class_id: demoClass.id,
        image_url: 'https://picsum.photos/800/600?random=sam1',
        image_path: 'demo/sam_pencil_study.jpg',
        frame_style: null,
        title: 'Pencil Study - Hands',
        description: 'Practiced drawing hands today. They are so difficult but getting better!',
        max_viewers: 5,
        view_count: 5,
        duration_minutes: 30,
        expires_at: formatInterval(18), // Expires in 18 minutes
        is_expired: false,
        created_at: formatPast(12), // Created 12 minutes ago
        updated_at: formatPast(12)
      },
      {
        id: '10000000-0000-0000-0000-000000000004',
        user_id: demoUsers.casey,
        class_id: demoClass.id,
        image_url: 'https://picsum.photos/800/600?random=casey1',
        image_path: 'demo/casey_digital_sketch.jpg',
        frame_style: 'vintage',
        title: 'Digital Character Sketch',
        description: 'Exploring digital art for the first time. Really enjoying the undo button! 😊',
        max_viewers: 3,
        view_count: 1,
        duration_minutes: 1440, // 24 hours
        expires_at: formatInterval(1425), // Expires in 23h 45m
        is_expired: false,
        created_at: formatPast(15), // Created 15 minutes ago
        updated_at: formatPast(15)
      }
    ];

    // Insert fresh posts
    const { error: postsError } = await supabase
      .from('posts')
      .insert(demoPosts);

    if (postsError) {
      console.error('❌ Error creating demo posts:', postsError);
      process.exit(1);
    }

    console.log('✅ Created fresh demo posts');

    // Recreate post views with fresh timestamps
    console.log('👀 Adding demo post views...');
    
    const demoViews = [
      // Maya's post viewers
      { post_id: demoPosts[0].id, user_id: demoUsers.jordan, viewed_at: formatPast(10) },
      { post_id: demoPosts[0].id, user_id: demoUsers.sam, viewed_at: formatPast(8) },
      { post_id: demoPosts[0].id, user_id: demoUsers.casey, viewed_at: formatPast(5) },
      
      // Jordan's post viewers
      { post_id: demoPosts[1].id, user_id: demoUsers.maya, viewed_at: formatPast(35) },
      { post_id: demoPosts[1].id, user_id: demoUsers.sam, viewed_at: formatPast(20) },
      
      // Sam's post viewers (max reached)
      { post_id: demoPosts[2].id, user_id: demoUsers.maya, viewed_at: formatPast(10) },
      { post_id: demoPosts[2].id, user_id: demoUsers.jordan, viewed_at: formatPast(8) },
      { post_id: demoPosts[2].id, user_id: demoUsers.casey, viewed_at: formatPast(6) },
      { post_id: demoPosts[2].id, user_id: demoUsers.riley, viewed_at: formatPast(4) },
      
      // Casey's post viewer
      { post_id: demoPosts[3].id, user_id: demoUsers.riley, viewed_at: formatPast(12) }
    ];

    const { error: viewsError } = await supabase
      .from('post_views')
      .insert(demoViews);

    if (viewsError) {
      console.error('❌ Error creating demo views:', viewsError);
      process.exit(1);
    }

    console.log('✅ Added demo post views');

    // Recreate encouraging comments with fresh timestamps
    console.log('💬 Adding demo comments...');
    
    const demoComments = [
      // Comments on Maya's post
      { post_id: demoPosts[0].id, user_id: demoUsers.jordan, content: 'Wow, the shading on the cheekbone is really well done! You captured the light beautifully.', created_at: formatPast(8), updated_at: formatPast(8) },
      { post_id: demoPosts[0].id, user_id: demoUsers.sam, content: 'I love how you used the charcoal texture to show depth. The contrast is striking!', created_at: formatPast(6), updated_at: formatPast(6) },
      { post_id: demoPosts[0].id, user_id: demoUsers.casey, content: 'This is incredible! The way you rendered the hair texture is so realistic. Goals! ✨', created_at: formatPast(3), updated_at: formatPast(3) },
      
      // Comments on Jordan's post
      { post_id: demoPosts[1].id, user_id: demoUsers.maya, content: 'The color blending in the sky is absolutely gorgeous! Sometimes happy accidents make the best art.', created_at: formatPast(30), updated_at: formatPast(30) },
      { post_id: demoPosts[1].id, user_id: demoUsers.sam, content: 'I can feel the atmosphere in this piece. The wet-on-wet technique gives it such a dreamy quality.', created_at: formatPast(18), updated_at: formatPast(18) },
      
      // Comments on Sam's post  
      { post_id: demoPosts[2].id, user_id: demoUsers.maya, content: 'Hands are so challenging but you nailed the proportions! The gesture feels very natural.', created_at: formatPast(8), updated_at: formatPast(8) },
      { post_id: demoPosts[2].id, user_id: demoUsers.jordan, content: 'The way you captured the knuckle details is amazing. I struggle with hands so much!', created_at: formatPast(6), updated_at: formatPast(6) },
      { post_id: demoPosts[2].id, user_id: demoUsers.casey, content: 'Such clean linework! You can really see your improvement from practice. Keep it up! 👏', created_at: formatPast(4), updated_at: formatPast(4) },
      { post_id: demoPosts[2].id, user_id: demoUsers.riley, content: 'The anatomy looks spot on. This gives me motivation to practice hands more!', created_at: formatPast(2), updated_at: formatPast(2) },
      
      // Comments on Casey's post
      { post_id: demoPosts[3].id, user_id: demoUsers.riley, content: 'Love seeing you explore digital! The character design has so much personality. 🎨', created_at: formatPast(10), updated_at: formatPast(10) }
    ];

    const { error: commentsError } = await supabase
      .from('comments')
      .insert(demoComments);

    if (commentsError) {
      console.error('❌ Error creating demo comments:', commentsError);
      process.exit(1);
    }

    console.log('✅ Added demo comments');

    // Recreate AI feedback with fresh timestamps
    console.log('🤖 Adding demo AI feedback...');
    
    const demoAIFeedback = [
      {
        post_id: demoPosts[0].id,
        user_id: demoUsers.maya,
        feedback_text: `Your charcoal portrait demonstrates excellent understanding of light and shadow. The contrast you've achieved creates strong dimensionality, particularly in the facial structure. The way you've handled the transition from light to shadow on the cheekbone shows developing technical skill.

Areas of strength:
• Strong tonal range from deep blacks to subtle grays
• Good proportional accuracy in facial features  
• Effective use of charcoal texture to suggest surface quality

For continued growth, consider:
• Experimenting with softer edges in some shadow transitions
• Adding more subtle mid-tones to enhance roundness
• Exploring how reflected light affects shadow areas

This piece shows real promise and dedication to observational drawing. Keep practicing with direct observation!`,
        feedback_status: 'completed',
        processing_time_ms: 2847,
        ai_model: 'gpt-4v',
        created_at: formatPast(5),
        updated_at: formatPast(5)
      },
      {
        post_id: demoPosts[2].id,
        user_id: demoUsers.sam,
        feedback_text: `This hand study shows impressive attention to anatomical accuracy and proportional relationships. Drawing hands is one of the most challenging subjects, and you've approached it with clear observation and patience.

Strengths in this piece:
• Accurate finger proportions and joint placement
• Good understanding of how tendons affect surface form
• Clean, confident line quality that suggests three-dimensional form
• Proper scale relationships between palm and fingers

Suggestions for development:
• Consider adding subtle shading to enhance volume
• Study how hands change when viewed from different angles
• Practice gesture drawings to capture hand movement and expression

Your improvement through practice is evident. Hands become much easier with continued observation - you're on the right track!`,
        feedback_status: 'completed',
        processing_time_ms: 3156,
        ai_model: 'gpt-4v',
        created_at: formatPast(3),
        updated_at: formatPast(3)
      }
    ];

    const { error: aiFeedbackError } = await supabase
      .from('ai_feedback')
      .insert(demoAIFeedback);

    if (aiFeedbackError) {
      console.error('❌ Error creating demo AI feedback:', aiFeedbackError);
      process.exit(1);
    }

    console.log('✅ Added demo AI feedback');

    // Summary
    console.log('\n🎉 Demo data reset complete!');
    console.log('📊 Fresh content created:');
    console.log(`   • 4 artwork posts with realistic expiration times`);
    console.log(`   • ${demoViews.length} post views with engagement`);
    console.log(`   • ${demoComments.length} encouraging comments`);
    console.log(`   • ${demoAIFeedback.length} AI feedback examples`);
    console.log('\n⏰ Timer states:');
    console.log('   • Maya: Expires in 45 minutes (3/5 viewers)');
    console.log('   • Jordan: Expires in 2h 20m (2/4 viewers)');
    console.log('   • Sam: Expires in 18 minutes (5/5 viewers - max reached)'); 
    console.log('   • Casey: Expires in 23h 45m (1/3 viewers)');
    console.log('\n✨ Demo is ready for consistent multi-session testing!');

  } catch (error) {
    console.error('❌ Demo reset failed:', error);
    process.exit(1);
  }
}

// Run the script
if (require.main === module) {
  resetDemoData();
}

module.exports = { resetDemoData };

================
File: scripts/reset-project.js
================
#!/usr/bin/env node

/**
 * This script is used to reset the project to a blank state.
 * It deletes or moves the /app, /components, /hooks, /scripts, and /constants directories to /app-example based on user input and creates a new /app directory with an index.tsx and _layout.tsx file.
 * You can remove the `reset-project` script from package.json and safely delete this file after running it.
 */

const fs = require("fs");
const path = require("path");
const readline = require("readline");

const root = process.cwd();
const oldDirs = ["app", "components", "hooks", "constants", "scripts"];
const exampleDir = "app-example";
const newAppDir = "app";
const exampleDirPath = path.join(root, exampleDir);

const indexContent = `import { Text, View } from "react-native";

export default function Index() {
  return (
    <View
      style={{
        flex: 1,
        justifyContent: "center",
        alignItems: "center",
      }}
    >
      <Text>Edit app/index.tsx to edit this screen.</Text>
    </View>
  );
}
`;

const layoutContent = `import { Stack } from "expo-router";

export default function RootLayout() {
  return <Stack />;
}
`;

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

const moveDirectories = async (userInput) => {
  try {
    if (userInput === "y") {
      // Create the app-example directory
      await fs.promises.mkdir(exampleDirPath, { recursive: true });
      console.log(`📁 /${exampleDir} directory created.`);
    }

    // Move old directories to new app-example directory or delete them
    for (const dir of oldDirs) {
      const oldDirPath = path.join(root, dir);
      if (fs.existsSync(oldDirPath)) {
        if (userInput === "y") {
          const newDirPath = path.join(root, exampleDir, dir);
          await fs.promises.rename(oldDirPath, newDirPath);
          console.log(`➡️ /${dir} moved to /${exampleDir}/${dir}.`);
        } else {
          await fs.promises.rm(oldDirPath, { recursive: true, force: true });
          console.log(`❌ /${dir} deleted.`);
        }
      } else {
        console.log(`➡️ /${dir} does not exist, skipping.`);
      }
    }

    // Create new /app directory
    const newAppDirPath = path.join(root, newAppDir);
    await fs.promises.mkdir(newAppDirPath, { recursive: true });
    console.log("\n📁 New /app directory created.");

    // Create index.tsx
    const indexPath = path.join(newAppDirPath, "index.tsx");
    await fs.promises.writeFile(indexPath, indexContent);
    console.log("📄 app/index.tsx created.");

    // Create _layout.tsx
    const layoutPath = path.join(newAppDirPath, "_layout.tsx");
    await fs.promises.writeFile(layoutPath, layoutContent);
    console.log("📄 app/_layout.tsx created.");

    console.log("\n✅ Project reset complete. Next steps:");
    console.log(
      `1. Run \`npx expo start\` to start a development server.\n2. Edit app/index.tsx to edit the main screen.${
        userInput === "y"
          ? `\n3. Delete the /${exampleDir} directory when you're done referencing it.`
          : ""
      }`
    );
  } catch (error) {
    console.error(`❌ Error during script execution: ${error.message}`);
  }
};

rl.question(
  "Do you want to move existing files to /app-example instead of deleting them? (Y/n): ",
  (answer) => {
    const userInput = answer.trim().toLowerCase() || "y";
    if (userInput === "y" || userInput === "n") {
      moveDirectories(userInput).finally(() => rl.close());
    } else {
      console.log("❌ Invalid input. Please enter 'Y' or 'N'.");
      rl.close();
    }
  }
);

================
File: scripts/validate-demo.js
================
#!/usr/bin/env node

/**
 * Demo Content Validation Script - Task 3.11
 * 
 * This script validates that demo content is high quality:
 * - Tests that image URLs are working and return valid images
 * - Verifies comments display properly with correct content
 * - Checks timer states are realistic for consistent demo experience
 * - Validates all demo data relationships are intact
 * 
 * Usage: node scripts/validate-demo.js
 */

const { createClient } = require('@supabase/supabase-js');
const https = require('https');
const fs = require('fs');
require('dotenv').config();

// Supabase configuration - prioritize local development environment
const supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL_LOCAL || process.env.EXPO_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY_LOCAL || process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('❌ Missing required environment variables:');
  console.error('   - EXPO_PUBLIC_SUPABASE_URL');
  console.error('   - SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

/**
 * Test if an image URL returns a valid image
 */
function testImageUrl(url) {
  return new Promise((resolve) => {
    https.get(url, (res) => {
      // Handle redirects (302, 301) - common for image services like Picsum
      if (res.statusCode === 302 || res.statusCode === 301) {
        const redirectUrl = res.headers.location;
        if (redirectUrl) {
          // Follow the redirect
          return https.get(redirectUrl, (redirectRes) => {
            const isValidImage = redirectRes.statusCode === 200 && 
              redirectRes.headers['content-type'] && 
              redirectRes.headers['content-type'].startsWith('image/');
            
            resolve({
              url,
              status: redirectRes.statusCode,
              contentType: redirectRes.headers['content-type'],
              isValid: isValidImage,
              redirected: true
            });
            
            redirectRes.destroy();
          }).on('error', (err) => {
            resolve({
              url,
              status: 'REDIRECT_ERROR',
              error: err.message,
              isValid: false
            });
          });
        }
      }
      
      // Direct response
      const isValidImage = res.statusCode === 200 && 
        res.headers['content-type'] && 
        res.headers['content-type'].startsWith('image/');
      
      resolve({
        url,
        status: res.statusCode,
        contentType: res.headers['content-type'],
        isValid: isValidImage
      });
      
      // Don't download the full image, just test headers
      res.destroy();
    }).on('error', (err) => {
      resolve({
        url,
        status: 'ERROR',
        error: err.message,
        isValid: false
      });
    });
  });
}

/**
 * Validate demo content quality
 */
async function validateDemoContent() {
  try {
    console.log('🔍 Starting demo content validation...\n');

    // Test 1: Validate demo class exists and is accessible
    console.log('📚 Testing demo class...');
    const { data: demoClass, error: classError } = await supabase
      .from('classes')
      .select('id, name, join_code, is_active')
      .eq('join_code', 'DRAW01')
      .single();

    if (classError || !demoClass) {
      console.error('❌ Demo class DRAW01 not found:', classError);
      return false;
    }

    console.log(`✅ Demo class found: "${demoClass.name}" (${demoClass.join_code})`);
    console.log(`   Status: ${demoClass.is_active ? 'Active' : 'Inactive'}\n`);

    // Test 2: Validate demo users exist
    console.log('👥 Testing demo users...');
    const demoUserIds = [
      '11111111-1111-1111-1111-111111111111',
      '22222222-2222-2222-2222-222222222222',
      '33333333-3333-3333-3333-333333333333',
      '44444444-4444-4444-4444-444444444444',
      '55555555-5555-5555-5555-555555555555'
    ];

    const { data: demoUsers, error: usersError } = await supabase
      .from('users')
      .select('id, username, email')
      .in('id', demoUserIds);

    if (usersError) {
      console.error('❌ Error fetching demo users:', usersError);
      return false;
    }

    console.log(`✅ Found ${demoUsers.length}/5 demo users:`);
    demoUsers.forEach(user => {
      console.log(`   • ${user.username} (${user.email})`);
    });
    console.log();

    // Test 3: Validate demo posts and timer states
    console.log('📝 Testing demo posts and timer states...');
    const { data: demoPosts, error: postsError } = await supabase
      .from('posts')
      .select(`
        id, user_id, title, description, image_url, 
        max_viewers, view_count, duration_minutes,
        expires_at, is_expired, created_at
      `)
      .in('user_id', demoUserIds)
      .order('created_at', { ascending: false });

    if (postsError) {
      console.error('❌ Error fetching demo posts:', postsError);
      return false;
    }

    if (demoPosts.length === 0) {
      console.error('❌ No demo posts found');
      return false;
    }

    console.log(`✅ Found ${demoPosts.length} demo posts:`);
    
    const now = new Date();
    let validTimerStates = 0;
    
    for (const post of demoPosts) {
      const expiresAt = new Date(post.expires_at);
      const createdAt = new Date(post.created_at);
      const timeUntilExpiry = expiresAt - now;
      const timeSinceCreated = now - createdAt;
      const hoursUntilExpiry = timeUntilExpiry / (1000 * 60 * 60);
      const minutesUntilExpiry = timeUntilExpiry / (1000 * 60);
      
      // Find the username from demo users
      const postUser = demoUsers.find(u => u.id === post.user_id);
      const username = postUser ? postUser.username || 'Unknown' : 'Unknown';
      
      console.log(`\n   📄 "${post.title}" by ${username}`);
      console.log(`      • Viewers: ${post.view_count}/${post.max_viewers}`);
      console.log(`      • Created: ${Math.round(timeSinceCreated / (1000 * 60))} minutes ago`);
      
      if (timeUntilExpiry > 0) {
        if (hoursUntilExpiry >= 1) {
          console.log(`      • Expires: in ${Math.round(hoursUntilExpiry * 10) / 10} hours`);
        } else {
          console.log(`      • Expires: in ${Math.round(minutesUntilExpiry)} minutes`);
        }
        console.log(`      • Status: ✅ Active (realistic timer)`);
        validTimerStates++;
      } else {
        console.log(`      • Status: ⚠️  EXPIRED (${Math.abs(Math.round(minutesUntilExpiry))} minutes ago)`);
      }
    }

    if (validTimerStates < demoPosts.length * 0.75) {
      console.log('\n⚠️  Warning: Many posts have expired - consider running demo:reset\n');
    } else {
      console.log(`\n✅ Timer states realistic: ${validTimerStates}/${demoPosts.length} posts active\n`);
    }

    // Test 4: Validate image URLs
    console.log('🖼️  Testing demo post image URLs...');
    const imageTests = await Promise.all(
      demoPosts.map(post => testImageUrl(post.image_url))
    );

    let validImages = 0;
    for (const test of imageTests) {
      if (test.isValid) {
        const redirectInfo = test.redirected ? ' (redirected)' : '';
        console.log(`   ✅ ${test.url} - ${test.contentType}${redirectInfo}`);
        validImages++;
      } else {
        console.log(`   ❌ ${test.url} - Status: ${test.status}, Error: ${test.error || 'Invalid content type'}`);
      }
    }

    if (validImages !== imageTests.length) {
      console.log(`\n⚠️  Image URL issues: ${validImages}/${imageTests.length} working\n`);
    } else {
      console.log(`\n✅ All image URLs working: ${validImages}/${imageTests.length}\n`);
    }

    // Test 5: Validate comments display properly
    console.log('💬 Testing demo comments...');
    const { data: demoComments, error: commentsError } = await supabase
      .from('comments')
      .select('id, content, created_at, post_id, user_id')
      .in('user_id', demoUserIds)
      .order('created_at', { ascending: false });

    if (commentsError) {
      console.error('❌ Error fetching demo comments:', commentsError);
      return false;
    }

    console.log(`✅ Found ${demoComments.length} demo comments:`);
    
    let validComments = 0;
    for (const comment of demoComments.slice(0, 5)) { // Show first 5
      const isValidLength = comment.content.length > 0 && comment.content.length <= 150;
      const hasEmoji = /[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]/u.test(comment.content);
      const isEncouraging = /beautiful|amazing|love|great|incredible|gorgeous|good|well done|nice|awesome/i.test(comment.content);
      
      // Find the user and post
      const commentUser = demoUsers.find(u => u.id === comment.user_id);
      const commentPost = demoPosts.find(p => p.id === comment.post_id);
      const username = commentUser ? commentUser.username || 'Unknown' : 'Unknown';
      const postTitle = commentPost ? commentPost.title : 'Unknown Post';
      
      console.log(`   💬 "${comment.content.substring(0, 50)}${comment.content.length > 50 ? '...' : ''}"`);
      console.log(`      by ${username} on "${postTitle}"`);
      console.log(`      Length: ${comment.content.length}/150 chars ${isValidLength ? '✅' : '❌'}`);
      console.log(`      Tone: ${isEncouraging ? 'Encouraging ✅' : 'Neutral ⚠️'} ${hasEmoji ? '(with emoji)' : ''}`);
      console.log();
      
      if (isValidLength && isEncouraging) validComments++;
    }

    if (validComments >= Math.min(5, demoComments.length) * 0.8) {
      console.log(`✅ Comments quality good: encouraging and well-formatted\n`);
    } else {
      console.log(`⚠️  Comment quality issues detected\n`);
    }

    // Test 6: Validate AI feedback exists and is encouraging
    console.log('🤖 Testing demo AI feedback...');
    const { data: aiFeedback, error: aiError } = await supabase
      .from('ai_feedback')
      .select('id, feedback_text, feedback_status, ai_model, post_id, user_id')
      .in('user_id', demoUserIds);

    if (aiError) {
      console.error('❌ Error fetching AI feedback:', aiError);
      return false;
    }

    if (aiFeedback.length > 0) {
      console.log(`✅ Found ${aiFeedback.length} AI feedback examples:`);
      for (const feedback of aiFeedback) {
        const wordCount = feedback.feedback_text.split(' ').length;
        const hasPositive = /excellent|good|well done|impressive|strength|promise/i.test(feedback.feedback_text);
        const hasConstructive = /consider|suggest|try|growth|develop|practice/i.test(feedback.feedback_text);
        
        // Find the user and post
        const feedbackUser = demoUsers.find(u => u.id === feedback.user_id);
        const feedbackPost = demoPosts.find(p => p.id === feedback.post_id);
        const username = feedbackUser ? feedbackUser.username || 'Unknown' : 'Unknown';
        const postTitle = feedbackPost ? feedbackPost.title : 'Unknown Post';
        
        console.log(`   🤖 Feedback for "${postTitle}" by ${username}`);
        console.log(`      Model: ${feedback.ai_model}, Status: ${feedback.feedback_status}`);
        console.log(`      Length: ${wordCount} words`);
        console.log(`      Tone: ${hasPositive ? 'Positive ✅' : 'Neutral ⚠️'} ${hasConstructive ? 'Constructive ✅' : ''}`);
        console.log();
      }
    } else {
      console.log('⚠️  No AI feedback examples found\n');
    }

    // Test 7: Validate class membership relationships
    console.log('🏫 Testing class membership relationships...');
    const { data: memberships, error: membershipError } = await supabase
      .from('class_members')
      .select('user_id, role, is_active')
      .eq('class_id', demoClass.id)
      .in('user_id', demoUserIds);

    if (membershipError) {
      console.error('❌ Error fetching class memberships:', membershipError);
      return false;
    }

    console.log(`✅ Class membership: ${memberships.length}/5 demo users are members`);
    const activeMembers = memberships.filter(m => m.is_active).length;
    console.log(`   Active members: ${activeMembers}/${memberships.length}\n`);

    // Summary
    console.log('📊 DEMO VALIDATION SUMMARY:');
    console.log('═'.repeat(40));
    console.log(`✅ Demo class: ${demoClass.name} (${demoClass.join_code})`);
    console.log(`✅ Demo users: ${demoUsers.length}/5 found`);
    console.log(`${validTimerStates >= demoPosts.length * 0.75 ? '✅' : '⚠️'} Timer states: ${validTimerStates}/${demoPosts.length} realistic`);
    console.log(`${validImages === imageTests.length ? '✅' : '❌'} Image URLs: ${validImages}/${imageTests.length} working`);
    console.log(`✅ Comments: ${demoComments.length} encouraging comments`);
    console.log(`${aiFeedback.length > 0 ? '✅' : '⚠️'} AI feedback: ${aiFeedback.length} examples`);
    console.log(`✅ Memberships: ${activeMembers}/${memberships.length} active`);
    
    const overallHealth = (
      (demoClass ? 1 : 0) +
      (demoUsers.length === 5 ? 1 : 0) +
      (validTimerStates >= demoPosts.length * 0.75 ? 1 : 0) +
      (validImages === imageTests.length ? 1 : 0) +
      (demoComments.length > 0 ? 1 : 0) +
      (aiFeedback.length > 0 ? 1 : 0) +
      (activeMembers === memberships.length ? 1 : 0)
    ) / 7;

    console.log('\n🎯 Overall Demo Health:', Math.round(overallHealth * 100) + '%');
    
    if (overallHealth >= 0.85) {
      console.log('🎉 Demo content is ready for consistent demo experience!');
      return true;
    } else if (overallHealth >= 0.7) {
      console.log('⚠️  Demo content has minor issues - consider running demo:reset');
      return true;
    } else {
      console.log('❌ Demo content has significant issues - run demo:reset required');
      return false;
    }

  } catch (error) {
    console.error('❌ Demo validation failed:', error);
    return false;
  }
}

// Run the script
if (require.main === module) {
  validateDemoContent()
    .then(success => {
      process.exit(success ? 0 : 1);
    });
}

module.exports = { validateDemoContent };

================
File: store/authStore.ts
================
/**
 * Authentication Store using Zustand
 * 
 * This store manages global authentication state including:
 * - User session management
 * - Login/logout functionality
 * - Registration handling
 * - Session persistence and restoration
 */

import type { Session, User } from '@supabase/supabase-js';
import { create } from 'zustand';
import { supabase } from '../lib/supabase';

// User profile interface matching our database schema
export interface UserProfile {
  id: string;
  email: string;
  username?: string;
  avatar_url?: string;
  created_at: string;
  updated_at: string;
}

// Authentication state interface
export interface AuthState {
  // Current state
  user: User | null;
  profile: UserProfile | null;
  session: Session | null;
  isLoading: boolean;
  isInitialized: boolean;
  
  // Actions
  signUp: (email: string, password: string) => Promise<{ success: boolean; error?: string }>;
  signIn: (email: string, password: string) => Promise<{ success: boolean; error?: string }>;
  signOut: () => Promise<void>;
  updateProfile: (updates: Partial<Pick<UserProfile, 'username' | 'avatar_url'>>) => Promise<{ success: boolean; error?: string }>;
  initialize: () => Promise<void>;
  
  // Internal state setters
  setUser: (user: User | null) => void;
  setProfile: (profile: UserProfile | null) => void;
  setSession: (session: Session | null) => void;
  setLoading: (loading: boolean) => void;
  setInitialized: (initialized: boolean) => void;
}

export const useAuthStore = create<AuthState>((set, get) => ({
  // Initial state
  user: null,
  profile: null,
  session: null,
  isLoading: false,
  isInitialized: false,

  // Initialize auth state and set up listener
  initialize: async () => {
    console.log('🔐 Auth Store - Initializing authentication state');
    set({ isLoading: true });

    try {
      // Get current session
      const { data: { session }, error: sessionError } = await supabase.auth.getSession();
      
      if (sessionError) {
        console.error('❌ Auth Store - Session error:', sessionError);
        throw sessionError;
      }

      console.log('📱 Auth Store - Current session:', session ? 'Found' : 'None');
      
      if (session?.user) {
        // Fetch user profile
        const { data: profile, error: profileError } = await supabase
          .from('users')
          .select('*')
          .eq('id', session.user.id)
          .single();

        if (profileError && profileError.code !== 'PGRST116') {
          console.error('❌ Auth Store - Profile fetch error:', profileError);
        }

        console.log('👤 Auth Store - User profile:', profile ? 'Loaded' : 'Creating...');
        
        set({
          user: session.user,
          session: session,
          profile: profile || null,
        });
      }

      // Set up auth state change listener
      supabase.auth.onAuthStateChange(async (event, session) => {
        console.log('🔄 Auth Store - Auth state changed:', event);
        
        if (event === 'SIGNED_IN' && session?.user) {
          // Fetch or create user profile
          let { data: profile, error: profileError } = await supabase
            .from('users')
            .select('*')
            .eq('id', session.user.id)
            .single();

          if (profileError && profileError.code === 'PGRST116') {
            // Profile doesn't exist, create it
            console.log('✨ Auth Store - Creating new user profile');
            const { data: newProfile, error: createError } = await supabase
              .from('users')
              .insert({
                id: session.user.id,
                email: session.user.email!,
              })
              .select()
              .single();

            if (createError) {
              console.error('❌ Auth Store - Profile creation error:', createError);
            } else {
              profile = newProfile;
            }
          }

          set({
            user: session.user,
            session: session,
            profile: profile || null,
          });
        } else if (event === 'SIGNED_OUT') {
          console.log('👋 Auth Store - User signed out');
          set({
            user: null,
            session: null,
            profile: null,
          });
        }
      });

    } catch (error) {
      console.error('❌ Auth Store - Initialization error:', error);
    } finally {
      set({ isLoading: false, isInitialized: true });
    }
  },

  // Sign up new user
  signUp: async (email: string, password: string) => {
    console.log('📝 Auth Store - Starting user registration');
    set({ isLoading: true });

    try {
      const { data, error } = await supabase.auth.signUp({
        email,
        password,
      });

      if (error) {
        console.error('❌ Auth Store - Sign up error:', error);
        return { success: false, error: error.message };
      }

      console.log('✅ Auth Store - User registered successfully');
      return { success: true };
    } catch (error) {
      console.error('❌ Auth Store - Sign up unexpected error:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Registration failed' 
      };
    } finally {
      set({ isLoading: false });
    }
  },

  // Sign in existing user
  signIn: async (email: string, password: string) => {
    console.log('🔑 Auth Store - Starting user sign in');
    set({ isLoading: true });

    try {
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });

      if (error) {
        console.error('❌ Auth Store - Sign in error:', error);
        return { success: false, error: error.message };
      }

      console.log('✅ Auth Store - User signed in successfully');
      return { success: true };
    } catch (error) {
      console.error('❌ Auth Store - Sign in unexpected error:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Sign in failed' 
      };
    } finally {
      set({ isLoading: false });
    }
  },

  // Sign out current user
  signOut: async () => {
    console.log('👋 Auth Store - Starting user sign out');
    set({ isLoading: true });

    try {
      const { error } = await supabase.auth.signOut();
      
      if (error) {
        console.error('❌ Auth Store - Sign out error:', error);
        throw error;
      }

      console.log('✅ Auth Store - User signed out successfully');
    } catch (error) {
      console.error('❌ Auth Store - Sign out unexpected error:', error);
    } finally {
      set({ isLoading: false });
    }
  },

  // Update user profile
  updateProfile: async (updates) => {
    console.log('📝 Auth Store - Updating user profile');
    const { user } = get();
    
    if (!user) {
      return { success: false, error: 'No user logged in' };
    }

    set({ isLoading: true });

    try {
      const { data, error } = await supabase
        .from('users')
        .update(updates)
        .eq('id', user.id)
        .select()
        .single();

      if (error) {
        console.error('❌ Auth Store - Profile update error:', error);
        return { success: false, error: error.message };
      }

      console.log('✅ Auth Store - Profile updated successfully');
      set({ profile: data });
      return { success: true };
    } catch (error) {
      console.error('❌ Auth Store - Profile update unexpected error:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Profile update failed' 
      };
    } finally {
      set({ isLoading: false });
    }
  },

  // State setters
  setUser: (user) => set({ user }),
  setProfile: (profile) => set({ profile }),
  setSession: (session) => set({ session }),
  setLoading: (isLoading) => set({ isLoading }),
  setInitialized: (isInitialized) => set({ isInitialized }),
}));

================
File: supabase/migrations/20250101000001_auth_tables.sql
================
-- User authentication and profiles migration
-- This migration creates the users table and sets up Row Level Security (RLS) policies

-- Create users table extending auth.users
CREATE TABLE IF NOT EXISTS public.users (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  email TEXT UNIQUE NOT NULL,
  username TEXT UNIQUE,
  avatar_url TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Enable RLS on users table
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;

-- Create policies for users table
-- Users can view their own profile
CREATE POLICY "Users can view own profile" ON public.users 
FOR SELECT 
TO authenticated 
USING (auth.uid() = id);

-- Users can insert their own profile (for registration)
CREATE POLICY "Users can insert own profile" ON public.users 
FOR INSERT 
TO authenticated 
WITH CHECK (auth.uid() = id);

-- Users can update their own profile
CREATE POLICY "Users can update own profile" ON public.users 
FOR UPDATE 
TO authenticated 
USING (auth.uid() = id) 
WITH CHECK (auth.uid() = id);

-- Users can view other users profiles (needed for groups)
CREATE POLICY "Users can view other profiles" ON public.users 
FOR SELECT 
TO authenticated 
USING (true);

-- Create updated_at trigger function
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger for updated_at
CREATE TRIGGER users_updated_at
  BEFORE UPDATE ON public.users
  FOR EACH ROW
  EXECUTE FUNCTION public.handle_updated_at();

-- Function to handle user creation
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.users (id, email)
  VALUES (NEW.id, NEW.email);
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger to automatically create user profile on auth.users insert
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW
  EXECUTE FUNCTION public.handle_new_user();

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS users_email_idx ON public.users(email);
CREATE INDEX IF NOT EXISTS users_username_idx ON public.users(username);
CREATE INDEX IF NOT EXISTS users_created_at_idx ON public.users(created_at);

-- Grant permissions
GRANT SELECT, INSERT, UPDATE ON public.users TO authenticated;
GRANT SELECT ON public.users TO anon;

================
File: supabase/migrations/20250101000002_setup_storage.sql
================
-- Storage setup migration
-- This migration creates the photos storage bucket

-- Create the photos bucket if it doesn't exist
INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
VALUES (
  'photos',
  'photos',
  true,
  52428800, -- 50MB limit
  ARRAY['image/jpeg', 'image/png', 'image/webp', 'image/gif']::text[]
)
ON CONFLICT (id) DO NOTHING;

================
File: supabase/migrations/20250101000003_create_photos_table.sql
================
-- Photos table migration
-- This migration creates the photos table for storing photo metadata

-- Create photos table
CREATE TABLE IF NOT EXISTS public.photos (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  file_name TEXT NOT NULL,
  file_path TEXT NOT NULL UNIQUE,
  file_size BIGINT NOT NULL DEFAULT 0,
  mime_type TEXT NOT NULL DEFAULT 'image/jpeg',
  width INTEGER,
  height INTEGER,
  taken_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  uploaded_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  storage_bucket TEXT NOT NULL DEFAULT 'photos',
  public_url TEXT,
  
  -- Indexes for performance
  CONSTRAINT photos_file_path_unique UNIQUE(file_path),
  CONSTRAINT photos_file_size_positive CHECK (file_size >= 0)
);

-- Create indexes
CREATE INDEX IF NOT EXISTS photos_user_id_idx ON public.photos(user_id);
CREATE INDEX IF NOT EXISTS photos_uploaded_at_idx ON public.photos(uploaded_at);
CREATE INDEX IF NOT EXISTS photos_taken_at_idx ON public.photos(taken_at);
CREATE INDEX IF NOT EXISTS photos_storage_bucket_idx ON public.photos(storage_bucket);

-- Enable RLS
ALTER TABLE public.photos ENABLE ROW LEVEL SECURITY;

-- Create RLS policies for photos table

-- Allow users to view all photos (since this is a social sharing app)
CREATE POLICY "Photos are viewable by everyone" ON public.photos
FOR SELECT 
TO public
USING (true);

-- Allow authenticated users to upload photos
CREATE POLICY "Users can upload photos" ON public.photos
FOR INSERT 
TO authenticated
WITH CHECK (true);

-- Allow users to update their own photos
CREATE POLICY "Users can update own photos" ON public.photos
FOR UPDATE 
TO authenticated
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

-- Allow users to delete their own photos
CREATE POLICY "Users can delete own photos" ON public.photos
FOR DELETE 
TO authenticated
USING (auth.uid() = user_id);

-- Grant permissions
GRANT SELECT ON public.photos TO anon, authenticated;
GRANT INSERT, UPDATE, DELETE ON public.photos TO authenticated;

================
File: supabase/migrations/20250101000004_storage_policies.sql
================
-- Storage policies migration
-- This migration creates the storage policies for the photos bucket

-- Drop existing policies if they exist
DROP POLICY IF EXISTS "Photos are publicly viewable" ON storage.objects;
DROP POLICY IF EXISTS "Users can upload photos" ON storage.objects;
DROP POLICY IF EXISTS "Users can update own photos" ON storage.objects;  
DROP POLICY IF EXISTS "Users can delete own photos" ON storage.objects;
DROP POLICY IF EXISTS "Authenticated users can upload to photos bucket" ON storage.objects;

-- Create storage policies for photos bucket

-- Allow public read access to photos (since bucket is public)
CREATE POLICY "Photos are publicly viewable" ON storage.objects
FOR SELECT 
TO public
USING (bucket_id = 'photos');

-- Allow authenticated users to upload photos (simplified policy)
CREATE POLICY "Authenticated users can upload to photos bucket" ON storage.objects
FOR INSERT 
TO authenticated
WITH CHECK (bucket_id = 'photos');

================
File: supabase/migrations/20250102000004_create_ai_feedback_table.sql
================
-- AI Feedback table migration
-- This migration creates the ai_feedback table for AI-generated artwork feedback

-- Create ai_feedback table
CREATE TABLE IF NOT EXISTS public.ai_feedback (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  post_id UUID NOT NULL REFERENCES public.posts(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  feedback_text TEXT NOT NULL,
  feedback_status TEXT DEFAULT 'completed' CHECK (feedback_status IN ('pending', 'processing', 'completed', 'failed')),
  processing_time_ms INTEGER, -- Track how long AI processing took
  ai_model TEXT DEFAULT 'gpt-4v', -- Track which AI model was used
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  
  -- Constraints
  CONSTRAINT ai_feedback_text_not_empty CHECK (length(trim(feedback_text)) > 0),
  CONSTRAINT ai_feedback_unique_per_post UNIQUE(post_id) -- Only one AI feedback per post
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS ai_feedback_post_id_idx ON public.ai_feedback(post_id);
CREATE INDEX IF NOT EXISTS ai_feedback_user_id_idx ON public.ai_feedback(user_id);
CREATE INDEX IF NOT EXISTS ai_feedback_status_idx ON public.ai_feedback(feedback_status);
CREATE INDEX IF NOT EXISTS ai_feedback_created_at_idx ON public.ai_feedback(created_at);

-- Enable RLS on ai_feedback table
ALTER TABLE public.ai_feedback ENABLE ROW LEVEL SECURITY;

-- RLS policies for ai_feedback

-- Users can view AI feedback on their own posts
CREATE POLICY "Users can view AI feedback on own posts" ON public.ai_feedback
FOR SELECT 
TO authenticated
USING (
  user_id = auth.uid()
  OR post_id IN (
    SELECT id FROM public.posts WHERE user_id = auth.uid()
  )
);

-- Users can request AI feedback on their own posts
CREATE POLICY "Users can request AI feedback on own posts" ON public.ai_feedback
FOR INSERT 
TO authenticated
WITH CHECK (
  auth.uid() = user_id
  AND post_id IN (
    SELECT id FROM public.posts 
    WHERE user_id = auth.uid() AND is_expired = false
  )
);

-- Users can update AI feedback status on their requests
CREATE POLICY "Users can update own AI feedback" ON public.ai_feedback
FOR UPDATE 
TO authenticated
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

-- Users can delete AI feedback on their posts
CREATE POLICY "Users can delete own AI feedback" ON public.ai_feedback
FOR DELETE 
TO authenticated
USING (
  user_id = auth.uid()
  OR post_id IN (
    SELECT id FROM public.posts WHERE user_id = auth.uid()
  )
);

-- Add updated_at trigger
CREATE TRIGGER ai_feedback_updated_at
  BEFORE UPDATE ON public.ai_feedback
  FOR EACH ROW
  EXECUTE FUNCTION public.handle_updated_at();

-- Function to validate AI feedback request
CREATE OR REPLACE FUNCTION public.validate_ai_feedback_request()
RETURNS TRIGGER AS $$
DECLARE
  post_exists BOOLEAN;
  post_expired BOOLEAN;
  post_owner UUID;
BEGIN
  -- Check if post exists and get details
  SELECT 
    (id IS NOT NULL),
    is_expired,
    user_id
  INTO post_exists, post_expired, post_owner
  FROM public.posts 
  WHERE id = NEW.post_id;
  
  -- Validate post exists
  IF NOT post_exists THEN
    RAISE EXCEPTION 'Post does not exist';
  END IF;
  
  -- Validate post is not expired
  IF post_expired THEN
    RAISE EXCEPTION 'Cannot request AI feedback on expired posts';
  END IF;
  
  -- Validate user owns the post
  IF post_owner != NEW.user_id THEN
    RAISE EXCEPTION 'AI feedback can only be requested by post owner';
  END IF;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger for AI feedback validation
CREATE TRIGGER ai_feedback_validate_request
  BEFORE INSERT ON public.ai_feedback
  FOR EACH ROW
  EXECUTE FUNCTION public.validate_ai_feedback_request();

-- Function to check if AI feedback exists for a post
CREATE OR REPLACE FUNCTION public.has_ai_feedback(post_uuid UUID)
RETURNS BOOLEAN AS $$
DECLARE
  feedback_exists BOOLEAN;
BEGIN
  SELECT EXISTS(
    SELECT 1 FROM public.ai_feedback 
    WHERE post_id = post_uuid
  ) INTO feedback_exists;
  
  RETURN COALESCE(feedback_exists, false);
END;
$$ LANGUAGE plpgsql;

-- Function to get AI feedback for a post
CREATE OR REPLACE FUNCTION public.get_ai_feedback(post_uuid UUID)
RETURNS TABLE(
  id UUID,
  feedback_text TEXT,
  feedback_status TEXT,
  ai_model TEXT,
  processing_time_ms INTEGER,
  created_at TIMESTAMP WITH TIME ZONE
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    af.id,
    af.feedback_text,
    af.feedback_status,
    af.ai_model,
    af.processing_time_ms,
    af.created_at
  FROM public.ai_feedback af
  WHERE af.post_id = post_uuid;
END;
$$ LANGUAGE plpgsql;

-- Create a view for AI feedback with post information
CREATE OR REPLACE VIEW public.ai_feedback_with_posts AS
SELECT 
  af.id,
  af.post_id,
  af.user_id,
  af.feedback_text,
  af.feedback_status,
  af.ai_model,
  af.processing_time_ms,
  af.created_at,
  af.updated_at,
  p.image_url,
  p.title as post_title,
  p.description as post_description,
  u.username
FROM public.ai_feedback af
INNER JOIN public.posts p ON af.post_id = p.id
INNER JOIN public.users u ON af.user_id = u.id;

-- Grant permissions
GRANT SELECT, INSERT, UPDATE, DELETE ON public.ai_feedback TO authenticated;
GRANT SELECT ON public.ai_feedback_with_posts TO authenticated;

================
File: supabase/.gitignore
================
# Supabase
.branches
.temp

# dotenvx
.env.keys
.env.local
.env.*.local

================
File: supabase/config.toml
================
# For detailed configuration reference documentation, visit:
# https://supabase.com/docs/guides/local-development/cli/config
# A string used to distinguish different Supabase projects on the same host. Defaults to the
# working directory name when running `supabase init`.
project_id = "SnapClone"

[api]
enabled = true
# Port to use for the API URL.
port = 54321
# Schemas to expose in your API. Tables, views and stored procedures in this schema will get API
# endpoints. `public` and `graphql_public` schemas are included by default.
schemas = ["public", "graphql_public"]
# Extra schemas to add to the search_path of every request.
extra_search_path = ["public", "extensions"]
# The maximum number of rows returns from a view, table, or stored procedure. Limits payload size
# for accidental or malicious requests.
max_rows = 1000

[api.tls]
# Enable HTTPS endpoints locally using a self-signed certificate.
enabled = false

[db]
# Port to use for the local database URL.
port = 54322
# Port used by db diff command to initialize the shadow database.
shadow_port = 54320
# The database major version to use. This has to be the same as your remote database's. Run `SHOW
# server_version;` on the remote database to check.
major_version = 17

[db.pooler]
enabled = false
# Port to use for the local connection pooler.
port = 54329
# Specifies when a server connection can be reused by other clients.
# Configure one of the supported pooler modes: `transaction`, `session`.
pool_mode = "transaction"
# How many server connections to allow per user/database pair.
default_pool_size = 20
# Maximum number of client connections allowed.
max_client_conn = 100

# [db.vault]
# secret_key = "env(SECRET_VALUE)"

[db.migrations]
# If disabled, migrations will be skipped during a db push or reset.
enabled = true
# Specifies an ordered list of schema files that describe your database.
# Supports glob patterns relative to supabase directory: "./schemas/*.sql"
schema_paths = []

[db.seed]
# If enabled, seeds the database after migrations during a db reset.
enabled = true
# Specifies an ordered list of seed files to load during db reset.
# Supports glob patterns relative to supabase directory: "./seeds/*.sql"
sql_paths = ["./seed.sql"]

[realtime]
enabled = true
# Bind realtime via either IPv4 or IPv6. (default: IPv4)
# ip_version = "IPv6"
# The maximum length in bytes of HTTP request headers. (default: 4096)
# max_header_length = 4096

[studio]
enabled = true
# Port to use for Supabase Studio.
port = 54323
# External URL of the API server that frontend connects to.
api_url = "http://127.0.0.1"
# OpenAI API Key to use for Supabase AI in the Supabase Studio.
openai_api_key = "env(OPENAI_API_KEY)"

# Email testing server. Emails sent with the local dev setup are not actually sent - rather, they
# are monitored, and you can view the emails that would have been sent from the web interface.
[inbucket]
enabled = true
# Port to use for the email testing server web interface.
port = 54324
# Uncomment to expose additional ports for testing user applications that send emails.
# smtp_port = 54325
# pop3_port = 54326
# admin_email = "admin@email.com"
# sender_name = "Admin"

[storage]
enabled = true
# The maximum file size allowed (e.g. "5MB", "500KB").
file_size_limit = "50MiB"

# Image transformation API is available to Supabase Pro plan.
# [storage.image_transformation]
# enabled = true

# Uncomment to configure local storage buckets
# [storage.buckets.images]
# public = false
# file_size_limit = "50MiB"
# allowed_mime_types = ["image/png", "image/jpeg"]
# objects_path = "./images"

[auth]
enabled = true
# The base URL of your website. Used as an allow-list for redirects and for constructing URLs used
# in emails.
site_url = "http://127.0.0.1:3000"
# A list of *exact* URLs that auth providers are permitted to redirect to post authentication.
additional_redirect_urls = ["https://127.0.0.1:3000"]
# How long tokens are valid for, in seconds. Defaults to 3600 (1 hour), maximum 604,800 (1 week).
jwt_expiry = 3600
# If disabled, the refresh token will never expire.
enable_refresh_token_rotation = true
# Allows refresh tokens to be reused after expiry, up to the specified interval in seconds.
# Requires enable_refresh_token_rotation = true.
refresh_token_reuse_interval = 10
# Allow/disallow new user signups to your project.
enable_signup = true
# Allow/disallow anonymous sign-ins to your project.
enable_anonymous_sign_ins = false
# Allow/disallow testing manual linking of accounts
enable_manual_linking = false
# Passwords shorter than this value will be rejected as weak. Minimum 6, recommended 8 or more.
minimum_password_length = 6
# Passwords that do not meet the following requirements will be rejected as weak. Supported values
# are: `letters_digits`, `lower_upper_letters_digits`, `lower_upper_letters_digits_symbols`
password_requirements = ""

[auth.rate_limit]
# Number of emails that can be sent per hour. Requires auth.email.smtp to be enabled.
email_sent = 2
# Number of SMS messages that can be sent per hour. Requires auth.sms to be enabled.
sms_sent = 30
# Number of anonymous sign-ins that can be made per hour per IP address. Requires enable_anonymous_sign_ins = true.
anonymous_users = 30
# Number of sessions that can be refreshed in a 5 minute interval per IP address.
token_refresh = 150
# Number of sign up and sign-in requests that can be made in a 5 minute interval per IP address (excludes anonymous users).
sign_in_sign_ups = 30
# Number of OTP / Magic link verifications that can be made in a 5 minute interval per IP address.
token_verifications = 30
# Number of Web3 logins that can be made in a 5 minute interval per IP address.
web3 = 30

# Configure one of the supported captcha providers: `hcaptcha`, `turnstile`.
# [auth.captcha]
# enabled = true
# provider = "hcaptcha"
# secret = ""

[auth.email]
# Allow/disallow new user signups via email to your project.
enable_signup = true
# If enabled, a user will be required to confirm any email change on both the old, and new email
# addresses. If disabled, only the new email is required to confirm.
double_confirm_changes = true
# If enabled, users need to confirm their email address before signing in.
enable_confirmations = false
# If enabled, users will need to reauthenticate or have logged in recently to change their password.
secure_password_change = false
# Controls the minimum amount of time that must pass before sending another signup confirmation or password reset email.
max_frequency = "1s"
# Number of characters used in the email OTP.
otp_length = 6
# Number of seconds before the email OTP expires (defaults to 1 hour).
otp_expiry = 3600

# Use a production-ready SMTP server
# [auth.email.smtp]
# enabled = true
# host = "smtp.sendgrid.net"
# port = 587
# user = "apikey"
# pass = "env(SENDGRID_API_KEY)"
# admin_email = "admin@email.com"
# sender_name = "Admin"

# Uncomment to customize email template
# [auth.email.template.invite]
# subject = "You have been invited"
# content_path = "./supabase/templates/invite.html"

[auth.sms]
# Allow/disallow new user signups via SMS to your project.
enable_signup = false
# If enabled, users need to confirm their phone number before signing in.
enable_confirmations = false
# Template for sending OTP to users
template = "Your code is {{ .Code }}"
# Controls the minimum amount of time that must pass before sending another sms otp.
max_frequency = "5s"

# Use pre-defined map of phone number to OTP for testing.
# [auth.sms.test_otp]
# 4152127777 = "123456"

# Configure logged in session timeouts.
# [auth.sessions]
# Force log out after the specified duration.
# timebox = "24h"
# Force log out if the user has been inactive longer than the specified duration.
# inactivity_timeout = "8h"

# This hook runs before a token is issued and allows you to add additional claims based on the authentication method used.
# [auth.hook.custom_access_token]
# enabled = true
# uri = "pg-functions://<database>/<schema>/<hook_name>"

# Configure one of the supported SMS providers: `twilio`, `twilio_verify`, `messagebird`, `textlocal`, `vonage`.
[auth.sms.twilio]
enabled = false
account_sid = ""
message_service_sid = ""
# DO NOT commit your Twilio auth token to git. Use environment variable substitution instead:
auth_token = "env(SUPABASE_AUTH_SMS_TWILIO_AUTH_TOKEN)"

# Multi-factor-authentication is available to Supabase Pro plan.
[auth.mfa]
# Control how many MFA factors can be enrolled at once per user.
max_enrolled_factors = 10

# Control MFA via App Authenticator (TOTP)
[auth.mfa.totp]
enroll_enabled = false
verify_enabled = false

# Configure MFA via Phone Messaging
[auth.mfa.phone]
enroll_enabled = false
verify_enabled = false
otp_length = 6
template = "Your code is {{ .Code }}"
max_frequency = "5s"

# Configure MFA via WebAuthn
# [auth.mfa.web_authn]
# enroll_enabled = true
# verify_enabled = true

# Use an external OAuth provider. The full list of providers are: `apple`, `azure`, `bitbucket`,
# `discord`, `facebook`, `github`, `gitlab`, `google`, `keycloak`, `linkedin_oidc`, `notion`, `twitch`,
# `twitter`, `slack`, `spotify`, `workos`, `zoom`.
[auth.external.apple]
enabled = false
client_id = ""
# DO NOT commit your OAuth provider secret to git. Use environment variable substitution instead:
secret = "env(SUPABASE_AUTH_EXTERNAL_APPLE_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = ""
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = ""
# If enabled, the nonce check will be skipped. Required for local sign in with Google auth.
skip_nonce_check = false

# Allow Solana wallet holders to sign in to your project via the Sign in with Solana (SIWS, EIP-4361) standard.
# You can configure "web3" rate limit in the [auth.rate_limit] section and set up [auth.captcha] if self-hosting.
[auth.web3.solana]
enabled = false

# Use Firebase Auth as a third-party provider alongside Supabase Auth.
[auth.third_party.firebase]
enabled = false
# project_id = "my-firebase-project"

# Use Auth0 as a third-party provider alongside Supabase Auth.
[auth.third_party.auth0]
enabled = false
# tenant = "my-auth0-tenant"
# tenant_region = "us"

# Use AWS Cognito (Amplify) as a third-party provider alongside Supabase Auth.
[auth.third_party.aws_cognito]
enabled = false
# user_pool_id = "my-user-pool-id"
# user_pool_region = "us-east-1"

# Use Clerk as a third-party provider alongside Supabase Auth.
[auth.third_party.clerk]
enabled = false
# Obtain from https://clerk.com/setup/supabase
# domain = "example.clerk.accounts.dev"

[edge_runtime]
enabled = true
# Configure one of the supported request policies: `oneshot`, `per_worker`.
# Use `oneshot` for hot reload, or `per_worker` for load testing.
policy = "oneshot"
# Port to attach the Chrome inspector for debugging edge functions.
inspector_port = 8083
# The Deno major version to use.
deno_version = 1

# [edge_runtime.secrets]
# secret_key = "env(SECRET_VALUE)"

[analytics]
enabled = true
port = 54327
# Configure one of the supported backends: `postgres`, `bigquery`.
backend = "postgres"

# Experimental features may be deprecated any time
[experimental]
# Configures Postgres storage engine to use OrioleDB (S3)
orioledb_version = ""
# Configures S3 bucket URL, eg. <bucket_name>.s3-<region>.amazonaws.com
s3_host = "env(S3_HOST)"
# Configures S3 bucket region, eg. us-east-1
s3_region = "env(S3_REGION)"
# Configures AWS_ACCESS_KEY_ID for S3 bucket
s3_access_key = "env(S3_ACCESS_KEY)"
# Configures AWS_SECRET_ACCESS_KEY for S3 bucket
s3_secret_key = "env(S3_SECRET_KEY)"

================
File: tasks/old-prd-veo-creative-image-messenger.md
================
# VEO Creative Image Messenger
## Product Requirements Document

---

## Introduction/Overview

VEO Creative Image Messenger is an ephemeral messaging platform designed for Gen Z and millennial users who want to connect through creative, AI-enhanced conversations. The core innovation combines real-time text-to-image AI generation with ephemeral messaging - users create text prompts that transform into AI-generated images using Google's Imagen-4, which are then shared in group chats and automatically deleted after 24 hours.

**Problem Statement**: Traditional messaging apps rely on static text, photos, and emojis. Users want more creative, surprising ways to express themselves digitally without the permanence that creates social anxiety.

**Solution**: An AI-first messaging platform where creativity meets spontaneity - users send text prompts that become AI-generated images, creating unexpected, entertaining conversations that disappear after 24 hours.

---

## Goals

1. **Primary Goal**: Create a functional prototype demonstrating AI-powered ephemeral messaging with seamless text-to-image generation
2. **User Engagement**: Enable users to express creativity through AI-generated content in group conversations
3. **Technical Validation**: Prove the viability of real-time AI image generation within messaging workflows
4. **User Experience**: Deliver an intuitive, mobile-first interface that makes AI image creation accessible to non-technical users
5. **Performance**: Achieve consistent image generation within 15 seconds with >95% success rate

---

## User Stories

### Authentication & Onboarding
- **US-1**: As a new user, I want to register with email and password so I can create my account and start using. If email is to hard to set up suggest other options.
- **US-2**: As a returning user, I want to login with my credentials so I can access my groups and message history
- **US-3**: As a user, I want a simple onboarding flow so I understand how to create AI images from text prompts

### Group Management
- **US-4**: As a user, I want to create a new group so I can start messaging with friends
- **US-5**: As a user, I want to join existing groups so I can participate in ongoing conversations
- **US-6**: As a user, I want to see my active groups so I can choose where to send my AI-generated images

### AI Image Creation & Messaging
- **US-7**: As a user, I want to type a custom text prompt so I can generate exactly what I'm imagining
- **US-8**: As a user, I want to select from categorized prompt suggestions (style, mood, subject) so I can easily create interesting images
- **US-9**: As a user, I want to combine multiple prompt categories so I can create more complex, personalized images
- **US-10**: As a user, I want to see real-time processing status so I know when my AI image will be ready
- **US-11**: As a user, I want to send my generated image to a group so friends can see my creative expression
- **US-12**: As a user, I want to view AI-generated images from other group members so I can enjoy the creative conversation

### Ephemeral Experience
- **US-13**: As a user, I want my images to automatically delete after 24 hours so conversations stay spontaneous and anxiety-free
- **US-14**: As a user, I want to see a countdown timer on images so I know when they'll disappear

---

## Functional Requirements

### Authentication System
1. The system must provide email/password registration with basic validation. 
2. The system must provide secure login/logout functionality via Supabase Auth
3. The system must maintain user session state across app restarts
4. The system must allow users to create a simple profile with username and optional avatar

### Group Management
5. The system must allow users to create new groups with custom names
6. The system must enable users to join groups via invite links or group codes
7. The system must display a list of user's active groups
8. The system must support flexible group sizes (starting with small groups for testing)

### AI Image Generation
9. The system must provide a text input interface for custom prompts with character limit (500 characters)
10. The system must offer categorized prompt suggestions:
    - **Style-based**: photorealistic, cartoon style, oil painting, anime, watercolor
    - **Mood-based**: epic fantasy, cozy atmosphere, dramatic lighting, mysterious, cheerful
    - **Subject-based**: cute animals, space scenes, food photography, landscapes, portraits
11. The system must allow users to combine multiple categories in a single prompt
12. The system must integrate with Replicate API using Google's Imagen-4 model
13. The system must process text-to-image generation via Supabase Edge Functions
14. The system must provide real-time status updates during processing (queued, processing, complete, failed)
15. The system must deliver generated images within 15 seconds under normal conditions

### Messaging & Sharing
16. The system must send completed AI-generated images to selected groups
17. The system must display images in group chat interface with sender information
18. The system must show image creation timestamp and countdown to deletion
19. The system must support image viewing in full-screen mode

### Ephemeral Content Management
20. The system must automatically delete images exactly 24 hours after creation
21. The system must run cleanup processes to remove expired content from storage
22. The system must show visual countdown indicators on images approaching deletion

### Error Handling & Reliability
23. The system must implement retry mechanism for failed image generation (up to 3 attempts)
24. The system must provide fallback error messages when AI generation fails permanently
25. The system must handle network connectivity issues gracefully
26. The system must cache user data locally for offline viewing of recent messages

---

## Non-Goals (Out of Scope)

- **Content Moderation**: No automated content filtering or moderation systems
- **Advanced Group Features**: No group admin roles, member permissions, or complex group settings
- **Video Generation**: Focus only on static image generation (not video)
- **Direct Messaging**: Only group messaging, no 1-on-1 chats
- **Advanced Analytics**: No user behavior tracking or detailed analytics
- **Monetization Features**: No paid features, subscriptions, or in-app purchases
- **Desktop/Web Versions**: Mobile-only focus for prototype phase
- **Advanced AI Models**: Only Google Imagen-4, no model selection or custom training

---

## Design Considerations

### User Interface Requirements
- **Mobile-First Design**: Optimized for iOS with cross-platform compatibility
- **Playful, Creative Aesthetic**: UI should reflect the fun, experimental nature of AI art creation
- **Intuitive Prompt Building**: Simple, guided interface for combining categories and custom text
- **Clear Status Communication**: Visual indicators for AI processing states (loading, progress, completion)
- **Ephemeral Visual Language**: Design elements that emphasize temporary nature of content

### Key Screen Flows
1. **Authentication Flow**: Register → Login → Simple Profile Setup
2. **Group Creation Flow**: Groups List → Create Group → Invite/Share Group Code
3. **AI Image Creation Flow**: Select Group → Build Prompt (Categories + Custom Text) → Generate → Review → Send
4. **Group Chat Flow**: Groups List → Select Group → View Messages → Create New Image
5. **Image Viewing Flow**: Tap Image → Full Screen → Countdown Timer → Sharing Options

### Technical UI Requirements
- React Native with Expo for cross-platform development
- NativeWind/Tailwind CSS for consistent styling
- Responsive design supporting various iOS device sizes
- Smooth animations for processing states and ephemeral countdown timers

---

## Technical Considerations

### Technology Stack
- **Frontend**: React Native + Expo SDK (cross-platform with iOS focus)
- **Backend**: Supabase (PostgreSQL, Auth, Edge Functions, Realtime, Storage)
- **AI Processing**: Replicate API with Google Imagen-4 model
- **Styling**: NativeWind/Tailwind CSS
- **State Management**: Zustand for app state management

### Database Schema
```sql
-- User authentication and profiles
users (
  id UUID PRIMARY KEY,
  email TEXT UNIQUE NOT NULL,
  username TEXT UNIQUE,
  avatar_url TEXT,
  created_at TIMESTAMP DEFAULT NOW()
);

-- Group management
groups (
  id UUID PRIMARY KEY,
  name TEXT NOT NULL,
  invite_code TEXT UNIQUE,
  created_by UUID REFERENCES users(id),
  created_at TIMESTAMP DEFAULT NOW()
);

group_members (
  group_id UUID REFERENCES groups(id),
  user_id UUID REFERENCES users(id),
  joined_at TIMESTAMP DEFAULT NOW(),
  PRIMARY KEY (group_id, user_id)
);

-- AI prompt categories and templates
prompt_categories (
  id UUID PRIMARY KEY,
  name TEXT NOT NULL,
  type TEXT NOT NULL, -- 'style', 'mood', 'subject'
  description TEXT,
  popularity_score INTEGER DEFAULT 0
);

-- Generated images and messages
ai_messages (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  group_id UUID REFERENCES groups(id),
  original_prompt TEXT NOT NULL,
  selected_categories UUID[],
  generated_image_url TEXT,
  processing_status TEXT DEFAULT 'pending', -- 'pending', 'processing', 'completed', 'failed'
  processing_started_at TIMESTAMP,
  processing_completed_at TIMESTAMP,
  created_at TIMESTAMP DEFAULT NOW(),
  expires_at TIMESTAMP DEFAULT (NOW() + INTERVAL '24 hours'),
  replicate_prediction_id TEXT
);
```

### AI Integration Architecture
- **Supabase Edge Function**: Handles Replicate API communication
- **Realtime Updates**: WebSocket connection for processing status
- **Image Storage**: Supabase Storage with automatic cleanup
- **Error Handling**: Exponential backoff retry logic

### Performance Requirements
- Image generation: 5-15 seconds typical (Google Imagen-4 performance)
- Real-time updates: <1 second latency for status changes
- Image loading: <3 seconds for generated images
- App startup: <2 seconds on iOS devices

---

## Error Handling Recommendations

### Image Generation Failures
1. **Retry Strategy**: Implement automatic retry with exponential backoff (3 attempts max)
2. **Fallback Messages**: Clear user communication when generation fails permanently
3. **Partial Success Handling**: Allow users to modify prompts and try again
4. **Network Resilience**: Queue generation requests when offline, process when reconnected

### Specific Error Scenarios
- **Prompt Too Complex**: Suggest simplifying prompt or breaking into multiple images
- **API Rate Limits**: Queue requests and notify user of expected wait time
- **Content Policy Violations**: Generic "unable to generate" message with suggestion to modify prompt
- **Service Unavailable**: Temporary service message with retry option

### User Experience During Errors
- Clear error messages without technical jargon
- Actionable next steps for users
- Option to save prompts and retry later
- Graceful degradation when AI service is unavailable

---

## Success Metrics

### Technical Success Criteria
- **Generation Success Rate**: >95% of prompts successfully generate images
- **Processing Time**: Average generation time <10 seconds
- **System Uptime**: >99% availability during testing phase
- **Error Recovery**: >80% of failed generations succeed on retry

### User Experience Success Criteria
- **User Onboarding**: >80% of users complete registration and send first AI image
- **Feature Adoption**: >70% of users try prompt categories within first session
- **Engagement**: Users create average 5+ images per session
- **Retention**: >60% of users return within 48 hours for second session

### Business/Product Success Criteria
- **Core Functionality**: All 14 functional requirements fully implemented
- **Platform Stability**: App runs without crashes on target iOS devices
- **Scalability Readiness**: Architecture supports scaling to 100+ concurrent users
- **Demo Readiness**: Fully functional prototype suitable for investor/stakeholder demos

---

## Open Questions

1. **Prompt Optimization**: Should we implement prompt enhancement suggestions to improve generation success rates?
2. **Storage Costs**: With 24-hour ephemeral content, what's the optimal storage cleanup frequency?
5. **Group Discovery**: Do we need any mechanism for users to discover and join public groups?
6. **Image Quality Settings**: Should users have options for generation speed vs. quality trade-offs?
7. **Notification Strategy**: What notifications should users receive for new AI images in their groups?

---

## Implementation Priority

### Phase 1 
- User authentication and basic profiles
- Simple group creation and joining
- Basic text prompt input and AI generation
- Core messaging interface

### Phase 2 
- Prompt categories and suggestions
- Real-time processing status
- Ephemeral content deletion
- Error handling and retry logic

### Phase 3 
- UI/UX refinements
- Performance optimization
- Comprehensive testing
- Demo preparation

================
File: tasks/old-tasks-prd-veo-creative-image-messenger.md
================
# VEO Creative Image Messenger - Task List
Based on PRD: `prd-veo-creative-image-messenger.md`

## Relevant Files

- `app/(auth)/login.tsx` - Login screen with email/password authentication
- `app/(auth)/register.tsx` - User registration screen with validation
- `app/(auth)/profile-setup.tsx` - Initial profile creation screen
- `app/(auth)/_layout.tsx` - Auth stack navigation layout
- `app/(tabs)/groups.tsx` - Groups list and management screen
- `app/(tabs)/create-group.tsx` - Group creation interface
- `app/group/[id].tsx` - Individual group chat screen
- `app/create-image.tsx` - AI image generation interface
- `components/auth/AuthForm.tsx` - Reusable authentication form components
- `components/groups/GroupCard.tsx` - Group display component
- `components/groups/GroupMembersList.tsx` - Group members management
- `components/ai/PromptInput.tsx` - Text prompt input component
- `components/ai/CategorySelector.tsx` - Prompt category selection
- `components/ai/ProcessingStatus.tsx` - Real-time processing indicator
- `components/messaging/MessageBubble.tsx` - Chat message display component
- `components/messaging/ImageMessage.tsx` - AI-generated image message component
- `components/messaging/CountdownTimer.tsx` - 24-hour deletion countdown
- `lib/auth.ts` - Authentication utilities and session management
- `lib/groups.ts` - Group management functions
- `lib/ai-generation.ts` - AI image generation service integration
- `lib/supabase-client.ts` - Enhanced Supabase client configuration
- `lib/replicate.ts` - Replicate API integration utilities
- `lib/storage.ts` - Image storage and cleanup functions
- `lib/realtime.ts` - Real-time updates handling
- `store/authStore.ts` - Zustand auth state management
- `store/groupsStore.ts` - Zustand groups state management
- `store/messagesStore.ts` - Zustand messages state management
- `supabase/functions/generate-image/index.ts` - Edge function for AI processing
- `supabase/functions/cleanup-expired/index.ts` - Automated content cleanup
- `supabase/migrations/20250101000001_auth_tables.sql` - User authentication tables
- `supabase/migrations/20250101000002_groups_tables.sql` - Group management tables
- `supabase/migrations/20250101000003_messages_tables.sql` - AI messages and content tables
- `supabase/migrations/20250101000004_prompt_categories.sql` - Prompt categories and templates

### Notes

- All auth screens should be placed in `app/(auth)/` directory for proper navigation flow
- Group-related screens use both tabs navigation and dynamic routing for individual groups
- AI generation components are modular and reusable across different screens
- Supabase Edge Functions handle server-side AI processing to keep API keys secure
- State management with Zustand provides reactive updates across the app
- Database migrations follow timestamp naming convention for proper ordering
- Real-time functionality uses Supabase Realtime for instant status updates

## Tasks

- [x] 1.0 Authentication & User Management System
  - [x] 1.1 Configure Supabase Auth settings and policies in Supabase dashboard
  - [x] 1.2 Create auth navigation stack with login/register/profile-setup screens
  - [x] 1.3 Build reusable AuthForm component with email/password validation
  - [x] 1.4 Implement user registration with email verification and error handling
  - [x] 1.5 Create login functionality with session persistence
  - [x] 1.6 Build profile setup screen for username and optional avatar
  - [x] 1.7 Set up Zustand auth store for global authentication state
  - [x] 1.8 Implement automatic session restoration on app launch
  - [x] 1.9 Create user database migration and RLS policies

- [ ] 2.0 Group Management & Navigation
  - [ ] 2.1 Create groups database migration with proper relationships
  - [ ] 2.2 Build groups list screen showing user's active groups
  - [ ] 2.3 Implement group creation screen with name input and invite code generation
  - [ ] 2.4 Create group joining functionality via invite codes or links
  - [ ] 2.5 Build GroupCard component for consistent group display
  - [ ] 2.6 Set up dynamic routing for individual group screens
  - [ ] 2.7 Implement group members management and display
  - [ ] 2.8 Create Zustand groups store for state management
  - [ ] 2.9 Add RLS policies for secure group access control

- [ ] 3.0 AI Image Generation & Processing Pipeline
  - [ ] 3.1 Set up Replicate API account and obtain API keys
  - [ ] 3.2 Create prompt categories database migration with seed data
  - [ ] 3.3 Build PromptInput component with character limit and validation
  - [ ] 3.4 Create CategorySelector component for style/mood/subject categories
  - [ ] 3.5 Implement category combination logic and prompt building
  - [ ] 3.6 Create Supabase Edge Function for secure Replicate API integration
  - [ ] 3.7 Build ProcessingStatus component with real-time updates
  - [ ] 3.8 Set up Supabase Realtime subscriptions for processing status
  - [ ] 3.9 Implement image generation workflow from prompt to completion
  - [ ] 3.10 Create AI messages database migration with status tracking
  - [ ] 3.11 Set up image storage in Supabase Storage with proper naming

- [ ] 4.0 Messaging Interface & Ephemeral Content Management
  - [ ] 4.1 Build group chat screen layout with message list
  - [ ] 4.2 Create MessageBubble component for text and system messages
  - [ ] 4.3 Build ImageMessage component for AI-generated content display
  - [ ] 4.4 Implement full-screen image viewing with zoom capabilities
  - [ ] 4.5 Create CountdownTimer component showing time until deletion
  - [ ] 4.6 Set up 24-hour automatic deletion system via scheduled function
  - [ ] 4.7 Build expired content cleanup Edge Function
  - [ ] 4.8 Implement real-time message synchronization across group members
  - [ ] 4.9 Create messages Zustand store for chat state management
  - [ ] 4.10 Add visual indicators for ephemeral content lifecycle

- [ ] 5.0 Error Handling & System Reliability
  - [ ] 5.1 Implement retry mechanism for failed AI generation (3 attempts max)
  - [ ] 5.2 Create comprehensive error handling for network connectivity issues
  - [ ] 5.3 Build fallback UI states for when AI generation fails permanently
  - [ ] 5.4 Set up offline data caching for recent messages and groups
  - [ ] 5.5 Implement graceful degradation when Replicate API is unavailable
  - [ ] 5.6 Create user-friendly error messages without technical jargon
  - [ ] 5.7 Add loading states and progress indicators throughout the app
  - [ ] 5.8 Implement exponential backoff for API rate limiting scenarios
  - [ ] 5.9 Set up error logging and monitoring for debugging
  - [ ] 5.10 Create recovery mechanisms for partial failures and interrupted processes

================
File: eas.json
================
{
  "cli": {
    "version": ">= 16.13.0",
    "appVersionSource": "remote"
  },
  "build": {
    "development": {
      "developmentClient": true,
      "distribution": "internal"
    },
    "preview": {
      "distribution": "internal"
    },
    "production": {
      "autoIncrement": true
    }
  },
  "submit": {
    "production": {}
  }
}

================
File: eslint.config.js
================
// https://docs.expo.dev/guides/using-eslint/
const { defineConfig } = require('eslint/config');
const expoConfig = require('eslint-config-expo/flat');

module.exports = defineConfig([
  expoConfig,
  {
    ignores: ['dist/*'],
  },
]);

================
File: README.md
================
# Welcome to your Expo app 👋

This is an [Expo](https://expo.dev) project created with [`create-expo-app`](https://www.npmjs.com/package/create-expo-app).

## Get started

1. Install dependencies

   ```bash
   npm install
   ```

2. Start the app

   ```bash
   npx expo start
   ```

In the output, you'll find options to open the app in a

- [development build](https://docs.expo.dev/develop/development-builds/introduction/)
- [Android emulator](https://docs.expo.dev/workflow/android-studio-emulator/)
- [iOS simulator](https://docs.expo.dev/workflow/ios-simulator/)
- [Expo Go](https://expo.dev/go), a limited sandbox for trying out app development with Expo

You can start developing by editing the files inside the **app** directory. This project uses [file-based routing](https://docs.expo.dev/router/introduction).

## Get a fresh project

When you're ready, run:

```bash
npm run reset-project
```

This command will move the starter code to the **app-example** directory and create a blank **app** directory where you can start developing.

## Learn more

To learn more about developing your project with Expo, look at the following resources:

- [Expo documentation](https://docs.expo.dev/): Learn fundamentals, or go into advanced topics with our [guides](https://docs.expo.dev/guides).
- [Learn Expo tutorial](https://docs.expo.dev/tutorial/introduction/): Follow a step-by-step tutorial where you'll create a project that runs on Android, iOS, and the web.

## Join the community

Join our community of developers creating universal apps.

- [Expo on GitHub](https://github.com/expo/expo): View our open source platform and contribute.
- [Discord community](https://chat.expo.dev): Chat with Expo users and ask questions.

================
File: temp_refresh_demo.sql
================
-- Demo data refresh - Generated at 2025-06-26T18:32:38.493Z
-- This script deletes existing demo data and recreates it with fresh timestamps

-- Begin transaction for atomic refresh
BEGIN;

-- Log refresh start
DO $$ BEGIN RAISE NOTICE 'Starting demo data refresh at %', NOW(); END $$;

-- Delete existing demo data in correct order (respecting foreign keys)
DELETE FROM public.ai_feedback WHERE post_id IN (
  SELECT id FROM public.posts WHERE user_id IN (
    '11111111-1111-1111-1111-111111111111',
    '22222222-2222-2222-2222-222222222222', 
    '33333333-3333-3333-3333-333333333333',
    '44444444-4444-4444-4444-444444444444',
    '55555555-5555-5555-5555-555555555555'
  )
);

DELETE FROM public.comments WHERE post_id IN (
  SELECT id FROM public.posts WHERE user_id IN (
    '11111111-1111-1111-1111-111111111111',
    '22222222-2222-2222-2222-222222222222',
    '33333333-3333-3333-3333-333333333333', 
    '44444444-4444-4444-4444-444444444444',
    '55555555-5555-5555-5555-555555555555'
  )
);

DELETE FROM public.post_views WHERE post_id IN (
  SELECT id FROM public.posts WHERE user_id IN (
    '11111111-1111-1111-1111-111111111111',
    '22222222-2222-2222-2222-222222222222',
    '33333333-3333-3333-3333-333333333333',
    '44444444-4444-4444-4444-444444444444', 
    '55555555-5555-5555-5555-555555555555'
  )
);

DELETE FROM public.posts WHERE user_id IN (
  '11111111-1111-1111-1111-111111111111',
  '22222222-2222-2222-2222-222222222222',
  '33333333-3333-3333-3333-333333333333',
  '44444444-4444-4444-4444-444444444444',
  '55555555-5555-5555-5555-555555555555'
);

DELETE FROM public.class_members WHERE user_id IN (
  '11111111-1111-1111-1111-111111111111',
  '22222222-2222-2222-2222-222222222222',
  '33333333-3333-3333-3333-333333333333',
  '44444444-4444-4444-4444-444444444444',
  '55555555-5555-5555-5555-555555555555'
);

-- Note: Keep demo users in auth.users and public.users for consistency

-- Recreate demo data with fresh timestamps
DO $$
DECLARE
  demo_class_id UUID;
  maya_id UUID := '11111111-1111-1111-1111-111111111111';
  jordan_id UUID := '22222222-2222-2222-2222-222222222222';
  sam_id UUID := '33333333-3333-3333-3333-333333333333';
  casey_id UUID := '44444444-4444-4444-4444-444444444444';
  riley_id UUID := '55555555-5555-5555-5555-555555555555';
  
  -- Post IDs for consistent references
  maya_post_id UUID := '10000000-0000-0000-0000-000000000001';
  jordan_post_id UUID := '10000000-0000-0000-0000-000000000002';
  sam_post_id UUID := '10000000-0000-0000-0000-000000000003';
  casey_post_id UUID := '10000000-0000-0000-0000-000000000004';
BEGIN
  -- Get the demo class
  SELECT id INTO demo_class_id FROM public.classes WHERE join_code = 'DRAW01';
  
  IF demo_class_id IS NULL THEN
    RAISE EXCEPTION 'Demo class DRAW01 not found. Cannot refresh demo data.';
  END IF;
  
  -- Re-add demo users as class members with fresh timestamps
  INSERT INTO public.class_members (id, class_id, user_id, role, joined_at, is_active) VALUES 
    (gen_random_uuid(), demo_class_id, maya_id, 'student', NOW() - INTERVAL '2 days', true),
    (gen_random_uuid(), demo_class_id, jordan_id, 'student', NOW() - INTERVAL '2 days', true),
    (gen_random_uuid(), demo_class_id, sam_id, 'student', NOW() - INTERVAL '1 day', true),
    (gen_random_uuid(), demo_class_id, casey_id, 'student', NOW() - INTERVAL '1 day', true),
    (gen_random_uuid(), demo_class_id, riley_id, 'student', NOW() - INTERVAL '4 hours', true);
  
  -- Create fresh posts with realistic relative timing
  
  -- Maya's post (expires in 45 minutes, 3 of 5 viewers)
  INSERT INTO public.posts (
    id, user_id, class_id, image_url, image_path, frame_style, title, description,
    max_viewers, view_count, duration_minutes, expires_at, is_expired, created_at, updated_at
  ) VALUES (
    maya_post_id, maya_id, demo_class_id,
    'https://picsum.photos/800/600?random=maya1',
    'demo/maya_charcoal_portrait.jpg',
    'classic',
    'Charcoal Portrait Study',
    'Working on capturing light and shadow in this self-portrait. Still learning!',
    5, 3, 60,
    NOW() + INTERVAL '45 minutes',
    false,
    NOW() - INTERVAL '15 minutes',
    NOW() - INTERVAL '15 minutes'
  );
  
  -- Jordan's post (expires in 2 hours 20 minutes, 2 of 4 viewers)
  INSERT INTO public.posts (
    id, user_id, class_id, image_url, image_path, frame_style, title, description,
    max_viewers, view_count, duration_minutes, expires_at, is_expired, created_at, updated_at
  ) VALUES (
    jordan_post_id, jordan_id, demo_class_id,
    'https://picsum.photos/800/600?random=jordan1',
    'demo/jordan_watercolor_landscape.jpg',
    'modern',
    'Watercolor Landscape',
    'First attempt at wet-on-wet technique. The colors bled more than expected but I like it!',
    4, 2, 180,
    NOW() + INTERVAL '2 hours 20 minutes',
    false,
    NOW() - INTERVAL '40 minutes',
    NOW() - INTERVAL '40 minutes'
  );
  
  -- Sam's post (expires in 18 minutes, 5 of 5 viewers - max reached)
  INSERT INTO public.posts (
    id, user_id, class_id, image_url, image_path, frame_style, title, description,
    max_viewers, view_count, duration_minutes, expires_at, is_expired, created_at, updated_at
  ) VALUES (
    sam_post_id, sam_id, demo_class_id,
    'https://picsum.photos/800/600?random=sam1',
    'demo/sam_pencil_study.jpg',
    NULL,
    'Pencil Study - Hands',
    'Practiced drawing hands today. They are so difficult but getting better!',
    5, 5, 30,
    NOW() + INTERVAL '18 minutes',
    false,
    NOW() - INTERVAL '12 minutes',
    NOW() - INTERVAL '12 minutes'
  );
  
  -- Casey's post (expires tomorrow, 1 of 3 viewers, fresh post)
  INSERT INTO public.posts (
    id, user_id, class_id, image_url, image_path, frame_style, title, description,
    max_viewers, view_count, duration_minutes, expires_at, is_expired, created_at, updated_at
  ) VALUES (
    casey_post_id, casey_id, demo_class_id,
    'https://picsum.photos/800/600?random=casey1',
    'demo/casey_digital_sketch.jpg',
    'vintage',
    'Digital Character Sketch',
    'Exploring digital art for the first time. Really enjoying the undo button! 😊',
    3, 1, 1440, -- 24 hours
    NOW() + INTERVAL '23 hours 45 minutes',
    false,
    NOW() - INTERVAL '15 minutes',
    NOW() - INTERVAL '15 minutes'
  );
  
  -- Record fresh post views to make engagement realistic
  INSERT INTO public.post_views (post_id, user_id, viewed_at) VALUES 
    -- Maya's post viewers
    (maya_post_id, jordan_id, NOW() - INTERVAL '10 minutes'),
    (maya_post_id, sam_id, NOW() - INTERVAL '8 minutes'),
    (maya_post_id, casey_id, NOW() - INTERVAL '5 minutes'),
    
    -- Jordan's post viewers  
    (jordan_post_id, maya_id, NOW() - INTERVAL '35 minutes'),
    (jordan_post_id, sam_id, NOW() - INTERVAL '20 minutes'),
    
    -- Sam's post viewers (max reached)
    (sam_post_id, maya_id, NOW() - INTERVAL '10 minutes'),
    (sam_post_id, jordan_id, NOW() - INTERVAL '8 minutes'),
    (sam_post_id, casey_id, NOW() - INTERVAL '6 minutes'),
    (sam_post_id, riley_id, NOW() - INTERVAL '4 minutes'),
    
    -- Casey's post viewer
    (casey_post_id, riley_id, NOW() - INTERVAL '12 minutes');
  
  -- Create fresh encouraging comments
  INSERT INTO public.comments (post_id, user_id, content, created_at, updated_at) VALUES 
    -- Comments on Maya's post
    (maya_post_id, jordan_id, 'Wow, the shading on the cheekbone is really well done! You captured the light beautifully.', NOW() - INTERVAL '8 minutes', NOW() - INTERVAL '8 minutes'),
    (maya_post_id, sam_id, 'I love how you used the charcoal texture to show depth. The contrast is striking!', NOW() - INTERVAL '6 minutes', NOW() - INTERVAL '6 minutes'),
    (maya_post_id, casey_id, 'This is incredible! The way you rendered the hair texture is so realistic. Goals! ✨', NOW() - INTERVAL '3 minutes', NOW() - INTERVAL '3 minutes'),
    
    -- Comments on Jordan's post
    (jordan_post_id, maya_id, 'The color blending in the sky is absolutely gorgeous! Sometimes happy accidents make the best art.', NOW() - INTERVAL '30 minutes', NOW() - INTERVAL '30 minutes'),
    (jordan_post_id, sam_id, 'I can feel the atmosphere in this piece. The wet-on-wet technique gives it such a dreamy quality.', NOW() - INTERVAL '18 minutes', NOW() - INTERVAL '18 minutes'),
    
    -- Comments on Sam's post  
    (sam_post_id, maya_id, 'Hands are so challenging but you nailed the proportions! The gesture feels very natural.', NOW() - INTERVAL '8 minutes', NOW() - INTERVAL '8 minutes'),
    (sam_post_id, jordan_id, 'The way you captured the knuckle details is amazing. I struggle with hands so much!', NOW() - INTERVAL '6 minutes', NOW() - INTERVAL '6 minutes'),
    (sam_post_id, casey_id, 'Such clean linework! You can really see your improvement from practice. Keep it up! 👏', NOW() - INTERVAL '4 minutes', NOW() - INTERVAL '4 minutes'),
    (sam_post_id, riley_id, 'The anatomy looks spot on. This gives me motivation to practice hands more!', NOW() - INTERVAL '2 minutes', NOW() - INTERVAL '2 minutes'),
    
    -- Comments on Casey's post
    (casey_post_id, riley_id, 'Love seeing you explore digital! The character design has so much personality. 🎨', NOW() - INTERVAL '10 minutes', NOW() - INTERVAL '10 minutes');
  
  -- Add fresh AI feedback for demonstration
  INSERT INTO public.ai_feedback (post_id, user_id, feedback_text, feedback_status, processing_time_ms, ai_model, created_at, updated_at) VALUES 
    (maya_post_id, maya_id, 
     'Your charcoal portrait demonstrates excellent understanding of light and shadow. The contrast you''ve achieved creates strong dimensionality, particularly in the facial structure. The way you''ve handled the transition from light to shadow on the cheekbone shows developing technical skill.

Areas of strength:
• Strong tonal range from deep blacks to subtle grays
• Good proportional accuracy in facial features  
• Effective use of charcoal texture to suggest surface quality

For continued growth, consider:
• Experimenting with softer edges in some shadow transitions
• Adding more subtle mid-tones to enhance roundness
• Exploring how reflected light affects shadow areas

This piece shows real promise and dedication to observational drawing. Keep practicing with direct observation!',
     'completed', 2847, 'gpt-4v', NOW() - INTERVAL '5 minutes', NOW() - INTERVAL '5 minutes'),
     
    (sam_post_id, sam_id,
     'This hand study shows impressive attention to anatomical accuracy and proportional relationships. Drawing hands is one of the most challenging subjects, and you''ve approached it with clear observation and patience.

Strengths in this piece:
• Accurate finger proportions and joint placement
• Good understanding of how tendons affect surface form
• Clean, confident line quality that suggests three-dimensional form
• Proper scale relationships between palm and fingers

Suggestions for development:
• Consider adding subtle shading to enhance volume
• Study how hands change when viewed from different angles
• Practice gesture drawings to capture hand movement and expression

Your improvement through practice is evident. Hands become much easier with continued observation - you''re on the right track!',
     'completed', 3156, 'gpt-4v', NOW() - INTERVAL '3 minutes', NOW() - INTERVAL '3 minutes');
  
  RAISE NOTICE 'Demo data refresh completed successfully at %', NOW();
  RAISE NOTICE 'Created 5 demo users, 4 sample posts with fresh timers, realistic views, and encouraging comments';
  RAISE NOTICE 'Post expiration times refreshed: Maya (+45min), Jordan (+2h20m), Sam (+18min), Casey (+23h45m)';
END;
$$;

-- Commit the refresh
COMMIT;

-- Final log
DO $$ BEGIN RAISE NOTICE 'Demo data refresh transaction completed at %', NOW(); END $$;

================
File: tsconfig.json
================
{
  "extends": "expo/tsconfig.base",
  "compilerOptions": {
    "strict": true,
    "paths": {
      "@/*": [
        "./*"
      ]
    }
  },
  "include": [
    "**/*.ts",
    "**/*.tsx",
    ".expo/types/**/*.ts",
    "expo-env.d.ts"
  ]
}

================
File: _docs/ArtShare.md
================
# EphemeralArt - Temporary Art Sharing Platform

## Project Description
A mobile app for art students to share works-in-progress in low-pressure, ephemeral environments. Students join class groups via teacher-provided codes, share artwork with controlled visibility and timing, and receive peer feedback and optional AI guidance. The app can transform casual sketches into gallery-worthy presentations through optional professional framing. MVP focuses on core sharing functionality with realistic sample data for single-device testing.

## Target Audience
**Primary**: Art students in structured drawing/painting classes  
**Use case**: Alex, taking a drawing class, wants to share a quick sketch with 3-5 classmates for 30 minutes before bed

## Desired Features

### Core Functionality
- [ ] **Two-step authentication**: 
   - [ ] Initial login with email and password
   - [ ] Separate "Join a Class" button and class code entry
- [ ] Join class groups via 6-digit codes (e.g., "DRAW01")
- [ ] In-app camera for artwork photography
- [ ] **Optional Frame System**: Apply gallery-style frames to artwork photos
   - [ ] Default: No frame
   - [ ] Optional "Add Frame" button after photo capture
   - [ ] 4-6 frame styles available when selected
   - [ ] Live preview with horizontal frame selector
- [ ] Basic sharing controls (max viewers: 1-20, duration: 10min-24hrs)
   - [ ] Slider interface for viewer limits
   - [ ] Preset duration options (30 min, 2 hours, until tomorrow)
- [ ] **Time-based auto-deletion**: Posts delete after specified time duration
   - [ ] Live countdown timers on all posts
   - [ ] Smooth fade-out animation when posts expire
- [ ] **Static viewer display**: Show viewer count from pre-populated data

### Social Features
- [ ] **Simple peer commenting**: Text-based comments only
   - [ ] Character limit (100-150 chars) with counter
   - [ ] No threading - flat comment structure
   - [ ] Real-time comment updates for new comments
   - [ ] Full-screen artwork view when tapping posts
- [ ] Class-based group feeds with sample content
   - [ ] Posts from fake classmates with realistic artwork
   - [ ] Encouraging pre-populated comments

### AI Features
- [ ] Optional AI feedback button (appears on user's own posts)
- [ ] GPT-4V analysis with encouraging, actionable art advice
- [ ] Loading states with elegant skeleton screens
- [ ] No rate limiting for MVP

### Navigation & Structure
- [ ] Simple tab navigation (Feed, Camera)
- [ ] Launch screen with app branding
- [ ] Welcome screen after initial login
- [ ] Prominent "Join a Class" interface
- [ ] Success confirmations for posting and joining class
- [ ] Class name display in header

## Technology Stack

### Frontend Development
- [ ] **Framework**: React Native with Expo for cross-platform mobile development
- [ ] **Build Tool**: Expo CLI for rapid development and testing
- [ ] **Styling**: NativeWind (Tailwind CSS for React Native) for consistent design system
- [ ] **State Management**: Zustand for lightweight state management
- [ ] **Navigation**: React Navigation for tab and screen navigation
- [ ] **Camera Integration**: Expo Camera API for photo capture
- [ ] **Image Processing**: Expo ImageManipulator for frame overlay compositing

### Backend & Database
- [ ] **Backend-as-a-Service**: Supabase for full backend functionality
- [ ] **Database**: PostgreSQL (via Supabase) for user, class, post, and comment data
- [ ] **Authentication**: Supabase Auth for simple name-based login
- [ ] **Real-time Features**: Supabase Realtime for live comment updates
- [ ] **File Storage**: Supabase Storage for artwork images and frame assets
- [ ] **Functions**: Supabase Edge Functions for AI integration and post deletion logic

### AI Integration
- [ ] **AI Service**: OpenAI GPT-4V API for artwork analysis and feedback
- [ ] **API Management**: Direct API calls through Supabase Edge Functions
- [ ] **Image Analysis**: GPT-4V vision capabilities for art critique and suggestions

### Development & Deployment
- [ ] **Version Control**: Git with GitHub for code management
- [ ] **Testing**: Expo development build for device testing
- [ ] **Deployment**: Expo Application Services (EAS) for app building and distribution
- [ ] **Environment Management**: Expo environment variables for API keys and configuration

### Asset Management
- [ ] **Frame Assets**: High-quality PNG overlays with transparency
- [ ] **Image Optimization**: Expo ImageManipulator for compression and resizing
- [ ] **Font Integration**: Refer to UIDesign.md

## Design Requests

### Visual Identity
- Refer to UIDesign.md

### Interface Design
- [ ] **Camera-first layout**: Full-screen capture with minimal, translucent controls
   - [ ] Clean viewfinder with subtle grid lines option
   - [ ] Optional "Add Frame" button after photo capture
   - [ ] Large, centered camera button on main feed
- [ ] **Art-centric presentation**: Artwork displayed at maximum size
   - [ ] User names in Instrument Serif for personal touch
   - [ ] Simple text comments below artwork
   - [ ] Clear time remaining indicators for post deletion
   - [ ] Smooth animations for post expiration and comment additions

### Typography Hierarchy
- [ ] **Headers**: Instrument Serif, 24-32pt, medium weight
- [ ] **User names/Artist credits**: Instrument Serif, 16-18pt, regular weight  
- [ ] **Body text/Comments**: Montserrat, 14-16pt, regular weight
- [ ] **UI labels/Buttons**: Montserrat, 12-14pt, medium weight
- [ ] **Metadata/Timestamps**: Montserrat, 11-12pt, light weight

### User Experience Polish
- [ ] **Micro-animations**: Smooth 200-300ms transitions throughout
   - [ ] Shutter animation with haptic feedback
   - [ ] Comment appearance animations
   - [ ] Post expiration fade-outs
- [ ] **Progressive disclosure**: Show complexity only when needed
- [ ] **Professional but approachable**: Sophisticated typography without being intimidating

## Other Notes
- Teachers create classes and distribute join codes
- Completely ephemeral - no private saving options
- **Single-device testing approach**: Pre-populated database with sample posts, comments, and users from fake classmates (Maya, Jordan, Sam, Casey, Riley)
- **Sample data includes**: 1 test class "Monday Drawing Fundamentals" (DRAW01) with 2-3 realistic artwork posts and encouraging comments
- User can post new content and comment on existing sample posts
- Frame selection is optional enhancement, default is no frame
- Focus on anxiety-reducing, confidence-building user experience
- Live countdown timers demonstrate ephemeral nature
- AI feedback only appears on user's own posts
- **Authentication flow**: Name entry → Welcome screen → Join class button → Class code entry → Feed access

================
File: _docs/UIDesign.md
================
# EphemeralArt - Complete Design System PRD

## Design Philosophy

### Core Visual Principles
- **Artwork as Hero**: Every design decision serves to elevate and showcase student artwork
- **Glass Morphism Elegance**: Sophisticated layering that creates depth without overwhelming content
- **Ephemeral Beauty**: Visual cues that celebrate the temporary nature of shared art
- **Encouraging Atmosphere**: Design language that reduces anxiety and builds confidence

### Emotional Design Goals
- **Reduce sharing anxiety** through soft, welcoming interfaces
- **Elevate casual sketches** to gallery-worthy presentations
- **Create intimacy** within class groups through warm, personal touches
- **Celebrate impermanence** as a feature, not limitation

## Visual Identity System

### Color Palette

#### Primary Neutrals
- **Pure White**: #FFFFFF (primary text, key UI elements)
- **Charcoal Text**: #2C2C2C (high contrast text when needed)
- **Soft Gray Surfaces**: #F8F8F8 (background cards, subtle separators)
- **Medium Gray**: #E5E5E5 (inactive states, borders)

#### Glass Morphism Colors
- **Primary Glass**: rgba(255, 255, 255, 0.15) - Main card backgrounds
- **Secondary Glass**: rgba(255, 255, 255, 0.25) - Active/hover states
- **Text Glass**: rgba(255, 255, 255, 0.9) - Primary white text
- **Secondary Text Glass**: rgba(255, 255, 255, 0.7) - Metadata, timestamps
- **Subtle Text Glass**: rgba(255, 255, 255, 0.5) - Disabled states

#### Accent Colors (Sparingly Used)
- **Warm Sage**: #8B9D83 - Encouraging actions (AI feedback, positive states)
- **Soft Coral**: #E67E50 - Critical actions (delete, warnings)
- **Warm Tan**: #B8956A - Special moments (first post, achievements)

### Typography System

#### Font Pairing
- **Primary**: Montserrat (400, 500, 600 weights)
- **Display**: Instrument Serif (400, 500 weights)

#### Type Scale & Usage

**Display Typography (Instrument Serif)**
- **App Name/Large Headers**: 32-42pt, Medium (500) weight
- **Screen Titles**: 24-28pt, Medium (500) weight  
- **User Names/Artist Credits**: 16-18pt, Regular (400) weight
- **Decorative Elements**: 14-16pt, Regular (400) weight

**UI Typography (Montserrat)**
- **Primary Headers**: 20-24pt, Medium (500) weight
- **Body Text/Comments**: 14-16pt, Regular (400) weight
- **Button Text**: 14-16pt, Medium (500) weight
- **Labels**: 12-14pt, Medium (500) weight
- **Metadata/Timestamps**: 11-12pt, Regular (400) weight
- **Small Details**: 10-11pt, Regular (400) weight

#### Typography Treatment
- **Line Height**: 1.4-1.5x for body text, 1.2-1.3x for headers
- **Letter Spacing**: Default for body, -0.02em for large headers
- **Text Shadows**: Subtle 1px shadows when white text over complex backgrounds

## Layout & Spacing System

### Grid System
- **Base Unit**: 8px
- **Component Spacing**: 16px (2 units)
- **Section Spacing**: 24px (3 units)
- **Screen Margins**: 20px (2.5 units)
- **Card Padding**: 16-20px (2-2.5 units)

### Border Radius System
- **Screen Containers**: 28px
- **Primary Cards**: 20px
- **Secondary Cards**: 16px
- **Buttons**: 28px (fully rounded)
- **Pills/Tags**: 20px
- **Small Elements**: 12px

## Glass Morphism Implementation

### Technical Specifications

#### Primary Glass Cards
```css
background: rgba(255, 255, 255, 0.15);
backdrop-filter: blur(12px);
border: 1px solid rgba(255, 255, 255, 0.2);
box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
border-radius: 20px;
```

#### Secondary Glass Elements
```css
background: rgba(255, 255, 255, 0.1);
backdrop-filter: blur(8px);
border: 1px solid rgba(255, 255, 255, 0.15);
box-shadow: 0 2px 12px rgba(0, 0, 0, 0.05);
border-radius: 16px;
```

#### Interactive States
- **Hover**: Increase background opacity to 0.25
- **Active**: Slight scale (0.98) with increased shadow
- **Focus**: 2px accent color border with glow effect

## Screen-by-Screen Design Specifications

### 1. Launch Screen
- **Background**: Soft gradient from #F8F8F8 to #FFFFFF
- **App Name**: "EphemeralArt" in Instrument Serif, 42pt, centered
- **Tagline**: "Share. Encourage. Fade." in Montserrat, 16pt, rgba(0,0,0,0.6)
- **Minimal branding**: Small sketched icon above app name

### 2. Initial Login Screen
- **Background**: Clean white with subtle paper texture
- **Card**: Glass morphism container (primary glass specs)
- **Header**: "Welcome to EphemeralArt" in Instrument Serif, 28pt
- **Input Field**: 
  - Rounded (16px) border with rgba(0,0,0,0.1) outline
  - Placeholder in Montserrat, 14pt, rgba(0,0,0,0.4)
  - Focus state with warm sage accent color
- **Button**: Full-width glass morphism button with Montserrat text

### 3. Welcome Screen (Post-Login)
- **Layout**: Centered content with generous whitespace
- **Greeting**: "Welcome, [Name]!" in Instrument Serif, 32pt
- **Subtext**: Encouraging message in Montserrat, 16pt
- **Primary Action**: "Join a Class" button prominent and centered
- **Button Style**: Full-width, rounded, glass morphism with warm sage background

### 4. Join Class Screen
- **Background**: Same as login screen
- **Input Focus**: Large, friendly input for class code
- **Visual Feedback**: Real-time validation with gentle color changes
- **Success State**: Green checkmark with smooth animation

### 5. Main Feed Screen

#### Overall Layout
- **Background**: Dynamic - each artwork becomes full-screen background
- **Overlay**: Subtle dark gradient (rgba(0,0,0,0.3) to transparent)
- **Content Areas**: Glass morphism cards layered over artwork

#### Artwork Display
- **Full-Screen Background**: Current post artwork fills entire screen
- **Frame Integration**: When artwork has frame, it's visible in background
- **Smooth Transitions**: 400ms ease-out when switching between posts

#### Glass Morphism Cards Layout

**Top Card - Post Information**
- **Position**: Top 20px margin, left/right 20px
- **Content**: 
  - Artist name (Instrument Serif, 18pt, white)
  - Class name (Montserrat, 12pt, rgba(255,255,255,0.7))
  - Timer countdown (Montserrat, 14pt, white)
- **Background**: Primary glass specifications
- **Height**: Auto-sizing based on content

**Bottom Left Card - Post Stats**
- **Position**: 20px from bottom, 20px from left
- **Content**:
  - View count: "3 of 5 viewers" (Montserrat, 12pt)
  - Time remaining: "Expires in 18 min" (Montserrat, 11pt)
- **Background**: Secondary glass specifications
- **Size**: Compact, auto-width

**Bottom Right Card - Actions**
- **Position**: 20px from bottom, 20px from right
- **Buttons**: 
  - Camera icon (24px, white)
  - AI feedback icon (when applicable)
  - Comment icon with count
- **Layout**: Horizontal row with 12px gaps
- **Background**: Secondary glass per button

#### Navigation Between Posts
- **Vertical Swipe**: Switch between posts in feed
- **Smooth Transitions**: Artwork crossfades behind glass cards
- **Loading States**: Skeleton screens with glass morphism

### 6. Camera Interface

#### Camera View
- **Full-Screen Viewfinder**: No UI chrome during capture
- **Grid Lines**: Optional, subtle white lines (rgba(255,255,255,0.3))
- **Minimal Controls**: Only essential capture elements visible

#### Control Overlay
- **Bottom Glass Card**: Slides up from bottom edge
- **Capture Button**: Large (80px), centered, white with subtle shadow
- **Settings**: Side buttons for flash, flip camera (glass morphism pills)

#### Post-Capture Flow
- **Preview**: Artwork displayed full-screen
- **Frame Selection**: 
  - Trigger: Small "Add Frame" button (glass morphism)
  - Interface: Horizontal scrolling carousel at bottom
  - Preview: Real-time frame application
  - Frame Options: Displayed as glass morphism cards with previews

### 7. Sharing Controls Screen

#### Layout Over Artwork
- **Background**: User's artwork full-screen with dark overlay
- **Controls Card**: Large glass morphism card, centered

#### Control Elements
**Viewer Limit Slider**
- **Label**: "Max Viewers" (Montserrat, 14pt, Medium)
- **Slider**: Custom design with warm sage accent
- **Value Display**: Large number (Instrument Serif, 24pt) with animation
- **Range**: 1-20 with haptic feedback at key points

**Duration Selection**
- **Options**: Three glass morphism pills
  - "30 minutes" 
  - "2 hours"
  - "Until tomorrow"
- **Selection State**: Warm sage background with white text
- **Default**: Middle option pre-selected

**Privacy Indicator**
- **Visual**: Lock icon with descriptive text
- **Text**: "Only your Drawing Fundamentals class can see this"
- **Style**: Secondary glass morphism card

#### Primary Action
- **Button**: "Share with Class" 
- **Style**: Full-width, prominent glass morphism
- **Color**: Warm sage background
- **Typography**: Montserrat, 16pt, Medium, white text

### 8. Full-Screen Artwork View

#### Artwork Display
- **Background**: Artwork fills entire screen
- **Frame**: Rendered as part of image if selected
- **Zoom**: Pinch-to-zoom capability with smooth animations

#### Comments Overlay
- **Position**: Bottom of screen, slides up when tapped
- **Background**: Glass morphism card with higher opacity (0.25)
- **Layout**: Scrollable list of comments

#### Comment Display
**Individual Comments**
- **User Name**: Instrument Serif, 14pt, white
- **Comment Text**: Montserrat, 14pt, rgba(255,255,255,0.9)
- **Timestamp**: Montserrat, 11pt, rgba(255,255,255,0.5)
- **Spacing**: 12px between comments

**Comment Input**
- **Position**: Bottom of comments overlay
- **Style**: Glass morphism input field
- **Placeholder**: "Add encouraging feedback..." 
- **Character Counter**: Subtle, appears as user types
- **Send Button**: Warm sage accent with paper plane icon

### 9. AI Feedback Interface

#### Trigger
- **Button**: "Get AI Feedback" on user's own posts
- **Style**: Glass morphism with warm tan accent
- **Position**: Appears in actions card

#### Loading State
- **Animation**: Elegant skeleton screen within glass card
- **Text**: "Analyzing your artwork..." (Montserrat, 12pt)
- **Duration**: 2-3 seconds with realistic loading progression

#### Feedback Display
- **Card**: Large glass morphism card with higher opacity
- **Header**: "AI Feedback" (Instrument Serif, 18pt)
- **Content**: Well-formatted feedback text (Montserrat, 14pt)
- **Tone**: Always encouraging and constructive
- **Dismissal**: Tap outside or X button to close

## Component Library

### Buttons

#### Primary Action Button
- **Background**: rgba(255, 255, 255, 0.9) or warm sage for special actions
- **Border Radius**: 28px (fully rounded)
- **Padding**: 16px 24px
- **Typography**: Montserrat, 16pt, Medium
- **Shadow**: 0 4px 16px rgba(0, 0, 0, 0.1)
- **States**: Hover (slight scale), Active (pressed scale), Disabled (0.5 opacity)

#### Secondary Action Button
- **Background**: Primary glass specifications
- **Border**: 1px solid rgba(255, 255, 255, 0.3)
- **Text Color**: White
- **Same dimensions as primary**

#### Icon Buttons
- **Size**: 44px × 44px (minimum touch target)
- **Background**: Secondary glass specifications
- **Icon Size**: 20px, centered
- **Border Radius**: 22px (fully rounded)

### Input Fields

#### Text Input
- **Background**: rgba(255, 255, 255, 0.2)
- **Border**: 1px solid rgba(255, 255, 255, 0.3)
- **Border Radius**: 16px
- **Padding**: 12px 16px
- **Typography**: Montserrat, 14pt, Regular
- **Placeholder**: rgba(255, 255, 255, 0.5)
- **Focus State**: Border becomes warm sage with subtle glow

#### Comment Input
- **Multi-line capable**
- **Auto-resize**: Grows with content up to 4 lines
- **Character counter**: Appears when approaching limit
- **Send button**: Integrated on right side

### Cards

#### Primary Content Card
- **Background**: rgba(255, 255, 255, 0.15)
- **Backdrop Filter**: blur(12px)
- **Border**: 1px solid rgba(255, 255, 255, 0.2)
- **Border Radius**: 20px
- **Padding**: 20px
- **Shadow**: 0 4px 20px rgba(0, 0, 0, 0.08)

#### Secondary Information Card
- **Background**: rgba(255, 255, 255, 0.1)
- **Backdrop Filter**: blur(8px)
- **Border**: 1px solid rgba(255, 255, 255, 0.15)
- **Border Radius**: 16px
- **Padding**: 16px
- **Shadow**: 0 2px 12px rgba(0, 0, 0, 0.05)

### Loading States

#### Skeleton Screens
- **Background**: Animated gradient from rgba(255,255,255,0.1) to rgba(255,255,255,0.2)
- **Animation**: 1.5s ease-in-out infinite
- **Shapes**: Match final content layout
- **Blur**: Maintain backdrop blur during loading

#### Progress Indicators
- **Style**: Thin line with warm sage color
- **Background**: rgba(255, 255, 255, 0.2)
- **Animation**: Smooth, determinate when possible

## Animation & Interaction Design

### Transition Specifications

#### Screen Transitions
- **Duration**: 400ms
- **Easing**: cubic-bezier(0.25, 0.46, 0.45, 0.94)
- **Type**: Crossfade for artwork backgrounds, slide for overlays

#### Element Animations
- **Cards Appearing**: Scale from 0.95 to 1.0 with opacity fade-in (300ms)
- **Button Interactions**: Scale to 0.98 on press (150ms)
- **Input Focus**: Border color transition (200ms) with subtle scale (1.02)

#### Deletion Animations
- **Post Expiration**: 2-second fade-out with scale to 0.95
- **Comment Removal**: Slide up and fade (300ms)
- **Warning**: Gentle shake animation before deletion

### Haptic Feedback
- **Light Impact**: Button taps, selection changes
- **Medium Impact**: Post creation, successful actions
- **Heavy Impact**: Deletions, errors
- **Selection Feedback**: Slider adjustments, frame selection

## Accessibility Considerations

### Color & Contrast
- **Minimum Contrast**: 4.5:1 for normal text, 3:1 for large text
- **Glass Morphism Readability**: Always test text legibility over artwork
- **Alternative Indicators**: Never rely solely on color for information

### Typography Accessibility
- **Minimum Sizes**: 12pt for metadata, 14pt for body text
- **Dynamic Type**: Support iOS/Android text scaling
- **Font Weights**: Sufficient weight for glass morphism backgrounds

### Touch Targets
- **Minimum Size**: 44px × 44px for all interactive elements
- **Spacing**: 8px minimum between adjacent touch targets
- **Visual Feedback**: Clear hover/active states

### Screen Reader Support
- **Semantic Markup**: Proper heading hierarchy
- **Alt Text**: Descriptive text for artwork and UI elements
- **Focus Management**: Logical tab order, clear focus indicators

## Error States & Edge Cases

### Network Issues
- **Offline Mode**: Graceful degradation with cached content
- **Failed Uploads**: Retry mechanism with clear messaging
- **Slow Loading**: Progressive loading with skeleton screens

### Content Edge Cases
- **Empty States**: Beautiful illustrations with encouraging text
- **Long Comments**: Proper text wrapping and scrolling
- **Unusual Aspect Ratios**: Elegant letterboxing or cropping

### Deletion Timing
- **Countdown Warnings**: Visual countdown for last 60 seconds
- **Grace Period**: 5-second "undo" option after deletion
- **Smooth Removal**: Elegant animations when content disappears

## Platform-Specific Considerations

### iOS Design Adaptations
- **Safe Areas**: Proper handling of notches and home indicators
- **Navigation**: iOS-style back gestures and animations
- **System Integration**: Proper keyboard handling and scroll behavior

### Android Design Adaptations
- **Material Design Elements**: Subtle incorporation where appropriate
- **Navigation**: Android back button and gesture handling
- **System Bars**: Proper status bar and navigation bar treatment

## Performance Optimization

### Glass Morphism Performance
- **Blur Optimization**: Use platform-native blur when possible
- **Layer Management**: Minimize backdrop-filter usage
- **Animation Performance**: 60fps target for all animations

### Image Handling
- **Compression**: Maintain quality while optimizing file size
- **Caching**: Smart caching strategy for artwork and frames
- **Memory Management**: Proper cleanup of full-screen images

This comprehensive design system ensures that every interaction in EphemeralArt feels premium, encouraging, and focused on celebrating student artwork through sophisticated visual design.

================
File: app/(auth)/_layout.tsx
================
/**
 * Authentication Navigation Stack Layout
 * 
 * This layout component manages the authentication flow navigation including:
 * - Login screen for existing users
 * - Registration screen for new users  
 * - Profile setup screen for completing user profile
 * - Seamless navigation between auth screens
 */

import { Stack } from 'expo-router';

export default function AuthLayout() {
  console.log('🔐 Auth Layout - Rendering auth navigation stack');

  return (
    <Stack
      initialRouteName="login"
      screenOptions={{
        headerShown: false,
        gestureEnabled: false,
        animation: 'slide_from_right',
      }}>
      <Stack.Screen 
        name="login" 
        options={{
          title: 'Sign In',
          headerShown: false,
        }} 
      />
      <Stack.Screen 
        name="register" 
        options={{
          title: 'Create Account',
          headerShown: false,
        }} 
      />
      <Stack.Screen 
        name="profile-setup" 
        options={{
          title: 'Complete Profile',
          headerShown: false,
          gestureEnabled: false, // Prevent going back without completing profile
        }} 
      />
    </Stack>
  );
}

================
File: components/feed/ClassJoinModal.tsx
================
/**
 * Class Join Modal Component
 * 
 * This modal appears when users access the class feed without being in a class.
 * It allows them to enter a join code to join a class and start accessing the feed.
 * Implements glass morphism design system per UIDesign.md specifications.
 */

import React, { useState } from 'react';
import {
    Alert,
    Dimensions,
    KeyboardAvoidingView,
    Modal,
    Platform,
    StyleSheet,
    TextInput,
    TouchableOpacity,
    TouchableWithoutFeedback,
    View
} from 'react-native';

import { Colors } from '../../constants/Colors';
import { useColorScheme } from '../../hooks/useColorScheme';
import { useAuthStore } from '../../store/authStore';
import { useClassStore } from '../../store/classStore';
import { ThemedText } from '../ThemedText';
import GlassMorphismCard from '../ui/GlassMorphismCard';

const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

interface ClassJoinModalProps {
  visible: boolean;
  onClose: () => void;
  onSuccess?: () => void;
}

export default function ClassJoinModal({ visible, onClose, onSuccess }: ClassJoinModalProps) {
  console.log('🏫 Class Join Modal - Rendering class join modal');

  const colorScheme = useColorScheme();
  const colors = Colors[colorScheme ?? 'light'];

  // Form state
  const [joinCode, setJoinCode] = useState('');
  const [isJoining, setIsJoining] = useState(false);
  const [codeFocused, setCodeFocused] = useState(false);

  // Stores
  const { user } = useAuthStore();
  const { joinClassWithCode, isLoading } = useClassStore();

  /**
   * Handle join code input formatting
   */
  const handleJoinCodeChange = (text: string) => {
    // Convert to uppercase and remove non-alphanumeric characters
    const formattedCode = text.toUpperCase().replace(/[^A-Z0-9]/g, '');
    
    // Limit to 6 characters
    if (formattedCode.length <= 6) {
      setJoinCode(formattedCode);
    }
  };

  /**
   * Handle class joining
   */
  const handleJoinClass = async () => {
    console.log('🚀 Class Join Modal - Attempting to join class with code:', joinCode);

    if (!user) {
      Alert.alert('Error', 'You must be logged in to join a class.');
      return;
    }

    if (joinCode.length !== 6) {
      Alert.alert('Invalid Code', 'Join codes must be exactly 6 characters (letters and numbers).');
      return;
    }

    setIsJoining(true);

    try {
      const result = await joinClassWithCode(joinCode, user.id);

      if (result.success) {
        console.log('🎉 Class Join Modal - Successfully joined class');
        setJoinCode('');
        
        if (result.isExistingMember) {
          // User was already a member - show different message and don't trigger navigation
          console.log('ℹ️ Class Join Modal - User was already a member, staying on class list');
          onClose();
          Alert.alert(
            'Already a Member!',
            'You are already a member of this class. You can find it in your class list.',
            [{ text: 'Got It', style: 'default' }]
          );
        } else {
          // New member - trigger success callback for navigation
          console.log('🎉 Class Join Modal - New member joined, triggering success callback');
          onSuccess?.();
          onClose();
          Alert.alert(
            'Welcome to the Class!',
            'You can now share artwork and view your classmates\' posts.',
            [{ text: 'Get Started', style: 'default' }]
          );
        }
      } else {
        console.log('❌ Class Join Modal - Failed to join class:', result.error);
        Alert.alert('Unable to Join Class', result.error || 'Please check your join code and try again.');
      }
    } catch (error) {
      console.error('❌ Class Join Modal - Unexpected error:', error);
      Alert.alert('Error', 'An unexpected error occurred. Please try again.');
    } finally {
      setIsJoining(false);
    }
  };

  /**
   * Handle modal dismissal
   */
  const handleClose = () => {
    if (!isJoining && !isLoading) {
      setJoinCode('');
      onClose();
    }
  };

  /**
   * Handle background press to close modal
   */
  const handleBackgroundPress = () => {
    if (!isJoining && !isLoading) {
      handleClose();
    }
  };

  const isFormDisabled = isJoining || isLoading;

  return (
    <Modal
      visible={visible}
      transparent={true}
      animationType="fade"
      onRequestClose={handleClose}
    >
      <TouchableWithoutFeedback onPress={handleBackgroundPress}>
        <View style={styles.modalBackdrop}>
          <TouchableWithoutFeedback onPress={() => {}}>
            <KeyboardAvoidingView
              behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
              style={styles.modalContainer}
            >
              {/* Main Modal Card */}
              <GlassMorphismCard type="primary" style={styles.modalCard}>
                <View style={styles.modalContent}>
                  {/* Header */}
                  <View style={styles.header}>
                    <ThemedText type="screenTitle" style={[styles.title, { color: colors.text }]}>
                      Join a Class
                    </ThemedText>
                    <ThemedText type="bodyText" style={[styles.subtitle, { color: colors.textSecondary }]}>
                      Enter your class join code to start sharing artwork with your classmates.
                    </ThemedText>
                  </View>

                  {/* Join Code Input */}
                  <View style={styles.inputSection}>
                    <ThemedText type="label" style={[styles.label, { color: colors.text }]}>
                      Class Join Code
                    </ThemedText>
                    <TextInput
                      style={[
                        styles.codeInput,
                        {
                          borderColor: codeFocused ? colors.accentSage : colors.border,
                          backgroundColor: codeFocused ? colors.surface : colors.background,
                          color: colors.text,
                          fontFamily: 'Montserrat_600SemiBold',
                        }
                      ]}
                      value={joinCode}
                      onChangeText={handleJoinCodeChange}
                      onFocus={() => setCodeFocused(true)}
                      onBlur={() => setCodeFocused(false)}
                      placeholder="DRAW01"
                      placeholderTextColor={colors.textTertiary}
                      autoCapitalize="characters"
                      autoCorrect={false}
                      autoComplete="off"
                      maxLength={6}
                      editable={!isFormDisabled}
                      keyboardType="default"
                      returnKeyType="go"
                      onSubmitEditing={handleJoinClass}
                    />
                    <ThemedText type="caption" style={[styles.helperText, { color: colors.textTertiary }]}>
                      6-character code (letters and numbers)
                    </ThemedText>
                  </View>

                  {/* Example Code Hint */}
                  <View style={[styles.exampleCard, { backgroundColor: colors.surface }]}>
                    <ThemedText type="bodyText" style={[styles.exampleTitle, { color: colors.accentSage }]}>
                      Try the Demo Class
                    </ThemedText>
                    <ThemedText type="caption" style={[styles.exampleText, { color: colors.textSecondary }]}>
                      Use code <ThemedText style={{ color: colors.accent, fontFamily: 'Montserrat_600SemiBold' }}>DRAW01</ThemedText> to join "Monday Drawing Fundamentals" and explore the app with pre-populated content.
                    </ThemedText>
                  </View>

                  {/* Action Buttons */}
                  <View style={styles.buttonContainer}>
                    <TouchableOpacity
                      style={[
                        styles.joinButton,
                        {
                          backgroundColor: joinCode.length === 6 ? colors.accentSage : colors.surface,
                          opacity: isFormDisabled ? 0.6 : 1,
                        }
                      ]}
                      onPress={handleJoinClass}
                      disabled={isFormDisabled || joinCode.length !== 6}
                      activeOpacity={0.8}
                    >
                      <ThemedText type="button" style={[
                        styles.joinButtonText,
                        { color: joinCode.length === 6 ? '#FFFFFF' : colors.textSecondary }
                      ]}>
                        {isFormDisabled ? 'Joining...' : 'Join Class'}
                      </ThemedText>
                    </TouchableOpacity>

                    <TouchableOpacity
                      style={[
                        styles.cancelButton,
                        { 
                          borderColor: colors.border,
                          opacity: isFormDisabled ? 0.6 : 1,
                        }
                      ]}
                      onPress={handleClose}
                      disabled={isFormDisabled}
                      activeOpacity={0.8}
                    >
                      <ThemedText type="button" style={[styles.cancelButtonText, { color: colors.textSecondary }]}>
                        Cancel
                      </ThemedText>
                    </TouchableOpacity>
                  </View>
                </View>
              </GlassMorphismCard>
            </KeyboardAvoidingView>
          </TouchableWithoutFeedback>
        </View>
      </TouchableWithoutFeedback>
    </Modal>
  );
}

const styles = StyleSheet.create({
  modalBackdrop: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContainer: {
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 24,
    width: '100%',
  },
  modalCard: {
    width: Math.min(screenWidth - 48, 400),
    maxHeight: screenHeight * 0.8,
  },
  modalContent: {
    padding: 32,
    gap: 24,
  },

  // Header
  header: {
    alignItems: 'center',
    gap: 8,
  },
  title: {
    textAlign: 'center',
  },
  subtitle: {
    textAlign: 'center',
    lineHeight: 22,
  },

  // Input Section
  inputSection: {
    gap: 12,
  },
  label: {
    marginBottom: 4,
  },
  codeInput: {
    height: 56,
    borderWidth: 2,
    borderRadius: 16,
    paddingHorizontal: 20,
    fontSize: 18,
    textAlign: 'center',
    letterSpacing: 2,
  },
  helperText: {
    textAlign: 'center',
    marginTop: 4,
  },

  // Example Card
  exampleCard: {
    padding: 20,
    borderRadius: 16,
    gap: 8,
    alignItems: 'center',
  },
  exampleTitle: {
    fontWeight: '600',
  },
  exampleText: {
    textAlign: 'center',
    lineHeight: 18,
  },

  // Buttons
  buttonContainer: {
    gap: 12,
    marginTop: 8,
  },
  joinButton: {
    height: 56,
    borderRadius: 28,
    justifyContent: 'center',
    alignItems: 'center',
  },
  joinButtonText: {
    fontSize: 16,
    fontWeight: '600',
  },
  cancelButton: {
    height: 48,
    borderRadius: 24,
    borderWidth: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  cancelButtonText: {
    fontSize: 14,
    fontWeight: '500',
  },
});

================
File: components/feed/ClassListScreen.tsx
================
/**
 * Class List Screen Component
 * 
 * This component provides an intermediate page between the Class Feed tab and the actual feed.
 * Features:
 * - Lists all classes the user is enrolled in
 * - "Join a Class +" button in top right corner
 * - Glass morphism design matching the app's aesthetic
 * - Mental breathing room and better app orientation
 */

import React from 'react';
import {
    SafeAreaView,
    StyleSheet,
    TouchableOpacity,
    View,
} from 'react-native';
import { Colors } from '../../constants/Colors';
import { useColorScheme } from '../../hooks/useColorScheme';
import { useClassStore } from '../../store/classStore';
import { ThemedText } from '../ThemedText';
import GlassMorphismCard from '../ui/GlassMorphismCard';

interface ClassListScreenProps {
  onClassSelect: (classId: string) => void;
  onJoinClass: () => void;
}

export default function ClassListScreen({ onClassSelect, onJoinClass }: ClassListScreenProps) {
  console.log('📚 Class List Screen - Rendering class selection interface');

  const colorScheme = useColorScheme();
  const colors = Colors[colorScheme ?? 'light'];
  const { userClasses, isLoading } = useClassStore();

  console.log('📚 Class List Screen - User classes count:', userClasses.length);
  console.log('🔧 DEBUG - ClassListScreen render:', {
    userClassesCount: userClasses.length,
    isLoading,
    classIds: userClasses.map(c => c.id),
    classNames: userClasses.map(c => c.name),
    timestamp: Date.now()
  });

  /**
   * Handle class selection
   */
  const handleClassPress = (classId: string, className: string) => {
    console.log('🎯 Class List Screen - Selected class:', className);
    console.log('🔧 DEBUG - handleClassPress called:', {
      classId,
      className,
      userClassesCount: userClasses.length,
      timestamp: Date.now(),
      foundClass: userClasses.find(c => c.id === classId) ? 'YES' : 'NO'
    });
    onClassSelect(classId);
  };

  /**
   * Handle join class button press
   */
  const handleJoinClassPress = () => {
    console.log('➕ Class List Screen - Opening join class modal');
    onJoinClass();
  };

  return (
    <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>
      {/* Soft gradient background per UIDesign.md */}
      <View style={[styles.backgroundGradient, { backgroundColor: colors.surface }]} />
      
      {/* Header */}
      <View style={styles.header}>
        <ThemedText type="screenTitle" style={[styles.title, { color: colors.text }]}>
          Your Classes
        </ThemedText>
        
        {/* Join Class Button */}
        <TouchableOpacity
          style={[styles.joinButton, { backgroundColor: colors.accentSage }]}
          onPress={handleJoinClassPress}
          activeOpacity={0.8}
        >
          <ThemedText type="button" style={styles.joinButtonText}>
            Join a Class +
          </ThemedText>
        </TouchableOpacity>
      </View>

      {/* Content */}
      <View style={styles.content}>
        {isLoading ? (
          // Loading State
          <GlassMorphismCard type="primary" style={styles.loadingCard}>
            <ThemedText type="bodyText" style={[styles.loadingText, { color: colors.textSecondary }]}>
              Loading your classes...
            </ThemedText>
          </GlassMorphismCard>
        ) : userClasses.length === 0 ? (
          // Empty State
          <GlassMorphismCard type="primary" style={styles.emptyCard}>
            <ThemedText type="heading" style={[styles.emptyTitle, { color: colors.text }]}>
              No Classes Yet
            </ThemedText>
            <ThemedText type="bodyText" style={[styles.emptyText, { color: colors.textSecondary }]}>
              Join your first class to start sharing art with classmates
            </ThemedText>
          </GlassMorphismCard>
        ) : (
          // Class List
          <View style={styles.classList}>
            {userClasses.map((userClass) => (
              <TouchableOpacity
                key={userClass.id}
                onPress={() => handleClassPress(userClass.id, userClass.name)}
                activeOpacity={0.7}
                style={styles.classButton}
              >
                <GlassMorphismCard type="secondary" style={styles.classCard}>
                  <View style={styles.classCardContent}>
                    {/* Main content section */}
                    <View style={styles.classInfo}>
                      <ThemedText type="heading" style={[styles.className, { color: colors.text }]}>
                        {userClass.name}
                      </ThemedText>
                      <ThemedText type="metadata" style={[styles.classDetails, { color: colors.textSecondary }]}>
                        {userClass.description || 'Art class'}
                      </ThemedText>
                      
                      {/* Call to action text */}
                      <ThemedText type="caption" style={[styles.tapToEnter, { color: colors.accentSage }]}>
                        📱 Tap to enter class
                      </ThemedText>
                    </View>
                    
                    {/* Enhanced arrow indicator with background */}
                    <View style={[styles.arrowContainer, { backgroundColor: colors.accentSage }]}>
                      <ThemedText style={styles.arrow}>
                        →
                      </ThemedText>
                    </View>
                  </View>
                </GlassMorphismCard>
              </TouchableOpacity>
            ))}
          </View>
        )}
      </View>
    </SafeAreaView>
  );
}

// Glass Morphism Design System Styles per UIDesign.md
const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  backgroundGradient: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    opacity: 0.5,
  },
  
  // Header
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20, // 20px margins per UIDesign.md
    paddingTop: 20,
    paddingBottom: 24,
  },
  title: {
    // Instrument Serif 24pt per UIDesign.md applied via ThemedText type="screenTitle"
  },
  joinButton: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20, // Pill shape
  },
  joinButtonText: {
    color: 'white',
    fontSize: 14, // 14pt per UIDesign.md
    fontWeight: '600',
  },
  
  // Content
  content: {
    flex: 1,
    paddingHorizontal: 20, // 20px margins per UIDesign.md
  },
  
  // Loading State
  loadingCard: {
    padding: 24,
    alignItems: 'center',
  },
  loadingText: {
    textAlign: 'center',
  },
  
  // Empty State
  emptyCard: {
    padding: 24,
    alignItems: 'center',
  },
  emptyTitle: {
    textAlign: 'center',
    marginBottom: 8,
  },
  emptyText: {
    textAlign: 'center',
    lineHeight: 22,
  },
  
  // Class List
  classList: {
    gap: 12, // 12px spacing between cards
  },
  classButton: {
    // Enhanced touch feedback and visual button styling
    borderRadius: 16,
    overflow: 'hidden',
    // Add subtle shadow to make it feel more button-like
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  classCard: {
    padding: 20,
    borderWidth: 2,
    borderColor: 'rgba(139, 169, 134, 0.3)', // Subtle sage border to indicate clickability
  },
  classCardContent: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 16, // Increased gap for better visual separation
  },
  classInfo: {
    flex: 1,
    gap: 4, // Consistent spacing between text elements
  },
  className: {
    // Instrument Serif 18pt per UIDesign.md applied via ThemedText type="heading"
    marginBottom: 2,
  },
  classDetails: {
    fontSize: 12, // 12pt per UIDesign.md
    marginBottom: 6,
  },
  tapToEnter: {
    fontSize: 11,
    fontWeight: '600',
    fontStyle: 'italic',
    marginTop: 4,
  },
  arrowContainer: {
    width: 36,
    height: 36,
    borderRadius: 18,
    justifyContent: 'center',
    alignItems: 'center',
    // Enhanced visual prominence
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.2,
    shadowRadius: 2,
    elevation: 2,
  },
  arrow: {
    fontSize: 18,
    fontWeight: 'bold',
    color: 'white', // White arrow on sage background
  },
});

================
File: components/ui/IconSymbol.tsx
================
// Fallback for using MaterialIcons on Android and web.

import MaterialIcons from '@expo/vector-icons/MaterialIcons';
import { SymbolViewProps, SymbolWeight } from 'expo-symbols';
import { ComponentProps } from 'react';
import { OpaqueColorValue, type StyleProp, type TextStyle } from 'react-native';

type IconMapping = Record<SymbolViewProps['name'], ComponentProps<typeof MaterialIcons>['name']>;
type IconSymbolName = keyof typeof MAPPING;

/**
 * Add your SF Symbols to Material Icons mappings here.
 * - see Material Icons in the [Icons Directory](https://icons.expo.fyi).
 * - see SF Symbols in the [SF Symbols](https://developer.apple.com/sf-symbols/) app.
 */
const MAPPING = {
  'house.fill': 'home',
  'paperplane.fill': 'send',
  'chevron.left.forwardslash.chevron.right': 'code',
  'chevron.right': 'chevron-right',
  'camera.fill': 'camera-alt',
} as IconMapping;

/**
 * An icon component that uses native SF Symbols on iOS, and Material Icons on Android and web.
 * This ensures a consistent look across platforms, and optimal resource usage.
 * Icon `name`s are based on SF Symbols and require manual mapping to Material Icons.
 */
export function IconSymbol({
  name,
  size = 24,
  color,
  style,
}: {
  name: IconSymbolName;
  size?: number;
  color: string | OpaqueColorValue;
  style?: StyleProp<TextStyle>;
  weight?: SymbolWeight;
}) {
  return <MaterialIcons color={color} size={size} name={MAPPING[name]} style={style} />;
}

================
File: lib/classService.ts
================
/**
 * Class Service
 * 
 * This service handles all class-related operations including:
 * - Class creation and management
 * - Join code validation and verification
 * - Class membership management
 * - Class discovery and listing
 */

import type { Class, ClassMember } from './supabase';
import { supabase } from './supabase';

/**
 * Class validation result interface
 */
export interface ClassValidationResult {
  isValid: boolean;
  class?: Class;
  error?: string;
}

/**
 * Class join result interface
 */
export interface ClassJoinResult {
  success: boolean;
  membership?: ClassMember;
  class?: Class;
  error?: string;
  isExistingMember?: boolean; // Flag to indicate if user was already a member
}

/**
 * Class creation options
 */
export interface ClassCreationOptions {
  name: string;
  description?: string;
  maxStudents?: number;
  joinCode?: string; // Optional custom join code
}

/**
 * Validate join code format
 */
export function validateJoinCodeFormat(joinCode: string): boolean {
  console.log('🔍 Class Service - Validating join code format:', joinCode);
  
  if (!joinCode) {
    console.log('❌ Class Service - Join code is empty');
    return false;
  }

  // Must be exactly 6 characters, uppercase letters and numbers only
  const joinCodeRegex = /^[A-Z0-9]{6}$/;
  const isValid = joinCodeRegex.test(joinCode.trim().toUpperCase());
  
  console.log('✅ Class Service - Join code format validation:', isValid);
  return isValid;
}

/**
 * Normalize join code (convert to uppercase)
 */
export function normalizeJoinCode(joinCode: string): string {
  return joinCode.trim().toUpperCase();
}

/**
 * Validate and find class by join code
 */
export async function validateClassJoinCode(joinCode: string): Promise<ClassValidationResult> {
  console.log('🔍 Class Service - Validating class join code:', joinCode);

  try {
    // Validate format first
    if (!validateJoinCodeFormat(joinCode)) {
      return {
        isValid: false,
        error: 'Join code must be 6 characters (letters and numbers only)'
      };
    }

    const normalizedCode = normalizeJoinCode(joinCode);
    console.log('📝 Class Service - Normalized join code:', normalizedCode);

    // Look up class by join code
    const { data: classData, error } = await supabase
      .from('classes')
      .select('*')
      .eq('join_code', normalizedCode)
      .eq('is_active', true)
      .single();

    if (error) {
      console.error('❌ Class Service - Database error:', error);
      
      if (error.code === 'PGRST116') {
        return {
          isValid: false,
          error: 'Class not found. Please check your join code.'
        };
      }
      
      return {
        isValid: false,
        error: 'Failed to validate join code. Please try again.'
      };
    }

    if (!classData) {
      console.log('❌ Class Service - No class found with join code');
      return {
        isValid: false,
        error: 'Class not found. Please check your join code.'
      };
    }

    console.log('✅ Class Service - Class found:', classData.name);
    return {
      isValid: true,
      class: classData as Class
    };

  } catch (error) {
    console.error('❌ Class Service - Unexpected error during validation:', error);
    return {
      isValid: false,
      error: 'An error occurred while validating the join code'
    };
  }
}

/**
 * Join a class with join code
 */
export async function joinClass(joinCode: string, userId: string): Promise<ClassJoinResult> {
  console.log('🚀 Class Service - User attempting to join class:', { joinCode, userId });

  try {
    // First validate the join code and get class info
    const validation = await validateClassJoinCode(joinCode);
    
    if (!validation.isValid || !validation.class) {
      console.log('❌ Class Service - Join code validation failed');
      return {
        success: false,
        error: validation.error
      };
    }

    const classData = validation.class;
    console.log('✅ Class Service - Join code validated for class:', classData.name);

    // Check if user is already a member
    const { data: existingMembership, error: membershipError } = await supabase
      .from('class_members')
      .select('*')
      .eq('class_id', classData.id)
      .eq('user_id', userId)
      .single();

    if (membershipError && membershipError.code !== 'PGRST116') {
      console.error('❌ Class Service - Error checking existing membership:', membershipError);
      return {
        success: false,
        error: 'Failed to check class membership'
      };
    }

    if (existingMembership) {
      console.log('ℹ️ Class Service - User is already a member');
      
      if (existingMembership.is_active) {
        return {
          success: true,
          membership: existingMembership as ClassMember,
          class: classData,
          error: 'You are already a member of this class',
          isExistingMember: true
        };
      } else {
        // Reactivate membership
        const { data: reactivatedMembership, error: reactivateError } = await supabase
          .from('class_members')
          .update({ is_active: true })
          .eq('id', existingMembership.id)
          .select()
          .single();

        if (reactivateError) {
          console.error('❌ Class Service - Error reactivating membership:', reactivateError);
          return {
            success: false,
            error: 'Failed to rejoin class'
          };
        }

        console.log('✅ Class Service - Membership reactivated');
        return {
          success: true,
          membership: reactivatedMembership as ClassMember,
          class: classData,
          isExistingMember: true
        };
      }
    }

    // Check class capacity
    const { data: memberCount, error: countError } = await supabase
      .from('class_members')
      .select('id', { count: 'exact' })
      .eq('class_id', classData.id)
      .eq('is_active', true);

    if (countError) {
      console.error('❌ Class Service - Error checking member count:', countError);
      return {
        success: false,
        error: 'Failed to check class capacity'
      };
    }

    const currentMemberCount = memberCount?.length || 0;
    console.log('📊 Class Service - Current member count:', currentMemberCount, '/', classData.max_students);

    if (currentMemberCount >= classData.max_students) {
      return {
        success: false,
        error: 'This class is full. Please try a different class.'
      };
    }

    // Create new membership
    const { data: newMembership, error: createError } = await supabase
      .from('class_members')
      .insert({
        class_id: classData.id,
        user_id: userId,
        role: 'student',
        is_active: true
      })
      .select()
      .single();

    if (createError) {
      console.error('❌ Class Service - Error creating membership:', createError);
      return {
        success: false,
        error: 'Failed to join class. Please try again.'
      };
    }

    console.log('🎉 Class Service - Successfully joined class!');
    return {
      success: true,
      membership: newMembership as ClassMember,
      class: classData,
      isExistingMember: false
    };

  } catch (error) {
    console.error('❌ Class Service - Unexpected error during class join:', error);
    return {
      success: false,
      error: 'An unexpected error occurred while joining the class'
    };
  }
}

/**
 * Get user's class memberships
 */
export async function getUserClasses(userId: string): Promise<Array<Class & { membership: ClassMember }>> {
  console.log('📋 Class Service - Fetching user classes:', userId);

  try {
    const { data, error } = await supabase
      .from('class_members')
      .select(`
        id,
        class_id,
        user_id,
        role,
        joined_at,
        is_active,
        classes:class_id (
          id,
          name,
          description,
          join_code,
          created_by,
          is_active,
          max_students,
          created_at,
          updated_at
        )
      `)
      .eq('user_id', userId)
      .eq('is_active', true)
      .eq('classes.is_active', true);

    if (error) {
      console.error('❌ Class Service - Error fetching user classes:', error);
      return [];
    }

    if (!data) {
      console.log('ℹ️ Class Service - No classes found for user');
      return [];
    }

    const userClasses = data
      .filter(item => item.classes) // Filter out any null classes
      .map(item => ({
        ...(item.classes as any),
        membership: {
          id: item.id,
          class_id: item.class_id,
          user_id: item.user_id,
          role: item.role,
          joined_at: item.joined_at,
          is_active: item.is_active
        } as ClassMember
      })) as Array<Class & { membership: ClassMember }>;

    console.log('✅ Class Service - Found', userClasses.length, 'classes for user');
    return userClasses;

  } catch (error) {
    console.error('❌ Class Service - Unexpected error fetching user classes:', error);
    return [];
  }
}

/**
 * Create a new class
 */
export async function createClass(options: ClassCreationOptions, creatorId: string): Promise<{
  success: boolean;
  class?: Class;
  error?: string;
}> {
  console.log('🏗️ Class Service - Creating new class:', options);

  try {
    const { data: newClass, error } = await supabase
      .from('classes')
      .insert({
        name: options.name.trim(),
        description: options.description?.trim(),
        max_students: options.maxStudents || 30,
        join_code: options.joinCode, // Will be auto-generated if not provided
        created_by: creatorId,
        is_active: true
      })
      .select()
      .single();

    if (error) {
      console.error('❌ Class Service - Error creating class:', error);
      
      if (error.code === '23505' && error.message.includes('join_code')) {
        return {
          success: false,
          error: 'Join code already exists. Please try a different one.'
        };
      }
      
      return {
        success: false,
        error: 'Failed to create class. Please try again.'
      };
    }

    console.log('🎉 Class Service - Class created successfully:', newClass.name);
    
    // Auto-join the creator as a teacher
    await supabase
      .from('class_members')
      .insert({
        class_id: newClass.id,
        user_id: creatorId,
        role: 'teacher',
        is_active: true
      });

    return {
      success: true,
      class: newClass as Class
    };

  } catch (error) {
    console.error('❌ Class Service - Unexpected error creating class:', error);
    return {
      success: false,
      error: 'An unexpected error occurred while creating the class'
    };
  }
}

/**
 * Leave a class
 */
export async function leaveClass(classId: string, userId: string): Promise<{
  success: boolean;
  error?: string;
}> {
  console.log('👋 Class Service - User leaving class:', { classId, userId });

  try {
    const { error } = await supabase
      .from('class_members')
      .update({ is_active: false })
      .eq('class_id', classId)
      .eq('user_id', userId);

    if (error) {
      console.error('❌ Class Service - Error leaving class:', error);
      return {
        success: false,
        error: 'Failed to leave class. Please try again.'
      };
    }

    console.log('✅ Class Service - Successfully left class');
    return { success: true };

  } catch (error) {
    console.error('❌ Class Service - Unexpected error leaving class:', error);
    return {
      success: false,
      error: 'An unexpected error occurred while leaving the class'
    };
  }
}

================
File: supabase/migrations/20250102000001_create_classes_table.sql
================
-- Classes table migration
-- This migration creates the classes table for Draft's class-based social features

-- Create classes table
CREATE TABLE IF NOT EXISTS public.classes (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  name TEXT NOT NULL,
  join_code TEXT UNIQUE NOT NULL,
  description TEXT,
  created_by UUID REFERENCES auth.users(id) ON DELETE SET NULL,
  is_active BOOLEAN DEFAULT true,
  max_students INTEGER DEFAULT 30,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  
  -- Constraints for data integrity
  CONSTRAINT classes_name_not_empty CHECK (length(trim(name)) > 0),
  CONSTRAINT classes_join_code_format CHECK (join_code ~ '^[A-Z0-9]{6}$'),
  CONSTRAINT classes_max_students_positive CHECK (max_students > 0)
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS classes_join_code_idx ON public.classes(join_code);
CREATE INDEX IF NOT EXISTS classes_created_by_idx ON public.classes(created_by);
CREATE INDEX IF NOT EXISTS classes_is_active_idx ON public.classes(is_active);
CREATE INDEX IF NOT EXISTS classes_created_at_idx ON public.classes(created_at);

-- Enable RLS on classes table
ALTER TABLE public.classes ENABLE ROW LEVEL SECURITY;

-- Create RLS policies for classes table

-- Allow everyone to view active classes (for joining)
CREATE POLICY "Active classes are viewable by everyone" ON public.classes
FOR SELECT 
TO public
USING (is_active = true);

-- Allow authenticated users to create classes
CREATE POLICY "Authenticated users can create classes" ON public.classes
FOR INSERT 
TO authenticated
WITH CHECK (auth.uid() = created_by);

-- Allow class creators to update their classes
CREATE POLICY "Class creators can update their classes" ON public.classes
FOR UPDATE 
TO authenticated
USING (auth.uid() = created_by)
WITH CHECK (auth.uid() = created_by);

-- Allow class creators to delete their classes
CREATE POLICY "Class creators can delete their classes" ON public.classes
FOR DELETE 
TO authenticated
USING (auth.uid() = created_by);

-- Add updated_at trigger function (reuse existing function)
CREATE TRIGGER classes_updated_at
  BEFORE UPDATE ON public.classes
  FOR EACH ROW
  EXECUTE FUNCTION public.handle_updated_at();

-- Function to generate unique join codes
CREATE OR REPLACE FUNCTION public.generate_join_code()
RETURNS TEXT AS $$
DECLARE
  chars TEXT := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  result TEXT := '';
  i INTEGER;
  code_exists BOOLEAN;
BEGIN
  LOOP
    result := '';
    -- Generate 6-character code
    FOR i IN 1..6 LOOP
      result := result || substr(chars, floor(random() * length(chars) + 1)::integer, 1);
    END LOOP;
    
    -- Check if code already exists
    SELECT EXISTS(SELECT 1 FROM public.classes WHERE join_code = result) INTO code_exists;
    
    -- Exit loop if unique code found
    IF NOT code_exists THEN
      EXIT;
    END IF;
  END LOOP;
  
  RETURN result;
END;
$$ LANGUAGE plpgsql;

-- Function to automatically generate join code on insert
CREATE OR REPLACE FUNCTION public.set_join_code()
RETURNS TRIGGER AS $$
BEGIN
  -- Only generate if join_code is not provided
  IF NEW.join_code IS NULL OR NEW.join_code = '' THEN
    NEW.join_code := public.generate_join_code();
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to automatically generate join codes
CREATE TRIGGER classes_set_join_code
  BEFORE INSERT ON public.classes
  FOR EACH ROW
  EXECUTE FUNCTION public.set_join_code();

-- Create class_members table for user-class relationships
CREATE TABLE IF NOT EXISTS public.class_members (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  class_id UUID NOT NULL REFERENCES public.classes(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  role TEXT DEFAULT 'student' CHECK (role IN ('student', 'teacher', 'admin')),
  joined_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  is_active BOOLEAN DEFAULT true,
  
  -- Ensure unique membership per class
  CONSTRAINT class_members_unique_membership UNIQUE(class_id, user_id)
);

-- Create indexes for class_members
CREATE INDEX IF NOT EXISTS class_members_class_id_idx ON public.class_members(class_id);
CREATE INDEX IF NOT EXISTS class_members_user_id_idx ON public.class_members(user_id);
CREATE INDEX IF NOT EXISTS class_members_role_idx ON public.class_members(role);
CREATE INDEX IF NOT EXISTS class_members_joined_at_idx ON public.class_members(joined_at);

-- Enable RLS on class_members table
ALTER TABLE public.class_members ENABLE ROW LEVEL SECURITY;

-- RLS policies for class_members

-- Users can view their own membership records only (non-recursive)
CREATE POLICY "Users can view own membership only" ON public.class_members
FOR SELECT 
TO authenticated
USING (auth.uid() = user_id);

-- Users can join classes (insert their own membership)
CREATE POLICY "Users can join classes" ON public.class_members
FOR INSERT 
TO authenticated
WITH CHECK (auth.uid() = user_id);

-- Users can update their own membership status
CREATE POLICY "Users can update own membership" ON public.class_members
FOR UPDATE 
TO authenticated
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

-- Note: Advanced admin features for managing memberships have been removed
-- to prevent RLS recursion issues. Basic functionality (join/leave) still works.

-- Grant permissions
GRANT SELECT ON public.classes TO anon, authenticated;
GRANT INSERT, UPDATE, DELETE ON public.classes TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON public.class_members TO authenticated;

-- Insert demo class for testing
INSERT INTO public.classes (name, join_code, description, created_by) 
VALUES (
  'Monday Drawing Fundamentals',
  'DRAW01',
  'A supportive environment for learning drawing basics and sharing creative work',
  NULL  -- Will be updated when we create demo users
) ON CONFLICT (join_code) DO NOTHING;

================
File: supabase/migrations/20250102000002_create_posts_table.sql
================
-- Posts table migration
-- This migration creates the posts table for ephemeral artwork sharing

-- Create posts table with ephemeral properties
CREATE TABLE IF NOT EXISTS public.posts (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  class_id UUID NOT NULL REFERENCES public.classes(id) ON DELETE CASCADE,
  image_url TEXT NOT NULL,
  image_path TEXT, -- Storage path for cleanup
  frame_style TEXT, -- Optional frame selection ('none', 'classic', 'modern', 'vintage', etc.)
  title TEXT, -- Optional artwork title
  description TEXT, -- Optional artwork description
  
  -- Ephemeral properties
  max_viewers INTEGER DEFAULT 5 CHECK (max_viewers > 0 AND max_viewers <= 50),
  view_count INTEGER DEFAULT 0 CHECK (view_count >= 0),
  duration_minutes INTEGER NOT NULL CHECK (duration_minutes > 0),
  expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
  is_expired BOOLEAN DEFAULT false,
  
  -- Metadata
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  
  -- Constraints
  CONSTRAINT posts_image_url_not_empty CHECK (length(trim(image_url)) > 0),
  CONSTRAINT posts_expires_in_future CHECK (expires_at > created_at),
  CONSTRAINT posts_view_count_max CHECK (view_count <= max_viewers)
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS posts_user_id_idx ON public.posts(user_id);
CREATE INDEX IF NOT EXISTS posts_class_id_idx ON public.posts(class_id);
CREATE INDEX IF NOT EXISTS posts_expires_at_idx ON public.posts(expires_at);
CREATE INDEX IF NOT EXISTS posts_created_at_idx ON public.posts(created_at);
CREATE INDEX IF NOT EXISTS posts_is_expired_idx ON public.posts(is_expired);

-- Compound indexes for common queries
CREATE INDEX IF NOT EXISTS posts_class_active_idx ON public.posts(class_id, is_expired, created_at DESC);
CREATE INDEX IF NOT EXISTS posts_user_active_idx ON public.posts(user_id, is_expired, created_at DESC);

-- Enable RLS on posts table
ALTER TABLE public.posts ENABLE ROW LEVEL SECURITY;

-- RLS policies for posts table

-- Users can view posts in classes (simplified non-recursive policy)
CREATE POLICY "Users can view posts in their classes" ON public.posts
FOR SELECT 
TO authenticated
USING (
  -- Users can always see their own posts
  user_id = auth.uid()
  OR
  -- Users can see posts in active classes (simplified to avoid recursion)
  -- Class membership validation happens at the application level
  class_id IN (
    SELECT id FROM public.classes 
    WHERE is_active = true
  )
  AND is_expired = false
);

-- Users can create posts (simplified check)
CREATE POLICY "Users can create posts" ON public.posts
FOR INSERT 
TO authenticated
WITH CHECK (
  auth.uid() = user_id
  -- Simplified: just check that class exists and is active
  AND class_id IN (
    SELECT id FROM public.classes 
    WHERE is_active = true
  )
);

-- Users can update their own posts
CREATE POLICY "Users can update own posts" ON public.posts
FOR UPDATE 
TO authenticated
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

-- Users can delete their own posts
CREATE POLICY "Users can delete own posts" ON public.posts
FOR DELETE 
TO authenticated
USING (auth.uid() = user_id);

-- Add updated_at trigger
CREATE TRIGGER posts_updated_at
  BEFORE UPDATE ON public.posts
  FOR EACH ROW
  EXECUTE FUNCTION public.handle_updated_at();

-- Function to automatically set expires_at based on duration_minutes
CREATE OR REPLACE FUNCTION public.set_post_expiration()
RETURNS TRIGGER AS $$
BEGIN
  -- Calculate expiration time if not explicitly set
  IF NEW.expires_at IS NULL THEN
    NEW.expires_at := NEW.created_at + (NEW.duration_minutes || ' minutes')::interval;
  END IF;
  
  -- Ensure expiration is in the future
  IF NEW.expires_at <= NOW() THEN
    RAISE EXCEPTION 'Post expiration must be in the future';
  END IF;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to set expiration time
CREATE TRIGGER posts_set_expiration
  BEFORE INSERT ON public.posts
  FOR EACH ROW
  EXECUTE FUNCTION public.set_post_expiration();

-- Function to mark expired posts
CREATE OR REPLACE FUNCTION public.mark_expired_posts()
RETURNS INTEGER AS $$
DECLARE
  expired_count INTEGER;
BEGIN
  -- Mark posts as expired and get count
  UPDATE public.posts 
  SET is_expired = true, updated_at = NOW()
  WHERE expires_at <= NOW() AND is_expired = false;
  
  GET DIAGNOSTICS expired_count = ROW_COUNT;
  
  -- Log the cleanup (in production, you'd use proper logging)
  RAISE NOTICE 'Marked % posts as expired at %', expired_count, NOW();
  
  RETURN expired_count;
END;
$$ LANGUAGE plpgsql;

-- Function to increment view count safely
CREATE OR REPLACE FUNCTION public.increment_post_view(post_id UUID, viewer_id UUID)
RETURNS BOOLEAN AS $$
DECLARE
  current_views INTEGER;
  max_views INTEGER;
  post_user_id UUID;
BEGIN
  -- Get current view count, max viewers, and post owner
  SELECT view_count, max_viewers, user_id 
  INTO current_views, max_views, post_user_id
  FROM public.posts 
  WHERE id = post_id AND is_expired = false;
  
  -- Check if post exists and not expired
  IF NOT FOUND THEN
    RETURN false;
  END IF;
  
  -- Don't count views from the post owner
  IF post_user_id = viewer_id THEN
    RETURN true;
  END IF;
  
  -- Check if view limit reached
  IF current_views >= max_views THEN
    RETURN false;
  END IF;
  
  -- Increment view count
  UPDATE public.posts 
  SET view_count = view_count + 1, updated_at = NOW()
  WHERE id = post_id;
  
  RETURN true;
END;
$$ LANGUAGE plpgsql;

-- Create post_views table to track individual views (prevent double counting)
CREATE TABLE IF NOT EXISTS public.post_views (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  post_id UUID NOT NULL REFERENCES public.posts(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  viewed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  
  -- Prevent duplicate views
  CONSTRAINT post_views_unique_view UNIQUE(post_id, user_id)
);

-- Create indexes for post_views
CREATE INDEX IF NOT EXISTS post_views_post_id_idx ON public.post_views(post_id);
CREATE INDEX IF NOT EXISTS post_views_user_id_idx ON public.post_views(user_id);
CREATE INDEX IF NOT EXISTS post_views_viewed_at_idx ON public.post_views(viewed_at);

-- Enable RLS on post_views
ALTER TABLE public.post_views ENABLE ROW LEVEL SECURITY;

-- RLS policies for post_views

-- Users can view their own viewing history
CREATE POLICY "Users can view own viewing history" ON public.post_views
FOR SELECT 
TO authenticated
USING (auth.uid() = user_id);

-- Users can record their own views
CREATE POLICY "Users can record own views" ON public.post_views
FOR INSERT 
TO authenticated
WITH CHECK (auth.uid() = user_id);

-- Post owners can see who viewed their posts
CREATE POLICY "Post owners can see viewers" ON public.post_views
FOR SELECT 
TO authenticated
USING (
  post_id IN (
    SELECT id FROM public.posts WHERE user_id = auth.uid()
  )
);

-- Grant permissions
GRANT SELECT, INSERT, UPDATE, DELETE ON public.posts TO authenticated;
GRANT SELECT, INSERT ON public.post_views TO authenticated;

================
File: supabase/migrations/20250102000003_create_comments_table.sql
================
-- Comments table migration
-- This migration creates the comments table for peer interactions on posts

-- Create comments table with character limits
CREATE TABLE IF NOT EXISTS public.comments (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  post_id UUID NOT NULL REFERENCES public.posts(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  content TEXT NOT NULL CHECK (length(content) >= 1 AND length(content) <= 150),
  is_edited BOOLEAN DEFAULT false,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  
  -- Constraints
  CONSTRAINT comments_content_not_empty CHECK (length(trim(content)) > 0)
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS comments_post_id_idx ON public.comments(post_id);
CREATE INDEX IF NOT EXISTS comments_user_id_idx ON public.comments(user_id);
CREATE INDEX IF NOT EXISTS comments_created_at_idx ON public.comments(created_at);

-- Compound index for post comments ordered by time
CREATE INDEX IF NOT EXISTS comments_post_time_idx ON public.comments(post_id, created_at);

-- Enable RLS on comments table
ALTER TABLE public.comments ENABLE ROW LEVEL SECURITY;

-- RLS policies for comments

-- Users can view comments on accessible posts (simplified non-recursive policy)
CREATE POLICY "Users can view comments on accessible posts" ON public.comments
FOR SELECT 
TO authenticated
USING (
  -- Users can always see comments on their own posts
  post_id IN (SELECT id FROM public.posts WHERE user_id = auth.uid())
  OR
  -- Users can see comments on non-expired posts (simplified for now)
  post_id IN (SELECT id FROM public.posts WHERE is_expired = false)
);

-- Users can create comments (simplified)
CREATE POLICY "Users can create comments" ON public.comments
FOR INSERT 
TO authenticated
WITH CHECK (
  auth.uid() = user_id
  -- Simplified: just check post exists and isn't expired
  AND post_id IN (
    SELECT id FROM public.posts 
    WHERE is_expired = false
  )
);

-- Users can update their own comments (with edit tracking)
CREATE POLICY "Users can update own comments" ON public.comments
FOR UPDATE 
TO authenticated
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

-- Users can delete their own comments
CREATE POLICY "Users can delete own comments" ON public.comments
FOR DELETE 
TO authenticated
USING (auth.uid() = user_id);

-- Add updated_at trigger
CREATE TRIGGER comments_updated_at
  BEFORE UPDATE ON public.comments
  FOR EACH ROW
  EXECUTE FUNCTION public.handle_updated_at();

-- Function to track comment edits
CREATE OR REPLACE FUNCTION public.track_comment_edit()
RETURNS TRIGGER AS $$
BEGIN
  -- Mark as edited if content changes
  IF OLD.content != NEW.content THEN
    NEW.is_edited = true;
  END IF;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to track edits
CREATE TRIGGER comments_track_edit
  BEFORE UPDATE ON public.comments
  FOR EACH ROW
  EXECUTE FUNCTION public.track_comment_edit();

-- Function to get comment count for a post
CREATE OR REPLACE FUNCTION public.get_post_comment_count(post_uuid UUID)
RETURNS INTEGER AS $$
DECLARE
  comment_count INTEGER;
BEGIN
  SELECT COUNT(*) INTO comment_count
  FROM public.comments 
  WHERE post_id = post_uuid;
  
  RETURN COALESCE(comment_count, 0);
END;
$$ LANGUAGE plpgsql;

-- Function to validate comment content (for encouraging, supportive comments)
CREATE OR REPLACE FUNCTION public.validate_comment_content()
RETURNS TRIGGER AS $$
BEGIN
  -- Basic content validation
  IF length(trim(NEW.content)) = 0 THEN
    RAISE EXCEPTION 'Comment cannot be empty';
  END IF;
  
  -- Character limit check (also enforced by constraint)
  IF length(NEW.content) > 150 THEN
    RAISE EXCEPTION 'Comment cannot exceed 150 characters';
  END IF;
  
  -- Could add more sophisticated content filtering here
  -- For now, just basic validation
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger for content validation
CREATE TRIGGER comments_validate_content
  BEFORE INSERT OR UPDATE ON public.comments
  FOR EACH ROW
  EXECUTE FUNCTION public.validate_comment_content();

-- Create a view for comments with user information (for easier queries)
CREATE OR REPLACE VIEW public.comments_with_users AS
SELECT 
  c.id,
  c.post_id,
  c.user_id,
  c.content,
  c.is_edited,
  c.created_at,
  c.updated_at,
  u.username,
  u.avatar_url
FROM public.comments c
INNER JOIN public.users u ON c.user_id = u.id;

-- Grant permissions
GRANT SELECT, INSERT, UPDATE, DELETE ON public.comments TO authenticated;
GRANT SELECT ON public.comments_with_users TO authenticated;

================
File: supabase/migrations/20250102000005_demo_data_seed.sql
================
-- Demo data seed migration - Task 3.10
-- This migration creates pre-populated demo content for Draft's ephemeral art sharing:
-- - 5 realistic fake classmate profiles
-- - High-quality sample artwork posts with varied engagement
-- - Encouraging, supportive demo comments
-- - Realistic timer states and expiration times

-- Create demo users (these will be fake students in the demo class)
INSERT INTO auth.users (id, email, email_confirmed_at, created_at, updated_at) VALUES 
  ('11111111-1111-1111-1111-111111111111', 'maya@demouser.local', NOW(), NOW(), NOW()),
  ('22222222-2222-2222-2222-222222222222', 'jordan@demouser.local', NOW(), NOW(), NOW()),
  ('33333333-3333-3333-3333-333333333333', 'sam@demouser.local', NOW(), NOW(), NOW()),
  ('44444444-4444-4444-4444-444444444444', 'casey@demouser.local', NOW(), NOW(), NOW()),
  ('55555555-5555-5555-5555-555555555555', 'riley@demouser.local', NOW(), NOW(), NOW())
ON CONFLICT (id) DO NOTHING;

-- Create corresponding user profiles
INSERT INTO public.users (id, email, username, avatar_url, created_at, updated_at) VALUES 
  ('11111111-1111-1111-1111-111111111111', 'maya@demouser.local', 'maya_sketches', NULL, NOW(), NOW()),
  ('22222222-2222-2222-2222-222222222222', 'jordan@demouser.local', 'jordan_art', NULL, NOW(), NOW()),
  ('33333333-3333-3333-3333-333333333333', 'sam@demouser.local', 'sam_draws', NULL, NOW(), NOW()),
  ('44444444-4444-4444-4444-444444444444', 'casey@demouser.local', 'casey_creates', NULL, NOW(), NOW()),
  ('55555555-5555-5555-5555-555555555555', 'riley@demouser.local', 'riley_paints', NULL, NOW(), NOW())
ON CONFLICT (id) DO NOTHING;

-- Get the demo class ID
DO $$
DECLARE
  demo_class_id UUID;
  maya_id UUID := '11111111-1111-1111-1111-111111111111';
  jordan_id UUID := '22222222-2222-2222-2222-222222222222';
  sam_id UUID := '33333333-3333-3333-3333-333333333333';
  casey_id UUID := '44444444-4444-4444-4444-444444444444';
  riley_id UUID := '55555555-5555-5555-5555-555555555555';
  
  -- Post IDs for consistent references
  maya_post_id UUID := '10000000-0000-0000-0000-000000000001';
  jordan_post_id UUID := '10000000-0000-0000-0000-000000000002';
  sam_post_id UUID := '10000000-0000-0000-0000-000000000003';
  casey_post_id UUID := '10000000-0000-0000-0000-000000000004';
BEGIN
  -- Get the demo class
  SELECT id INTO demo_class_id FROM public.classes WHERE join_code = 'DRAW01';
  
  IF demo_class_id IS NULL THEN
    RAISE EXCEPTION 'Demo class DRAW01 not found. Please run the classes migration first.';
  END IF;
  
  -- Add demo users as class members
  INSERT INTO public.class_members (id, class_id, user_id, role, joined_at, is_active) VALUES 
    (gen_random_uuid(), demo_class_id, maya_id, 'student', NOW() - INTERVAL '2 days', true),
    (gen_random_uuid(), demo_class_id, jordan_id, 'student', NOW() - INTERVAL '2 days', true),
    (gen_random_uuid(), demo_class_id, sam_id, 'student', NOW() - INTERVAL '1 day', true),
    (gen_random_uuid(), demo_class_id, casey_id, 'student', NOW() - INTERVAL '1 day', true),
    (gen_random_uuid(), demo_class_id, riley_id, 'student', NOW() - INTERVAL '4 hours', true)
  ON CONFLICT DO NOTHING;
  
  -- Create sample artwork posts with realistic timing
  -- Updated with working image URLs using consistent Picsum seeds
  
  -- Maya's post (expires in 45 minutes, 3 of 5 viewers)
  INSERT INTO public.posts (
    id, user_id, class_id, image_url, image_path, frame_style, title, description,
    max_viewers, view_count, duration_minutes, expires_at, is_expired, created_at, updated_at
  ) VALUES (
    maya_post_id, maya_id, demo_class_id,
    'https://picsum.photos/800/600?random=maya1',
    'demo/maya_charcoal_portrait.jpg',
    'classic',
    'Charcoal Portrait Study',
    'Working on capturing light and shadow in this self-portrait. Still learning!',
    5, 3, 60,
    NOW() + INTERVAL '45 minutes',
    false,
    NOW() - INTERVAL '15 minutes',
    NOW() - INTERVAL '15 minutes'
  ) ON CONFLICT (id) DO NOTHING;
  
  -- Jordan's post (expires in 2 hours 20 minutes, 2 of 4 viewers)
  INSERT INTO public.posts (
    id, user_id, class_id, image_url, image_path, frame_style, title, description,
    max_viewers, view_count, duration_minutes, expires_at, is_expired, created_at, updated_at
  ) VALUES (
    jordan_post_id, jordan_id, demo_class_id,
    'https://picsum.photos/800/600?random=jordan1',
    'demo/jordan_watercolor_landscape.jpg',
    'modern',
    'Watercolor Landscape',
    'First attempt at wet-on-wet technique. The colors bled more than expected but I like it!',
    4, 2, 180,
    NOW() + INTERVAL '2 hours 20 minutes',
    false,
    NOW() - INTERVAL '40 minutes',
    NOW() - INTERVAL '40 minutes'
  ) ON CONFLICT (id) DO NOTHING;
  
  -- Sam's post (expires in 18 minutes, 5 of 5 viewers - max reached)
  INSERT INTO public.posts (
    id, user_id, class_id, image_url, image_path, frame_style, title, description,
    max_viewers, view_count, duration_minutes, expires_at, is_expired, created_at, updated_at
  ) VALUES (
    sam_post_id, sam_id, demo_class_id,
    'https://picsum.photos/800/600?random=sam1',
    'demo/sam_pencil_study.jpg',
    NULL,
    'Pencil Study - Hands',
    'Practiced drawing hands today. They are so difficult but getting better!',
    5, 5, 30,
    NOW() + INTERVAL '18 minutes',
    false,
    NOW() - INTERVAL '12 minutes',
    NOW() - INTERVAL '12 minutes'
  ) ON CONFLICT (id) DO NOTHING;
  
  -- Casey's post (expires tomorrow, 1 of 3 viewers, fresh post)
  INSERT INTO public.posts (
    id, user_id, class_id, image_url, image_path, frame_style, title, description,
    max_viewers, view_count, duration_minutes, expires_at, is_expired, created_at, updated_at
  ) VALUES (
    casey_post_id, casey_id, demo_class_id,
    'https://picsum.photos/800/600?random=casey1',
    'demo/casey_digital_sketch.jpg',
    'vintage',
    'Digital Character Sketch',
    'Exploring digital art for the first time. Really enjoying the undo button! 😊',
    3, 1, 1440, -- 24 hours
    NOW() + INTERVAL '23 hours 45 minutes',
    false,
    NOW() - INTERVAL '15 minutes',
    NOW() - INTERVAL '15 minutes'
  ) ON CONFLICT (id) DO NOTHING;
  
  -- Record some post views to make the engagement realistic
  INSERT INTO public.post_views (post_id, user_id, viewed_at) VALUES 
    -- Maya's post viewers
    (maya_post_id, jordan_id, NOW() - INTERVAL '10 minutes'),
    (maya_post_id, sam_id, NOW() - INTERVAL '8 minutes'),
    (maya_post_id, casey_id, NOW() - INTERVAL '5 minutes'),
    
    -- Jordan's post viewers  
    (jordan_post_id, maya_id, NOW() - INTERVAL '35 minutes'),
    (jordan_post_id, sam_id, NOW() - INTERVAL '20 minutes'),
    
    -- Sam's post viewers (max reached)
    (sam_post_id, maya_id, NOW() - INTERVAL '10 minutes'),
    (sam_post_id, jordan_id, NOW() - INTERVAL '8 minutes'),
    (sam_post_id, casey_id, NOW() - INTERVAL '6 minutes'),
    (sam_post_id, riley_id, NOW() - INTERVAL '4 minutes'),
    (sam_post_id, maya_id, NOW() - INTERVAL '2 minutes'), -- Duplicate view (should be ignored)
    
    -- Casey's post viewer
    (casey_post_id, riley_id, NOW() - INTERVAL '12 minutes')
  ON CONFLICT (post_id, user_id) DO NOTHING;
  
  -- Create encouraging, supportive demo comments
  INSERT INTO public.comments (post_id, user_id, content, created_at, updated_at) VALUES 
    -- Comments on Maya's post
    (maya_post_id, jordan_id, 'Wow, the shading on the cheekbone is really well done! You captured the light beautifully.', NOW() - INTERVAL '8 minutes', NOW() - INTERVAL '8 minutes'),
    (maya_post_id, sam_id, 'I love how you used the charcoal texture to show depth. The contrast is striking!', NOW() - INTERVAL '6 minutes', NOW() - INTERVAL '6 minutes'),
    (maya_post_id, casey_id, 'This is incredible! The way you rendered the hair texture is so realistic. Goals! ✨', NOW() - INTERVAL '3 minutes', NOW() - INTERVAL '3 minutes'),
    
    -- Comments on Jordan's post
    (jordan_post_id, maya_id, 'The color blending in the sky is absolutely gorgeous! Sometimes happy accidents make the best art.', NOW() - INTERVAL '30 minutes', NOW() - INTERVAL '30 minutes'),
    (jordan_post_id, sam_id, 'I can feel the atmosphere in this piece. The wet-on-wet technique gives it such a dreamy quality.', NOW() - INTERVAL '18 minutes', NOW() - INTERVAL '18 minutes'),
    
    -- Comments on Sam's post  
    (sam_post_id, maya_id, 'Hands are so challenging but you nailed the proportions! The gesture feels very natural.', NOW() - INTERVAL '8 minutes', NOW() - INTERVAL '8 minutes'),
    (sam_post_id, jordan_id, 'The way you captured the knuckle details is amazing. I struggle with hands so much!', NOW() - INTERVAL '6 minutes', NOW() - INTERVAL '6 minutes'),
    (sam_post_id, casey_id, 'Such clean linework! You can really see your improvement from practice. Keep it up! 👏', NOW() - INTERVAL '4 minutes', NOW() - INTERVAL '4 minutes'),
    (sam_post_id, riley_id, 'The anatomy looks spot on. This gives me motivation to practice hands more!', NOW() - INTERVAL '2 minutes', NOW() - INTERVAL '2 minutes'),
    
    -- Comments on Casey's post
    (casey_post_id, riley_id, 'Love seeing you explore digital! The character design has so much personality. 🎨', NOW() - INTERVAL '10 minutes', NOW() - INTERVAL '10 minutes')
  ON CONFLICT DO NOTHING;
  
  -- Add some AI feedback for demonstration (only on posts where user "requested" it)
  INSERT INTO public.ai_feedback (post_id, user_id, feedback_text, feedback_status, processing_time_ms, ai_model, created_at, updated_at) VALUES 
    (maya_post_id, maya_id, 
     'Your charcoal portrait demonstrates excellent understanding of light and shadow. The contrast you''ve achieved creates strong dimensionality, particularly in the facial structure. The way you''ve handled the transition from light to shadow on the cheekbone shows developing technical skill.

Areas of strength:
• Strong tonal range from deep blacks to subtle grays
• Good proportional accuracy in facial features  
• Effective use of charcoal texture to suggest surface quality

For continued growth, consider:
• Experimenting with softer edges in some shadow transitions
• Adding more subtle mid-tones to enhance roundness
• Exploring how reflected light affects shadow areas

This piece shows real promise and dedication to observational drawing. Keep practicing with direct observation!',
     'completed', 2847, 'gpt-4v', NOW() - INTERVAL '5 minutes', NOW() - INTERVAL '5 minutes'),
     
    (sam_post_id, sam_id,
     'This hand study shows impressive attention to anatomical accuracy and proportional relationships. Drawing hands is one of the most challenging subjects, and you''ve approached it with clear observation and patience.

Strengths in this piece:
• Accurate finger proportions and joint placement
• Good understanding of how tendons affect surface form
• Clean, confident line quality that suggests three-dimensional form
• Proper scale relationships between palm and fingers

Suggestions for development:
• Consider adding subtle shading to enhance volume
• Study how hands change when viewed from different angles
• Practice gesture drawings to capture hand movement and expression

Your improvement through practice is evident. Hands become much easier with continued observation - you''re on the right track!',
     'completed', 3156, 'gpt-4v', NOW() - INTERVAL '3 minutes', NOW() - INTERVAL '3 minutes')
  ON CONFLICT (post_id) DO NOTHING;
  
  RAISE NOTICE 'Demo data successfully created for class: %', demo_class_id;
  RAISE NOTICE 'Created 5 demo users, 4 sample posts, realistic view counts, and encouraging comments';
  RAISE NOTICE 'Post expiration times: Maya (45min), Jordan (2h20m), Sam (18min), Casey (23h45m)';
END;
$$;

================
File: supabase/migrations/20250102000009_fix_all_recursive_policies.sql
================
-- Comprehensive fix for ALL recursive policies
-- NOTE: This migration is now mostly redundant since we've updated the original
-- migrations to be non-recursive from the start. Keeping for safety and post_views.

-- ==========================================
-- ENSURE POST_VIEWS TABLE HAS PROPER POLICIES
-- ==========================================

-- Drop any existing post_views policies that might cause issues
DROP POLICY IF EXISTS "Class members can view post views" ON public.post_views;

-- Create simple, non-recursive policies for post_views
CREATE POLICY "Users can view own post views" ON public.post_views
FOR SELECT 
TO authenticated
USING (auth.uid() = user_id);

CREATE POLICY "Users can record post views" ON public.post_views
FOR INSERT 
TO authenticated
WITH CHECK (auth.uid() = user_id);

-- ==========================================
-- SAFETY DROPS (NO-OPS IF ALREADY FIXED)
-- ==========================================

-- These should now be no-ops since we fixed the original migrations
-- but keeping for safety in case someone runs migrations out of order

-- Drop any problematic policies that might still exist
DROP POLICY IF EXISTS "Class members can view class membership" ON public.class_members;
DROP POLICY IF EXISTS "Class admins can manage memberships" ON public.class_members;
DROP POLICY IF EXISTS "Class members can view class posts" ON public.posts;
DROP POLICY IF EXISTS "Class members can create posts" ON public.posts;
DROP POLICY IF EXISTS "Class members can view comments" ON public.comments;
DROP POLICY IF EXISTS "Class members can create comments" ON public.comments;

-- ==========================================
-- SUMMARY
-- ==========================================

-- This migration now primarily ensures post_views table has proper policies.
-- The original recursive policy issues have been fixed at the source in
-- migrations 001, 002, and 003.

================
File: .env.example
================
EXPO_PUBLIC_SUPABASE_URL=
EXPO_PUBLIC_SUPABASE_ANON_KEY=
SUPABASE_SERVICE_ROLE_KEY=
DATABASE_URL=

EXPO_PUBLIC_SUPABASE_URL_LOCAL=
EXPO_PUBLIC_SUPABASE_ANON_KEY_LOCAL=

================
File: app.config.js
================
/**
 * Expo Configuration
 * 
 * This file configures the Expo app with environment variables
 * and all necessary settings for the VEO Creative Image Messenger app.
 */

// Load environment variables
require('dotenv').config();

console.log('🔧 App Config - Loading environment variables');
console.log('📍 EXPO_PUBLIC_SUPABASE_URL:', process.env.EXPO_PUBLIC_SUPABASE_URL ? 'Set ✓' : 'Missing ❌');
console.log('📍 EXPO_PUBLIC_SUPABASE_URL_LOCAL:', process.env.EXPO_PUBLIC_SUPABASE_URL_LOCAL ? 'Set ✓' : 'Missing ❌');

module.exports = {
  expo: {
    name: "SnapClone",
    slug: "SnapClone", 
    version: "1.0.0",
    orientation: "portrait",
    icon: "./assets/images/icon.png",
    scheme: "snapclone",
    userInterfaceStyle: "automatic",
    newArchEnabled: true,
    ios: {
      supportsTablet: true,
      bundleIdentifier: "com.davidvanstory.ephemeralart"
    },
    android: {
      adaptiveIcon: {
        foregroundImage: "./assets/images/adaptive-icon.png",
        backgroundColor: "#ffffff"
      },
      edgeToEdgeEnabled: true
    },
    web: {
      bundler: "metro",
      output: "static",
      favicon: "./assets/images/favicon.png"
    },
    plugins: [
      "expo-router",
      [
        "expo-splash-screen",
        {
          image: "./assets/images/splash-icon.png",
          imageWidth: 200,
          resizeMode: "contain",
          backgroundColor: "#ffffff"
        }
      ],
      [
        "expo-camera",
        {
          cameraPermission: "Allow SnapClone to access your camera to take photos",
          microphonePermission: "Allow SnapClone to access your microphone to record videos",
          recordAudioAndroid: true
        }
      ]
    ],
    experiments: {
      typedRoutes: true
    },
    extra: {
       // EAS Configuration
       eas: {
        projectId: "e4bf0b5b-3aac-4935-b2a7-5ef4f32f796d"
      },
      // Cloud Supabase Configuration
      EXPO_PUBLIC_SUPABASE_URL: process.env.EXPO_PUBLIC_SUPABASE_URL,
      EXPO_PUBLIC_SUPABASE_ANON_KEY: process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY,
      
      // Local Supabase Configuration
      EXPO_PUBLIC_SUPABASE_URL_LOCAL: process.env.EXPO_PUBLIC_SUPABASE_URL_LOCAL,
      EXPO_PUBLIC_SUPABASE_ANON_KEY_LOCAL: process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY_LOCAL,
      
      // Other environment variables
      SUPABASE_SERVICE_ROLE_KEY: process.env.SUPABASE_SERVICE_ROLE_KEY,
      DATABASE_URL: process.env.DATABASE_URL
    }
  }
};

================
File: app/(auth)/profile-setup.tsx
================
/**
 * Profile Setup Screen Component - Simplified for EphemeralArt
 * 
 * This screen implements the welcome screen from UIDesign.md specifications:
 * - Centered content with generous whitespace
 * - "Welcome, [Name]!" in Instrument Serif 32pt
 * - Simplified optional name entry for EphemeralArt
 * - "Join a Class" button with warm sage background
 * - Glass morphism styling consistent with auth flow
 * - Streamlined onboarding for anxiety-reducing experience
 */

import { router } from 'expo-router';
import React, { useEffect, useState } from 'react';
import {
  KeyboardAvoidingView,
  Platform,
  SafeAreaView,
  ScrollView,
  StyleSheet,
  TextInput,
  TouchableOpacity,
  View
} from 'react-native';
import { ThemedText } from '../../components/ThemedText';
import GlassMorphismCard from '../../components/ui/GlassMorphismCard';
import { Colors } from '../../constants/Colors';
import { useColorScheme } from '../../hooks/useColorScheme';
import { useAuthStore } from '../../store/authStore';

export default function ProfileSetupScreen() {
  console.log('👤 Profile Setup Screen - Rendering simplified EphemeralArt welcome setup');

  const colorScheme = useColorScheme();
  const colors = Colors[colorScheme ?? 'light'];

  // Form state - simplified for EphemeralArt
  const [displayName, setDisplayName] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [nameFocused, setNameFocused] = useState(false);

  // Auth store
  const { user, updateProfile, isLoading } = useAuthStore();

  // Redirect if not authenticated  
  useEffect(() => {
    if (!user) {
      console.log('❌ Profile Setup Screen - User not authenticated, redirecting to login');
      router.replace('/(auth)/login');
    }
  }, [user]);

  /**
   * Handle profile setup completion (optional step)
   */
  const handleCompleteProfile = async () => {
    console.log('🚀 Profile Setup Screen - Starting simplified profile completion');

    setIsSubmitting(true);

    try {
      // For EphemeralArt, we'll use a simple approach - either the display name or email prefix
      const profileName = displayName.trim() || user?.email?.split('@')[0] || 'Artist';
      
      const result = await updateProfile({
        username: profileName.toLowerCase().replace(/[^a-zA-Z0-9]/g, ''),
      });

      if (result.success) {
        console.log('✅ Profile Setup Screen - Profile completed successfully, proceeding to class selection');
        // Go directly to main app where they can join a class
        router.replace('/(tabs)');
      } else {
        console.log('⚠️ Profile Setup Screen - Profile update failed, continuing anyway');
        // For EphemeralArt, we'll be forgiving and let users continue
        router.replace('/(tabs)');
      }
    } catch (error) {
      console.error('❌ Profile Setup Screen - Unexpected profile update error:', error);
      // For EphemeralArt, we'll be forgiving and let users continue
      router.replace('/(tabs)');
    } finally {
      setIsSubmitting(false);
    }
  };

  /**
   * Handle skip profile setup (go directly to app)
   */
  const handleSkipSetup = () => {
    console.log('⏭️ Profile Setup Screen - User skipping profile setup, proceeding to class selection');
    router.replace('/(tabs)');
  };

  const isFormDisabled = isLoading || isSubmitting;

  // Show loading if user is not loaded yet
  if (!user) {
    return (
      <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>
        <View style={styles.loadingContainer}>
          <ThemedText type="bodyText" style={[styles.loadingText, { color: colors.textSecondary }]}>
            Loading...
          </ThemedText>
        </View>
      </SafeAreaView>
    );
  }

  // Get user's name for welcome message
  const userName = user.email?.split('@')[0] || 'Artist';

  return (
    <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>
      {/* Soft gradient background per UIDesign.md */}
      <View style={[styles.backgroundGradient, { backgroundColor: colors.surface }]} />
      
      <KeyboardAvoidingView
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={styles.keyboardView}
      >
        <ScrollView 
          style={styles.scrollView}
          contentContainerStyle={styles.scrollContent}
          showsVerticalScrollIndicator={false}
        >
          <View style={styles.content}>
            {/* Glass Morphism Card Container per UIDesign.md */}
            <GlassMorphismCard type="primary" style={styles.welcomeCard}>
              {/* Welcome Header per UIDesign.md */}
              <View style={styles.header}>
                <ThemedText type="appName" style={[styles.welcomeTitle, { color: colors.text }]}>
                  Welcome to EphemeralArt!
                </ThemedText>
                <ThemedText type="bodyText" style={[styles.welcomeSubtitle, { color: colors.textSecondary }]}>
                  You're ready to start sharing your artwork in a supportive, ephemeral environment.
                </ThemedText>
              </View>

              {/* Optional Name Entry */}
              <View style={styles.form}>
                <View style={styles.inputGroup}>
                  <ThemedText type="label" style={[styles.label, { color: colors.text }]}>
                    Display Name (Optional)
                  </ThemedText>
                  <TextInput
                    style={[
                      styles.input,
                      { 
                        borderColor: nameFocused ? colors.accentSage : colors.border,
                        backgroundColor: nameFocused ? colors.surface : colors.background,
                        color: colors.text,
                        fontFamily: 'Montserrat_400Regular',
                      }
                    ]}
                    value={displayName}
                    onChangeText={setDisplayName}
                    onFocus={() => setNameFocused(true)}
                    onBlur={() => setNameFocused(false)}
                    placeholder={`${userName} (default)`}
                    placeholderTextColor={colors.textTertiary}
                    autoCapitalize="words"
                    autoCorrect={false}
                    editable={!isFormDisabled}
                  />
                  <ThemedText type="caption" style={[styles.helperText, { color: colors.textTertiary }]}>
                    How would you like classmates to see your name?
                  </ThemedText>
                </View>
              </View>

              {/* Action Buttons */}
              <View style={styles.buttonContainer}>
                {/* Primary Action - Join a Class */}
                <TouchableOpacity
                  style={[
                    styles.primaryButton,
                    { 
                      backgroundColor: colors.accentSage,
                      opacity: isFormDisabled ? 0.6 : 1,
                    }
                  ]}
                  onPress={handleCompleteProfile}
                  disabled={isFormDisabled}
                  activeOpacity={0.8}
                >
                  <ThemedText type="button" style={styles.primaryButtonText}>
                    {isFormDisabled ? 'Setting Up...' : 'Join a Class'}
                  </ThemedText>
                </TouchableOpacity>

                {/* Secondary Action - Skip Setup */}
                <TouchableOpacity
                  style={[
                    styles.secondaryButton,
                    { 
                      borderColor: colors.accentSage,
                      opacity: isFormDisabled ? 0.6 : 1,
                    }
                  ]}
                  onPress={handleSkipSetup}
                  disabled={isFormDisabled}
                  activeOpacity={0.8}
                >
                  <ThemedText type="button" style={[styles.secondaryButtonText, { color: colors.accentSage }]}>
                    Continue as {userName}
                  </ThemedText>
                </TouchableOpacity>
              </View>
            </GlassMorphismCard>
          </View>
        </ScrollView>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}

// Glass Morphism Design System Styles per UIDesign.md
const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  backgroundGradient: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    // Subtle gradient from #F8F8F8 to #FFFFFF per UIDesign.md
    opacity: 0.5,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    // Montserrat 16pt per UIDesign.md applied via ThemedText type="bodyText"
  },
  keyboardView: {
    flex: 1,
  },
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    flexGrow: 1,
    justifyContent: 'center',    // Center the glass card vertically
    paddingVertical: 40,
  },
  content: {
    paddingHorizontal: 20,       // 20px screen margins per UIDesign.md
  },
  welcomeCard: {
    padding: 24,                 // 24px section spacing per UIDesign.md
    marginHorizontal: 4,         // Slight margin for card shadow visibility
  },
  header: {
    alignItems: 'center',
    marginBottom: 24,            // 24px section spacing per UIDesign.md
    gap: 12,                     // Generous spacing for welcome message
  },
  welcomeTitle: {
    textAlign: 'center',
    // Instrument Serif 42pt per UIDesign.md applied via ThemedText type="appName"
  },
  welcomeSubtitle: {
    textAlign: 'center',
    paddingHorizontal: 8,        // Additional padding for readability
    // Montserrat 16pt per UIDesign.md applied via ThemedText type="bodyText"
  },
  form: {
    marginBottom: 24,            // 24px section spacing
  },
  inputGroup: {
    gap: 8,                      // 8px base unit between label and input
  },
  label: {
    // Montserrat 14pt Medium per UIDesign.md applied via ThemedText type="label"
  },
  input: {
    height: 50,                  // 44px+ touch target per UIDesign.md
    borderWidth: 1,
    borderRadius: 16,            // 16px border radius per UIDesign.md
    paddingHorizontal: 16,       // 16px padding per UIDesign.md
    fontSize: 14,                // 14pt per UIDesign.md
    fontFamily: 'Montserrat_400Regular',
  },
  helperText: {
    marginTop: 4,
    // Montserrat 11pt per UIDesign.md applied via ThemedText type="caption"
  },
  buttonContainer: {
    gap: 12,                     // 12px gap between buttons
  },
  primaryButton: {
    height: 50,                  // 44px+ touch target
    borderRadius: 28,            // 28px fully rounded per UIDesign.md
    justifyContent: 'center',
    alignItems: 'center',
    
    // Glass morphism button shadow per UIDesign.md
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.1,
    shadowRadius: 16,
    elevation: 6,
  },
  primaryButtonText: {
    color: 'white',              // White text on warm sage background
    // Montserrat 16pt Medium per UIDesign.md applied via ThemedText type="button"
  },
  secondaryButton: {
    height: 50,                  // 44px+ touch target
    borderRadius: 28,            // 28px fully rounded per UIDesign.md
    borderWidth: 2,              // Border button style
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'transparent',
  },
  secondaryButtonText: {
    // Warm sage color applied via color prop
    // Montserrat 16pt Medium per UIDesign.md applied via ThemedText type="button"
  },
});

================
File: components/auth/AuthForm.tsx
================
/**
 * Reusable Authentication Form Component - Glass Morphism Implementation
 * 
 * This component implements the glass morphism input specifications from UIDesign.md:
 * - Input backgrounds: rgba(255,255,255,0.2)
 * - Input borders: rgba(255,255,255,0.3) 
 * - Placeholder text: rgba(255,255,255,0.5)
 * - Focus state: Warm sage border with subtle glow
 * - Typography: Montserrat 14pt for inputs, exact sizes per UIDesign.md
 * - Error states with soft coral accent (#E67E50)
 * - Button styling with warm sage accent and glass morphism
 */

import React, { useState } from 'react';
import {
  ActivityIndicator,
  StyleSheet,
  TextInput,
  TouchableOpacity,
  View,
} from 'react-native';
import { Colors } from '../../constants/Colors';
import { useColorScheme } from '../../hooks/useColorScheme';
import { validateEmail, validatePassword } from '../../lib/auth';
import { ThemedText } from '../ThemedText';

// Form mode type
export type AuthFormMode = 'login' | 'register';

// Form data interface
export interface AuthFormData {
  email: string;
  password: string;
  confirmPassword?: string;
}

// Component props interface
export interface AuthFormProps {
  mode: AuthFormMode;
  onSubmit: (data: AuthFormData) => Promise<void>;
  isLoading?: boolean;
  submitButtonText?: string;
  loadingButtonText?: string;
}

export default function AuthForm({
  mode,
  onSubmit,
  isLoading = false,
  submitButtonText,
  loadingButtonText,
}: AuthFormProps) {
  console.log(`📝 AuthForm - Rendering glass morphism ${mode} form`);

  const colorScheme = useColorScheme();
  const colors = Colors[colorScheme ?? 'light'];

  // Form state
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [emailError, setEmailError] = useState('');
  const [passwordErrors, setPasswordErrors] = useState<string[]>([]);
  const [confirmPasswordError, setConfirmPasswordError] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Focus states for glass morphism styling
  const [emailFocused, setEmailFocused] = useState(false);
  const [passwordFocused, setPasswordFocused] = useState(false);
  const [confirmPasswordFocused, setConfirmPasswordFocused] = useState(false);

  // Default button texts based on mode
  const defaultSubmitText = mode === 'login' ? 'Sign In to EphemeralArt' : 'Join EphemeralArt';
  const defaultLoadingText = mode === 'login' ? 'Signing In...' : 'Creating Account...';
  
  const finalSubmitText = submitButtonText || defaultSubmitText;
  const finalLoadingText = loadingButtonText || defaultLoadingText;

  /**
   * Validate form inputs based on mode
   */
  const validateForm = (): boolean => {
    console.log(`✅ AuthForm - Validating ${mode} form inputs`);
    let isValid = true;

    // Reset previous errors
    setEmailError('');
    setPasswordErrors([]);
    setConfirmPasswordError('');

    // Validate email
    if (!email.trim()) {
      setEmailError('Email is required');
      isValid = false;
    } else if (!validateEmail(email)) {
      setEmailError('Please enter a valid email address');
      isValid = false;
    }

    // Validate password
    if (!password.trim()) {
      setPasswordErrors(['Password is required']);
      isValid = false;
    } else if (mode === 'login') {
      // Login: basic length check
      if (password.length < 6) {
        setPasswordErrors(['Password must be at least 6 characters']);
        isValid = false;
      }
    } else {
      // Register: comprehensive validation
      const passwordValidation = validatePassword(password);
      if (!passwordValidation.isValid) {
        setPasswordErrors(passwordValidation.errors);
        isValid = false;
      }
    }

    // Validate password confirmation (register mode only)
    if (mode === 'register') {
      if (!confirmPassword.trim()) {
        setConfirmPasswordError('Please confirm your password');
        isValid = false;
      } else if (password !== confirmPassword) {
        setConfirmPasswordError('Passwords do not match');
        isValid = false;
      }
    }

    console.log(`📝 AuthForm - ${mode} form validation result:`, isValid);
    return isValid;
  };

  /**
   * Clear specific field error when user starts typing
   */
  const clearFieldError = (field: 'email' | 'password' | 'confirmPassword') => {
    switch (field) {
      case 'email':
        if (emailError) setEmailError('');
        break;
      case 'password':
        if (passwordErrors.length > 0) setPasswordErrors([]);
        break;
      case 'confirmPassword':
        if (confirmPasswordError) setConfirmPasswordError('');
        break;
    }
  };

  /**
   * Handle form submission
   */
  const handleSubmit = async () => {
    console.log(`🚀 AuthForm - Starting ${mode} form submission`);

    if (!validateForm()) {
      console.log(`❌ AuthForm - ${mode} form validation failed`);
      return;
    }

    setIsSubmitting(true);

    try {
      const formData: AuthFormData = {
        email: email.trim(),
        password,
      };

      // Add confirm password for registration
      if (mode === 'register') {
        formData.confirmPassword = confirmPassword;
      }

      await onSubmit(formData);
      console.log(`✅ AuthForm - ${mode} form submitted successfully`);
    } catch (error) {
      console.error(`❌ AuthForm - ${mode} form submission error:`, error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const isFormDisabled = isLoading || isSubmitting;

  return (
    <View style={styles.container}>
      {/* Email Input */}
      <View style={styles.inputGroup}>
        <ThemedText type="label" style={[styles.label, { color: colors.text }]}>
          Email Address
        </ThemedText>
        <TextInput
          style={[
            styles.input,
            { 
              borderColor: emailError 
                ? colors.accentCoral 
                : emailFocused 
                  ? colors.accentSage 
                  : colors.border,
              backgroundColor: emailFocused ? colors.surface : colors.background,
              color: colors.text,
              fontFamily: 'Montserrat_400Regular',
            }
          ]}
          value={email}
          onChangeText={(text) => {
            setEmail(text);
            clearFieldError('email');
          }}
          onFocus={() => setEmailFocused(true)}
          onBlur={() => setEmailFocused(false)}
          placeholder="Enter your email address"
          placeholderTextColor={colors.textTertiary}
          autoCapitalize="none"
          autoCorrect={false}
          keyboardType="email-address"
          editable={!isFormDisabled}
          autoComplete="email"
          textContentType="emailAddress"
        />
        {emailError ? (
          <View style={styles.errorContainer}>
            <ThemedText type="caption" style={[styles.errorText, { color: colors.accentCoral }]}>
              {emailError}
            </ThemedText>
          </View>
        ) : null}
      </View>

      {/* Password Input */}
      <View style={styles.inputGroup}>
        <ThemedText type="label" style={[styles.label, { color: colors.text }]}>
          Password
        </ThemedText>
        <TextInput
          style={[
            styles.input,
            { 
              borderColor: passwordErrors.length > 0 
                ? colors.accentCoral 
                : passwordFocused 
                  ? colors.accentSage 
                  : colors.border,
              backgroundColor: passwordFocused ? colors.surface : colors.background,
              color: colors.text,
              fontFamily: 'Montserrat_400Regular',
            }
          ]}
          value={password}
          onChangeText={(text) => {
            setPassword(text);
            clearFieldError('password');
          }}
          onFocus={() => setPasswordFocused(true)}
          onBlur={() => setPasswordFocused(false)}
          placeholder="Enter your password"
          placeholderTextColor={colors.textTertiary}
          secureTextEntry
          autoCapitalize="none"
          autoCorrect={false}
          editable={!isFormDisabled}
          autoComplete="password"
          textContentType={mode === 'register' ? 'newPassword' : 'password'}
        />
        {passwordErrors.length > 0 ? (
          <View style={styles.errorContainer}>
            {passwordErrors.map((error, index) => (
              <ThemedText key={index} type="caption" style={[styles.errorText, { color: colors.accentCoral }]}>
                {error}
              </ThemedText>
            ))}
          </View>
        ) : null}
      </View>

      {/* Confirm Password Input (Register Mode Only) */}
      {mode === 'register' && (
        <View style={styles.inputGroup}>
          <ThemedText type="label" style={[styles.label, { color: colors.text }]}>
            Confirm Password
          </ThemedText>
          <TextInput
            style={[
              styles.input,
              { 
                borderColor: confirmPasswordError 
                  ? colors.accentCoral 
                  : confirmPasswordFocused 
                    ? colors.accentSage 
                    : colors.border,
                backgroundColor: confirmPasswordFocused ? colors.surface : colors.background,
                color: colors.text,
                fontFamily: 'Montserrat_400Regular',
              }
            ]}
            value={confirmPassword}
            onChangeText={(text) => {
              setConfirmPassword(text);
              clearFieldError('confirmPassword');
            }}
            onFocus={() => setConfirmPasswordFocused(true)}
            onBlur={() => setConfirmPasswordFocused(false)}
            placeholder="Confirm your password"
            placeholderTextColor={colors.textTertiary}
            secureTextEntry
            autoCapitalize="none"
            autoCorrect={false}
            editable={!isFormDisabled}
            autoComplete="password"
            textContentType="newPassword"
          />
          {confirmPasswordError ? (
            <View style={styles.errorContainer}>
              <ThemedText type="caption" style={[styles.errorText, { color: colors.accentCoral }]}>
                {confirmPasswordError}
              </ThemedText>
            </View>
          ) : null}
        </View>
      )}

      {/* Submit Button */}
      <TouchableOpacity
        style={[
          styles.submitButton,
          { 
            backgroundColor: colors.accentSage,
            opacity: isFormDisabled ? 0.6 : 1,
          }
        ]}
        onPress={handleSubmit}
        disabled={isFormDisabled}
        activeOpacity={0.8}
      >
        <View style={styles.buttonContent}>
          {isFormDisabled && (
            <ActivityIndicator size="small" color="white" />
          )}
          <ThemedText type="button" style={styles.buttonText}>
            {isFormDisabled ? finalLoadingText : finalSubmitText}
          </ThemedText>
        </View>
      </TouchableOpacity>
    </View>
  );
}

// Glass Morphism Input Styles per UIDesign.md
const styles = StyleSheet.create({
  container: {
    gap: 20,                     // 20px between input groups
  },
  inputGroup: {
    gap: 8,                      // 8px base unit between label and input
  },
  label: {
    // Montserrat 14pt Medium per UIDesign.md applied via ThemedText type="label"
  },
  input: {
    height: 50,                  // 44px+ touch target per UIDesign.md
    borderWidth: 1,
    borderRadius: 16,            // 16px border radius per UIDesign.md
    paddingHorizontal: 16,       // 16px padding per UIDesign.md
    fontSize: 14,                // 14pt per UIDesign.md
    fontFamily: 'Montserrat_400Regular',
    
    // Glass morphism input focus transitions per UIDesign.md
    // Border color transition (200ms) with subtle scale (1.02) handled by focus states
  },
  errorContainer: {
    marginTop: 4,
  },
  errorText: {
    // Montserrat 11pt per UIDesign.md applied via ThemedText type="caption"
    // Soft coral color (#E67E50) applied via color prop
  },
  submitButton: {
    height: 50,                  // 44px+ touch target
    borderRadius: 28,            // 28px fully rounded per UIDesign.md
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: 8,                // 8px base unit spacing
    
    // Glass morphism button shadow per UIDesign.md
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.1,
    shadowRadius: 16,
    elevation: 6,
  },
  buttonContent: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  buttonText: {
    color: 'white',              // White text on warm sage background
    // Montserrat 16pt Medium per UIDesign.md applied via ThemedText type="button"
  },
});

================
File: components/ThemedText.tsx
================
/**
 * EphemeralArt Typography System - ThemedText Component
 * 
 * Implements the complete typography hierarchy from UIDesign.md:
 * - Instrument Serif: App name/headers (32-42pt), screen titles (24-28pt), user names (16-18pt), decorative elements (14-16pt)
 * - Montserrat: Primary headers (20-24pt), body text (14-16pt), button text (14-16pt), labels (12-14pt), metadata (11-12pt), small details (10-11pt)
 * - Line heights: 1.4-1.5x for body text, 1.2-1.3x for headers
 * - Supports both solid background text and glass morphism overlay text
 */

import { StyleSheet, Text, type TextProps } from 'react-native';

import { useThemeColor } from '@/hooks/useThemeColor';

export type ThemedTextProps = TextProps & {
  lightColor?: string;
  darkColor?: string;
  type?: 
    // Instrument Serif - Headers and Personal Elements (Per UIDesign.md)
    | 'appName'           // Instrument Serif 42pt - App name/large headers
    | 'screenTitle'       // Instrument Serif 28pt - Screen titles
    | 'heading'           // Instrument Serif 24pt - Medium headers (compatibility)
    | 'username'          // Instrument Serif 18pt - User names/artist credits
    | 'decorative'        // Instrument Serif 16pt - Decorative elements
    
    // Montserrat - UI Typography (Per UIDesign.md)
    | 'primaryHeader'     // Montserrat 24pt - Primary headers
    | 'bodyText'          // Montserrat 16pt - Body text/comments
    | 'button'            // Montserrat 16pt - Button text
    | 'label'             // Montserrat 14pt - Labels
    | 'metadata'          // Montserrat 12pt - Metadata/timestamps
    | 'smallDetail'       // Montserrat 11pt - Small details
    
    // Legacy/Compatibility Types
    | 'default'           // Montserrat body text (alias for bodyText)
    | 'body'              // Montserrat body text (alias for bodyText)
    | 'title'             // Instrument Serif large header (alias for appName)
    | 'subheading'        // Instrument Serif small header (alias for decorative)
    | 'caption'           // Montserrat small text (alias for smallDetail)
    | 'link';             // Montserrat link text (same as bodyText)
  
  // Glass morphism text support
  glassText?: boolean;    // Use glass morphism text colors (white over artwork)
};

export function ThemedText({
  style,
  lightColor,
  darkColor,
  type = 'default',
  glassText = false,
  ...rest
}: ThemedTextProps) {
  
  // Get semantic color based on text type and glass morphism usage
  const getSemanticColor = () => {
    if (glassText) {
      // Glass morphism text colors (white over artwork backgrounds)
      switch (type) {
        case 'metadata':
        case 'smallDetail':
        case 'caption':
          return useThemeColor({ light: lightColor, dark: darkColor }, 'glassTextSubtle');
        case 'label':
        case 'decorative':
          return useThemeColor({ light: lightColor, dark: darkColor }, 'glassTextSecondary');
        default:
          return useThemeColor({ light: lightColor, dark: darkColor }, 'glassText');
      }
    } else {
      // Standard text colors (charcoal on solid backgrounds)
      switch (type) {
        case 'metadata':
        case 'smallDetail':
        case 'caption':
          return useThemeColor({ light: lightColor, dark: darkColor }, 'textTertiary');
        case 'label':
        case 'decorative':
          return useThemeColor({ light: lightColor, dark: darkColor }, 'textSecondary');
        case 'link':
          return useThemeColor({ light: lightColor, dark: darkColor }, 'accent');
        default:
          return useThemeColor({ light: lightColor, dark: darkColor }, 'text');
      }
    }
  };

  const textColor = getSemanticColor();

  return (
    <Text
      style={[
        { color: textColor },
        styles[type],
        style,
      ]}
      {...rest}
    />
  );
}

const styles = StyleSheet.create({
  // Instrument Serif - Headers and Personal Elements (Per UIDesign.md Exact Specs)
  appName: {
    fontFamily: 'InstrumentSerif_400Regular',
    fontSize: 42,              // 42pt - App name/large headers
    lineHeight: 50,            // 1.2x for headers
    fontWeight: '500',         // Medium weight per UIDesign.md
    letterSpacing: -0.02 * 42, // -0.02em for large headers
  },
  screenTitle: {
    fontFamily: 'InstrumentSerif_400Regular',
    fontSize: 28,              // 28pt - Screen titles
    lineHeight: 34,            // 1.2x for headers
    fontWeight: '500',         // Medium weight per UIDesign.md
    letterSpacing: -0.02 * 28, // -0.02em for large headers
  },
  heading: {
    fontFamily: 'InstrumentSerif_400Regular',
    fontSize: 24,              // 24pt - Medium headers
    lineHeight: 30,            // 1.25x for headers
    fontWeight: '400',         // Regular weight
  },
  username: {
    fontFamily: 'InstrumentSerif_400Regular',
    fontSize: 18,              // 18pt - User names/artist credits
    lineHeight: 24,            // 1.3x for readability
    fontWeight: '400',         // Regular weight
  },
  decorative: {
    fontFamily: 'InstrumentSerif_400Regular',
    fontSize: 16,              // 16pt - Decorative elements
    lineHeight: 22,            // 1.4x for readability
    fontWeight: '400',         // Regular weight
  },
  
  // Montserrat - UI Typography (Per UIDesign.md Exact Specs)
  primaryHeader: {
    fontFamily: 'Montserrat_500Medium',
    fontSize: 24,              // 24pt - Primary headers
    lineHeight: 30,            // 1.25x for headers
    fontWeight: '500',         // Medium weight
  },
  bodyText: {
    fontFamily: 'Montserrat_400Regular',
    fontSize: 16,              // 16pt - Body text/comments
    lineHeight: 24,            // 1.5x for body text readability
    fontWeight: '400',         // Regular weight
  },
  button: {
    fontFamily: 'Montserrat_500Medium',
    fontSize: 16,              // 16pt - Button text
    lineHeight: 20,            // Tighter line height for buttons
    fontWeight: '500',         // Medium weight for emphasis
  },
  label: {
    fontFamily: 'Montserrat_500Medium',
    fontSize: 14,              // 14pt - Labels
    lineHeight: 20,            // 1.4x for readability
    fontWeight: '500',         // Medium weight
  },
  metadata: {
    fontFamily: 'Montserrat_400Regular',
    fontSize: 12,              // 12pt - Metadata/timestamps
    lineHeight: 16,            // 1.3x for small text
    fontWeight: '400',         // Regular weight
  },
  smallDetail: {
    fontFamily: 'Montserrat_400Regular',
    fontSize: 11,              // 11pt - Small details
    lineHeight: 15,            // 1.4x for readability
    fontWeight: '400',         // Regular weight
  },
  
  // Legacy/Compatibility Types (Map to new system)
  default: {
    fontFamily: 'Montserrat_400Regular',
    fontSize: 16,              // Same as bodyText
    lineHeight: 24,
    fontWeight: '400',
  },
  body: {
    fontFamily: 'Montserrat_400Regular',
    fontSize: 16,              // Same as bodyText
    lineHeight: 24,
    fontWeight: '400',
  },
  title: {
    fontFamily: 'InstrumentSerif_400Regular',
    fontSize: 42,              // Same as appName
    lineHeight: 50,
    fontWeight: '500',
    letterSpacing: -0.02 * 42,
  },
  subheading: {
    fontFamily: 'InstrumentSerif_400Regular',
    fontSize: 16,              // Same as decorative
    lineHeight: 22,
    fontWeight: '400',
  },
  caption: {
    fontFamily: 'Montserrat_400Regular',
    fontSize: 11,              // Same as smallDetail
    lineHeight: 15,
    fontWeight: '400',
  },
  link: {
    fontFamily: 'Montserrat_500Medium',
    fontSize: 16,              // Same as bodyText but medium weight
    lineHeight: 24,
    fontWeight: '500',
  },
});

================
File: lib/supabase.ts
================
/**
 * Supabase Client Configuration
 * 
 * This file configures the Supabase client for the SnapClone application.
 * It automatically switches between local and cloud environments based on
 * the development mode (`__DEV__`).
 */

import { createClient } from '@supabase/supabase-js';
import Constants from 'expo-constants';

// The __DEV__ global variable is `true` when running in development mode,
// and `false` when running in a production build.
const isDevelopment = __DEV__;

console.log('Running in', isDevelopment ? 'DEVELOPMENT' : 'PRODUCTION', 'mode.');

// Conditionally choose the Supabase URL and Key
const supabaseUrl = isDevelopment
  ? Constants.expoConfig?.extra?.EXPO_PUBLIC_SUPABASE_URL_LOCAL
  : Constants.expoConfig?.extra?.EXPO_PUBLIC_SUPABASE_URL;

const supabaseAnonKey = isDevelopment
  ? Constants.expoConfig?.extra?.EXPO_PUBLIC_SUPABASE_ANON_KEY_LOCAL
  : Constants.expoConfig?.extra?.EXPO_PUBLIC_SUPABASE_ANON_KEY;

console.log('🔧 Supabase Config - Initializing client for', isDevelopment ? 'Local' : 'Cloud');
console.log('📍 Supabase URL:', supabaseUrl ? 'Set ✓' : 'Missing ❌');
console.log('🔑 Supabase Anon Key:', supabaseAnonKey ? 'Set ✓' : 'Missing ❌');

if (!supabaseUrl || !supabaseAnonKey) {
  const missingVar = !supabaseUrl ? 'URL' : 'Key';
  const envName = isDevelopment ? `EXPO_PUBLIC_SUPABASE_${missingVar}_LOCAL` : `EXPO_PUBLIC_SUPABASE_${missingVar}`;
  throw new Error(
    `Missing Supabase environment variable: ${envName}. Please check your .env file.`
  );
}

/**
 * Supabase client instance
 * Configured with auto-refresh for authentication and proper URL handling
 */
export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false,
  },
});

/**
 * Database Types for TypeScript support
 */
export interface Photo {
  id: string;
  user_id?: string;
  file_name: string;
  file_path: string;
  file_size: number;
  mime_type: string;
  width?: number;
  height?: number;
  taken_at: string;
  uploaded_at: string;
  storage_bucket: string;
  public_url?: string;
}

export interface Class {
  id: string;
  name: string;
  join_code: string;
  description?: string;
  created_by?: string;
  is_active: boolean;
  max_students: number;
  created_at: string;
  updated_at: string;
}

export interface ClassMember {
  id: string;
  class_id: string;
  user_id: string;
  role: 'student' | 'teacher' | 'admin';
  joined_at: string;
  is_active: boolean;
}

export interface Post {
  id: string;
  user_id: string;
  class_id: string;
  image_url: string;
  image_path?: string;
  frame_style?: string;
  title?: string;
  description?: string;
  max_viewers: number;
  view_count: number;
  duration_minutes: number;
  expires_at: string;
  is_expired: boolean;
  created_at: string;
  updated_at: string;
}

export interface PostView {
  id: string;
  post_id: string;
  user_id: string;
  viewed_at: string;
}

export interface Comment {
  id: string;
  post_id: string;
  user_id: string;
  content: string;
  is_edited: boolean;
  created_at: string;
  updated_at: string;
}

export interface AIFeedback {
  id: string;
  post_id: string;
  user_id: string;
  feedback_text: string;
  feedback_status: 'pending' | 'processing' | 'completed' | 'failed';
  processing_time_ms?: number;
  ai_model: string;
  created_at: string;
  updated_at: string;
}

export interface Database {
  public: {
    Tables: {
      photos: {
        Row: Photo;
        Insert: Omit<Photo, 'id' | 'uploaded_at'>;
        Update: Partial<Omit<Photo, 'id' | 'uploaded_at'>>;
      };
      classes: {
        Row: Class;
        Insert: Omit<Class, 'id' | 'created_at' | 'updated_at'>;
        Update: Partial<Omit<Class, 'id' | 'created_at' | 'updated_at'>>;
      };
      class_members: {
        Row: ClassMember;
        Insert: Omit<ClassMember, 'id' | 'joined_at'>;
        Update: Partial<Omit<ClassMember, 'id' | 'joined_at'>>;
      };
      posts: {
        Row: Post;
        Insert: Omit<Post, 'id' | 'created_at' | 'updated_at' | 'is_expired' | 'view_count'>;
        Update: Partial<Omit<Post, 'id' | 'created_at' | 'updated_at'>>;
      };
      post_views: {
        Row: PostView;
        Insert: Omit<PostView, 'id' | 'viewed_at'>;
        Update: Partial<Omit<PostView, 'id' | 'viewed_at'>>;
      };
      comments: {
        Row: Comment;
        Insert: Omit<Comment, 'id' | 'created_at' | 'updated_at' | 'is_edited'>;
        Update: Partial<Omit<Comment, 'id' | 'created_at' | 'updated_at'>>;
      };
      ai_feedback: {
        Row: AIFeedback;
        Insert: Omit<AIFeedback, 'id' | 'created_at' | 'updated_at'>;
        Update: Partial<Omit<AIFeedback, 'id' | 'created_at' | 'updated_at'>>;
      };
    };
  };
}

console.log('✅ Supabase client initialized successfully');

================
File: tasks/prd-ephemeral-art-sharing.md
================
# EphemeralArt - Product Requirements Document

---

## Introduction/Overview

Draft is a mobile application designed to reduce anxiety and pressure for art students when sharing works-in-progress. The platform creates a low-pressure, ephemeral environment where students join class groups via teacher-provided codes, share artwork with controlled visibility and timing, and receive peer feedback and unlimited AI guidance. 

**Problem Statement**: Art students, particularly those learning foundational skills, experience significant anxiety when sharing unfinished work due to fear of judgment, perfectionism, and social pressure in traditional critique environments.

**Solution**: A clean, elegant mobile app that makes sharing artwork as frictionless as possible through ephemeral content (auto-deletion after specified time), controlled audience sizes, encouraging peer interactions, and optional AI feedback for personal growth.

**Core Value Proposition**: Transform the vulnerable act of sharing work-in-progress into a confidence-building, anxiety-reducing experience that accelerates learning through supportive peer feedback.

---

## Goals

### Primary Goals
1. **Reduce Sharing Anxiety**: Create the lowest possible friction for art students to share work-in-progress by removing permanence and limiting audience
2. **Foster Peer Learning**: Enable structured, encouraging feedback within class environments that builds confidence rather than judgment
3. **Accelerate Skill Development**: Provide unlimited AI feedback that offers constructive, actionable guidance for artistic improvement
4. **Demonstrate Technical Feasibility**: Build a fully functional prototype showcasing ephemeral content, real-time features, and AI integration

### Secondary Goals
5. **Validate User Experience**: Test the anxiety-reduction hypothesis through clean, elegant UI that prioritizes ease of use over feature complexity
6. **Establish Technical Foundation**: Create scalable architecture that can evolve from single-device demo to multi-user production system

---

## User Stories

### Core User Journey - "Alex the Art Student"
**Primary Persona**: Alex, an art student in "Monday Drawing Fundamentals" who wants to share a quick sketch with 3-5 classmates for feedback without long-term exposure or judgment.

#### Authentication & Onboarding
- **US-1**: As Alex, I want to enter my name and class code so I can quickly join my art class without complex registration
- **US-2**: As Alex, I want to see a welcoming confirmation so I know I've successfully joined "Monday Drawing Fundamentals"

#### Discovering Class Activity  
- **US-3**: As Alex, I want to immediately see realistic posts from classmates (Maya, Jordan, Sam, Casey, Riley) so I understand how the platform works and feel part of an active community
- **US-4**: As Alex, I want to see countdown timers on posts so I understand the ephemeral nature and feel less pressure about permanence
- **US-5**: As Alex, I want to read encouraging comments from classmates so I see the supportive tone and expectations

#### Sharing Artwork
- **US-6**: As Alex, I want a large, prominent camera button so I can easily capture my artwork without hunting for features
- **US-7**: As Alex, I want a clean camera interface with subtle guides so I can focus on photographing my work properly

- **US-8**: As Alex, I want simple sharing controls (viewer limit, duration) so I can maintain control over who sees my work and for how long
- **US-9**: As Alex, I want clear confirmation when I post so I know my artwork has been shared successfully

#### Receiving & Giving Feedback
- **US-10**: As Alex, I want to tap on classmates' artwork to view it full-screen so I can appreciate the details and provide thoughtful feedback
- **US-11**: As Alex, I want a simple comment box with character limits so I can leave encouraging feedback without overthinking length
- **US-12**: As Alex, I want to see my comments appear immediately so I know my support has been shared
- **US-13**: As Alex, I want to receive peer comments on my work so I get the validation and feedback I'm seeking

#### AI-Powered Learning
- **US-14**: As Alex, I want an "AI Feedback" button on my own posts so I can get personalized guidance whenever I need it
- **US-15**: As Alex, I want encouraging, actionable AI advice so I can improve my technique without feeling criticized
- **US-16**: As Alex, I want unlimited AI feedback so I can learn and iterate without artificial constraints

#### Ephemeral Experience
- **US-17**: As Alex, I want to watch posts naturally disappear after their timer expires so I experience the anxiety-reducing nature of temporary sharing
- **US-18**: As Alex, I want smooth animations when content expires so the ephemeral nature feels intentional and peaceful rather than jarring

---

## Functional Requirements

### Authentication System
1. **User Login**: The system must provide an elegant login page requiring the users email and password. (using Supabase Auth)
2. **Simple Name + Code Entry**: The system must provide a streamlined class registration requiring only a name and 6-digit class code (e.g., "DRAW01")
3. **Class Validation**: The system must validate class codes and display the full class name upon successful entry (e.g., "Monday Drawing Fundamentals")
4. **Session Persistence**: The system must remember the user's session so they don't need to re-enter information on app restart

### Pre-populated Demo Environment
4. **Fake Classmate System**: The system must display realistic posts from 5 pre-populated users (Maya, Jordan, Sam, Casey, Riley) with authentic artwork and encouraging comments
5. **Sample Content Variety**: The system must show diverse artwork examples (charcoal sketches, pencil drawings, various subjects) to demonstrate the platform's versatility
6. **Realistic Engagement**: The system must display varied viewer counts, time remaining, and comment interactions to simulate an active class environment

### Camera & Photo Capture
7. **Prominent Camera Access**: The system must provide a large, centered camera button on the main feed for immediate photo capture
8. **Clean Camera Interface**: The system must offer a full-screen viewfinder with subtle grid lines and minimal UI distractions
9. **Quality Capture Settings**: The system must capture photos with appropriate quality for artwork sharing (optimized file size vs. detail)
10. **Haptic Feedback**: The system must provide gentle haptic feedback during photo capture for tactile confirmation

### Camera to Feed Connection & Post Creation
11. **Post Creation Service**: The system must provide a service to create posts from captured photos with ephemeral properties
12. **Post-Capture Sharing Flow**: The system must display sharing controls immediately after photo capture without intermediate screens
13. **Seamless Integration**: The system must connect photo upload to post creation to feed display as a single unified flow

### Sharing Controls & Post Creation
14. **Viewer Limit Control**: The system must provide a slider interface allowing users to set maximum viewers from 1-20 (default: 5)
15. **Duration Selection**: The system must offer preset duration options ("30 minutes", "2 hours", "Until tomorrow")
16. **Clear Posting Confirmation**: The system must provide clear success feedback when posts are created
17. **Immediate Feed Update**: The system must display new posts at the top of the feed immediately after creation
18. **Navigation After Posting**: The system must automatically redirect users to the feed tab after successful post creation

### Social Features & Commenting
19. **Full-screen Artwork View**: The system must allow users to tap posts for full-screen viewing and detailed examination
20. **Character-Limited Comments**: The system must provide a comment box with 100-150 character limit and live counter
21. **Real-time Comment Updates**: The system must display new comments immediately with smooth animations
22. **Encouraging Comment Tone**: The system must pre-populate sample comments that demonstrate supportive, constructive feedback patterns

### AI Feedback Integration
23. **AI Feedback Button**: The system must show "Get AI Feedback" button only on the user's own posts
24. **Unlimited AI Access**: The system must allow users to request AI feedback without rate limiting or usage caps
25. **Loading States**: The system must provide elegant loading animations during AI processing (target: 3 seconds)
26. **Constructive AI Response**: The system must deliver encouraging, actionable feedback that focuses on improvement opportunities rather than criticism

### Ephemeral Content Management
27. **Live Countdown Timers**: The system must display real-time countdown timers on all posts showing time until deletion
28. **Automatic Deletion**: The system must automatically remove posts when their specified duration expires
29. **Smooth Expiration Animation**: The system must use fade-out animations when posts expire to create peaceful rather than jarring transitions
30. **Post-Deletion Feed Update**: The system must smoothly reorganize remaining posts when content is removed

### User Interface & Navigation
31. **Glass Morphism Design**: The system must implement the complete glass morphism design system from UIDesign.md with backdrop blur, translucent cards, and layered content
32. **Artwork-as-Background Feed**: The system must display each artwork as full-screen background with glass morphism cards layered on top for post information, stats, and actions
33. **Typography System**: The system must implement Instrument Serif for headers/usernames and Montserrat for UI elements with specified font sizes from UIDesign.md
34. **Monochromatic Color Palette**: The system must use the specified color system (Pure White #FFFFFF, Charcoal Text #2C2C2C, Soft Gray Surfaces #F8F8F8, accent colors sparingly)
35. **Glass Morphism Cards**: The system must implement Primary Glass Cards (rgba(255,255,255,0.15) with 12px blur) and Secondary Glass Cards (rgba(255,255,255,0.1) with 8px blur)
36. **Feed Navigation**: The system must allow vertical swipe between posts with smooth artwork crossfades behind glass cards
37. **Tab Navigation**: The system must provide glass morphism tab bar with "Class Feed" and "Camera" using the specified styling
38. **Class Context Display**: The system must show class name in header using Montserrat typography

---

## Non-Goals (Out of Scope)

### Explicitly Excluded Features
- **Complex User Profiles**: No detailed profile creation, skill levels, or user customization beyond name entry
- **Advanced Teacher Controls**: No moderation tools, analytics access, or administrative features for teachers
- **Content Moderation**: No automated filtering, reporting systems, or content review processes
- **Offline Functionality**: No offline photo capture, comment drafting, or data synchronization capabilities
- **Multi-Class Management**: No ability for users to join multiple classes or switch between class contexts
- **Direct Messaging**: No private messaging between individual users outside of class feed

- **Social Discovery**: No mechanisms to find other classes, users, or public content beyond assigned class
- **Analytics & Reporting**: No usage tracking, learning outcome measurement, or progress reporting features
- **Monetization Features**: No paid features, premium content, or in-app purchases

### Technical Limitations for MVP
- **Real Multi-User System**: Single-device testing approach with pre-populated content rather than true multi-user architecture
- **Production Authentication**: Simplified name/code system rather than full account management
- **Advanced Error Handling**: Basic error states without comprehensive offline recovery or network resilience
- **Cross-Platform Optimization**: iOS-focused development without Android optimization

---

## Design Considerations

### Visual Identity & Aesthetic (Source: UIDesign.md)
The design must implement the complete glass morphism elegance system from UIDesign.md that reduces visual clutter and creates a sophisticated, calming environment conducive to sharing vulnerable creative work.

**Core Design Principles (Per UIDesign.md):**
- **Artwork as Hero**: Every design decision serves to elevate and showcase student artwork
- **Glass Morphism Elegance**: Sophisticated layering with backdrop blur creates depth without overwhelming content
- **Ephemeral Beauty**: Visual cues that celebrate the temporary nature of shared art
- **Encouraging Atmosphere**: Design language that reduces anxiety and builds confidence

**Typography System (Per UIDesign.md - Exact Font Sizes):**
- **Instrument Serif**: App name/large headers (32-42pt Medium), screen titles (24-28pt Medium), user names/artist credits (16-18pt Regular), decorative elements (14-16pt Regular)
- **Montserrat**: Primary headers (20-24pt Medium), body text/comments (14-16pt Regular), button text (14-16pt Medium), labels (12-14pt Medium), metadata/timestamps (11-12pt Regular), small details (10-11pt Regular)

**Color Palette (Per UIDesign.md - Exact Colors):**
- **Primary Neutrals**: Pure White (#FFFFFF), Charcoal Text (#2C2C2C), Soft Gray Surfaces (#F8F8F8), Medium Gray (#E5E5E5)
- **Glass Morphism Colors**: Primary Glass (rgba(255,255,255,0.15) with 12px blur), Secondary Glass (rgba(255,255,255,0.1) with 8px blur), Text Glass (rgba(255,255,255,0.9)), Secondary Text Glass (rgba(255,255,255,0.7)), Subtle Text Glass (rgba(255,255,255,0.5))
- **Accent Colors (Sparingly)**: Warm Sage (#8B9D83), Soft Coral (#E67E50), Warm Tan (#B8956A)

**Glass Morphism Technical Specifications (Per UIDesign.md):**
- **Primary Glass Cards**: background rgba(255,255,255,0.15), backdrop-filter blur(12px), border 1px solid rgba(255,255,255,0.2), box-shadow 0 4px 20px rgba(0,0,0,0.08), border-radius 20px
- **Secondary Glass Elements**: background rgba(255,255,255,0.1), backdrop-filter blur(8px), border 1px solid rgba(255,255,255,0.15), box-shadow 0 2px 12px rgba(0,0,0,0.05), border-radius 16px

### Key Interface Patterns

#### Launch & Authentication Flow (Per UIDesign.md)
- **Launch Screen**: Soft gradient from #F8F8F8 to #FFFFFF, "EphemeralArt" in Instrument Serif 42pt centered, tagline "Share. Encourage. Fade." in Montserrat 16pt
- **Login Interface**: Clean white with subtle paper texture, glass morphism container, header "Welcome to EphemeralArt" in Instrument Serif 28pt
- **Welcome Screen**: Centered content with generous whitespace, "Welcome, [Name]!" in Instrument Serif 32pt, "Join a Class" button with warm sage background

#### Feed Design Philosophy (Per UIDesign.md - Exact Specifications)
- **Artwork as Full-Screen Background**: Each artwork becomes full-screen background with subtle dark gradient overlay (rgba(0,0,0,0.3) to transparent)
- **Glass Morphism Cards Layout**: Information layered over artwork using translucent glass cards with backdrop blur
  - **Top Card (Post Information)**: 20px margin from top/left/right, contains artist name (Instrument Serif 18pt white), class name (Montserrat 12pt rgba(255,255,255,0.7)), timer countdown (Montserrat 14pt white)
  - **Bottom Left Card (Post Stats)**: 20px from bottom/left, contains view count "3 of 5 viewers" (Montserrat 12pt), time remaining "Expires in 18 min" (Montserrat 11pt)
  - **Bottom Right Card (Actions)**: 20px from bottom/right, contains camera icon (24px white), AI feedback icon, comment icon with count, 12px gaps between
- **Vertical Swipe Navigation**: Switch between posts with smooth artwork crossfades behind glass cards (400ms ease-out transitions)
- **Glass Morphism Positioning**: All cards use Primary Glass specs for post info, Secondary Glass specs for stats/actions

#### Camera & Capture Experience (Per UIDesign.md)
- **Full-Screen Viewfinder**: No UI chrome during capture, optional subtle white grid lines
- **Glass Morphism Controls**: Bottom glass card slides up from edge, large 80px centered capture button with subtle shadow
- **Post-Capture Flow**: Artwork displayed full-screen with immediate sharing controls
- **Sharing Controls**: Large glass morphism card centered over artwork with viewer slider and duration selection

### Animation & Interaction Design (Per UIDesign.md - Exact Specifications)
- **Screen Transitions**: 400ms duration with cubic-bezier(0.25, 0.46, 0.45, 0.94) easing, crossfade for artwork backgrounds, slide for overlays
- **Element Animations**: Cards appearing with scale from 0.95 to 1.0 plus opacity fade-in (300ms), button interactions scale to 0.98 (150ms), input focus border color transition (200ms) with subtle scale (1.02)
- **Deletion Animations**: Post expiration with 2-second fade-out plus scale to 0.95, comment removal slide up and fade (300ms), gentle shake animation before deletion
- **Haptic Feedback**: Light impact for button taps/selection changes, medium impact for post creation/successful actions, heavy impact for deletions/errors, selection feedback for slider adjustments
- **Progressive Disclosure**: Advanced features revealed only when requested to avoid overwhelming new users
- **Glass Morphism Animations**: Smooth backdrop blur transitions, hover states increase background opacity to 0.25, interactive states with slight scale (0.98) and increased shadow
- **Countdown Animations**: Visual countdown warnings for last 60 seconds with subtle effects, 5-second "undo" option with glass morphism popup after deletion

### Responsive & Accessibility Considerations
- **Mobile-First Design**: All layouts optimized for smartphone usage with thumb-friendly interaction zones
- **Readable Typography**: Font sizes appropriate for viewing artwork details and reading comments comfortably
- **Adequate Touch Targets**: All interactive elements meet minimum 44px touch target guidelines
- **Clear Visual Hierarchy**: Consistent spacing, sizing, and color usage to guide user attention naturally

---

## Technical Considerations

### Technology Stack
- **Frontend Framework**: React Native with Expo for cross-platform mobile development
- **Backend Services**: Supabase for authentication, database, storage, and real-time features
- **AI Integration**: OpenAI GPT-4V API via Supabase Edge Functions for artwork analysis and feedback
- **Image Processing**: Expo ImageManipulator for photo optimization
- **State Management**: Zustand for lightweight, scalable app state management
- **Styling System**: React Native StyleSheet with complete glass morphism design system implementation
- **Typography**: Expo Google Fonts for Instrument Serif and Montserrat font families with exact font sizes per UIDesign.md
- **Glass Morphism Implementation**: 
  - **iOS**: Expo BlurView with backdrop-filter blur(12px/8px) for Primary/Secondary Glass Cards
  - **Android**: Custom shadow approximations with translucent backgrounds
  - **Precise Specs**: Primary Glass (rgba(255,255,255,0.15) + 12px blur), Secondary Glass (rgba(255,255,255,0.1) + 8px blur)
  - **Border Radius**: Screen containers (28px), Primary cards (20px), Secondary cards (16px), Buttons (28px fully rounded)
- **Animation System**: React Native Reanimated for glass morphism transitions, scale animations, and smooth artwork crossfades

### Database Schema Requirements

```sql
-- Class management
classes (
  id UUID PRIMARY KEY,
  name TEXT NOT NULL,
  join_code TEXT UNIQUE NOT NULL,
  created_at TIMESTAMP DEFAULT NOW()
);

-- User profiles (simplified for demo)
users (
  id UUID PRIMARY KEY,
  name TEXT NOT NULL,
  class_id UUID REFERENCES classes(id),
  is_demo_user BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP DEFAULT NOW()
);

-- Artwork posts with ephemeral properties
posts (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  class_id UUID REFERENCES classes(id),
  image_url TEXT NOT NULL,

  max_viewers INTEGER DEFAULT 5,
  view_count INTEGER DEFAULT 0,
  duration_minutes INTEGER NOT NULL,
  expires_at TIMESTAMP NOT NULL,
  created_at TIMESTAMP DEFAULT NOW()
);

-- Peer comments with character limits
comments (
  id UUID PRIMARY KEY,
  post_id UUID REFERENCES posts(id),
  user_id UUID REFERENCES users(id),
  content TEXT NOT NULL CHECK (length(content) <= 150),
  created_at TIMESTAMP DEFAULT NOW()
);

-- AI feedback requests and responses
ai_feedback (
  id UUID PRIMARY KEY,
  post_id UUID REFERENCES posts(id),
  user_id UUID REFERENCES users(id),
  feedback_text TEXT NOT NULL,
  created_at TIMESTAMP DEFAULT NOW()
);
```

### Performance Requirements
- **Photo Capture**: Immediate camera launch (<1 second) with smooth viewfinder performance
- **Image Upload**: Photo processing and upload completion within 3 seconds on typical mobile connections
- **AI Feedback**: GPT-4V analysis and response delivery within 5 seconds of request
- **Real-time Updates**: Comment and interaction updates propagated to all class members within 1 second
- **Ephemeral Cleanup**: Expired content removal processed within 1 minute of expiration time

### Security & Privacy Considerations
- **Limited Data Collection**: Only essential information stored (name, class association, posts within time limits)
- **Automatic Data Deletion**: All posts and associated data permanently removed after specified duration
- **Class Isolation**: Users can only access content within their assigned class group
- **AI Processing**: Artwork images sent to OpenAI only for users who explicitly request AI feedback

### Demo-Specific Technical Requirements
- **Pre-populated Content**: Seed database with 5 realistic user profiles and 3-4 high-quality artwork posts
- **Realistic Timers**: Set expiration times on demo content to demonstrate ephemeral behavior during demonstrations
- **Comment Examples**: Pre-populate encouraging comments that model the desired supportive tone
- **Single-Device Architecture**: Design data flow to work seamlessly on single device without requiring multiple user accounts

---

## Success Metrics

### Primary Success Criteria (User Experience)
1. **Friction Reduction**: Users can complete the full flow from opening app to posting artwork in under 2 minutes
2. **Feature Adoption**: 100% of demo users successfully post their own artwork after viewing pre-populated content
3. **AI Engagement**: Users request AI feedback on average 2+ times per demo session
4. **Emotional Response**: Qualitative feedback indicates reduced anxiety compared to traditional critique environments

### Technical Success Criteria
5. **Performance Benchmarks**: All interactions meet specified response time requirements (camera <1s, upload <3s, AI <5s)
6. **Reliability**: Zero crashes during demo sessions with proper error handling for network connectivity issues
7. **Visual Polish**: UI implementation matches design specifications with smooth animations and proper typography
8. **Ephemeral Functionality**: Automatic content deletion works reliably with proper cleanup of storage and database entries

### Demonstration Readiness
9. **Complete User Journey**: Full walkthrough from launch to AI feedback completion works flawlessly
10. **Content Quality**: Pre-populated artwork and comments create realistic, engaging class environment
11. **Platform Stability**: App performs consistently across multiple demo sessions without requiring resets
12. **Value Proposition Clarity**: Observers can immediately understand the anxiety-reduction benefits from watching the demo

---

## Open Questions

### User Experience Refinements
1. **Optimal Timer Granularity**: Should countdown displays show minutes/seconds for short durations, or keep format consistent? **Answer**: If it is not too technically difficult I would like a seconds timer.
2. **Comment Notification Strategy**: How should users be notified of new comments on their posts without creating pressure to respond immediately? **Answer**: Don't worry about notifications right now


### Technical Implementation Details
4. **AI Feedback Personalization**: Should AI responses consider user's skill level or previous work, or maintain general encouraging tone? **Answer**: If possible, this can be refined later
5. **Image Quality Optimization**: What's the optimal balance between image quality and upload/storage performance for artwork sharing? **Answer**: To begin with, image quality is not a big deal.
6. **Demo Content Refresh**: How frequently should pre-populated content be updated to maintain realistic feel across multiple demonstrations? **Answer**: How difficult would it be to generate a second set of synthetic data that could be toggled between? Should this be made now or later?

### Future Scalability Considerations
7. **Multi-Class Architecture**: When transitioning from demo to production, how should users handle enrollment in multiple classes? dont worry about it. 
8. **Teacher Feedback Integration**: Should teachers have any visibility into class activity for pedagogical purposes, while maintaining student privacy? don't worry about it. 
9. **Cross-Platform Expansion**: What additional considerations are needed for Android compatibility beyond the initial iOS focus? i want this to be cross platform, but i am developing this on ios and thats the priority

---

## Implementation Phases

### Phase 1: Core Foundation 
**Authentication & Demo Environment**
- Clean email and password login system
- Simple name/class code login system
- Pre-populated class with 5 demo users and sample posts
- Basic feed display with realistic artwork and comments
- Class welcome confirmation and navigation

### Phase 2: Photo Capture & Sharing 
**Camera Integration & Post Creation**
- Camera interface with full-screen viewfinder
- Photo capture with haptic feedback
- Basic sharing controls (viewers, duration)
- Post creation and feed integration

### Phase 3: Social Features 
**Comments & Interactions**
- Full-screen artwork viewing
- Comment creation with character limits
- Real-time comment display and updates
- Encouraging interaction patterns

### Phase 4: AI Integration  
**Intelligent Feedback System**
- OpenAI GPT-4V integration via Supabase Edge Functions
- AI feedback button on user's own posts
- Loading states and response display
- Unlimited feedback request handling

### Phase 5: Ephemeral Features 
**Time-based Content Management**
- Live countdown timer implementation
- Automatic post deletion system
- Smooth expiration animations
- Storage and database cleanup

### Phase 6: Polish & Refinement
**Optional Enhancements & Refinement**
- UI polish and animation refinement
- Performance optimization
- Comprehensive demo testing

---

This PRD provides a comprehensive roadmap for building EphemeralArt as an anxiety-reducing, ephemeral art sharing platform that prioritizes clean design, simple interactions, and confidence-building features for art students.

================
File: app/(tabs)/_layout.tsx
================
import { Tabs } from 'expo-router';
import React from 'react';

import { IconSymbol } from '@/components/ui/IconSymbol';
import { Colors } from '@/constants/Colors';
import { useColorScheme } from '@/hooks/useColorScheme';

export default function TabLayout() {
  const colorScheme = useColorScheme();
  const colors = Colors[colorScheme ?? 'light'];

  return (
    <Tabs
      screenOptions={{
        tabBarActiveTintColor: colors.accentSage,
        tabBarInactiveTintColor: colors.tabIconDefault,
        headerShown: false,
        tabBarStyle: {
          backgroundColor: colors.glassPrimary,
          borderTopColor: colors.glassBorderPrimary,
          borderTopWidth: 1,
          position: 'absolute',
          bottom: 0,
          left: 0,
          right: 0,
          height: 88,
          paddingBottom: 34,
          paddingTop: 8,
          backdropFilter: 'blur(12px)',
        },
        tabBarLabelStyle: {
          fontFamily: 'Montserrat_500Medium',
          fontSize: 12,
          fontWeight: '500',
        },
      }}
      initialRouteName="camera"
    >
      <Tabs.Screen
        name="camera"
        options={{
          title: 'Camera',
          tabBarIcon: ({ color, focused }) => (
            <IconSymbol 
              size={focused ? 30 : 28} 
              name="camera.fill" 
              color={color}
              weight={focused ? 'semibold' : 'regular'}
            />
          ),
        }}
      />
      <Tabs.Screen
        name="index"
        options={{
          title: 'Class Feed',
          tabBarIcon: ({ color, focused }) => (
            <IconSymbol 
              size={focused ? 30 : 28} 
              name="house.fill" 
              color={color}
              weight={focused ? 'semibold' : 'regular'}
            />
          ),
        }}
      />
    </Tabs>
  );
}

================
File: constants/Colors.ts
================
/**
 * Below are the colors that are used in the app. The colors are defined in the light and dark mode.
 * There are many other ways to style your app. For example, [Nativewind](https://www.nativewind.dev/), [Tamagui](https://tamagui.dev/), [unistyles](https://reactnativeunistyles.vercel.app), etc.
 */

/**
 * EphemeralArt Glass Morphism Design System Colors
 * 
 * Implements the complete glass morphism color system from UIDesign.md:
 * - Pure white backgrounds with charcoal text
 * - Glass morphism colors with specific rgba values and opacity levels
 * - Warm accent colors used sparingly for encouraging actions
 * - Monochromatic + accent system for anxiety-reducing visual hierarchy
 */

// Primary Neutrals (Per UIDesign.md)
const pureWhite = '#FFFFFF';           // Primary text, key UI elements
const charcoalText = '#2C2C2C';        // High contrast text when needed
const softGraySurfaces = '#F8F8F8';    // Background cards, subtle separators
const mediumGray = '#E5E5E5';          // Inactive states, borders

// Glass Morphism Colors (Per UIDesign.md - Exact RGBA Values)
const primaryGlass = 'rgba(255, 255, 255, 0.15)';      // Main card backgrounds
const secondaryGlass = 'rgba(255, 255, 255, 0.25)';    // Active/hover states
const textGlass = 'rgba(255, 255, 255, 0.9)';          // Primary white text
const secondaryTextGlass = 'rgba(255, 255, 255, 0.7)'; // Metadata, timestamps
const subtleTextGlass = 'rgba(255, 255, 255, 0.5)';    // Disabled states

// Glass Morphism Input Colors (Per UIDesign.md)
const inputGlass = 'rgba(255, 255, 255, 0.2)';         // Input backgrounds
const inputBorderGlass = 'rgba(255, 255, 255, 0.3)';   // Input borders
const placeholderGlass = 'rgba(255, 255, 255, 0.5)';   // Placeholder text

// Accent Colors - Used Sparingly (Per UIDesign.md)
const warmSage = '#8B9D83';            // Encouraging actions (AI feedback, positive states)
const softCoral = '#E67E50';           // Critical actions (delete, warnings)
const warmTan = '#B8956A';             // Special moments (first post, achievements)

// Glass Morphism Border Colors (Per UIDesign.md)
const primaryBorder = 'rgba(255, 255, 255, 0.2)';      // Primary glass card borders
const secondaryBorder = 'rgba(255, 255, 255, 0.15)';   // Secondary glass element borders

export const Colors = {
  light: {
    // Primary Neutrals
    text: charcoalText,                 // #2C2C2C - Primary text for solid backgrounds
    background: pureWhite,              // #FFFFFF - Primary background
    surface: softGraySurfaces,          // #F8F8F8 - Subtle surface backgrounds
    border: mediumGray,                 // #E5E5E5 - Standard borders
    
    // Glass Morphism Colors
    glassPrimary: primaryGlass,         // rgba(255,255,255,0.15) - Primary glass cards
    glassSecondary: secondaryGlass,     // rgba(255,255,255,0.25) - Secondary glass/hover states
    glassText: textGlass,               // rgba(255,255,255,0.9) - Text over glass/artwork
    glassTextSecondary: secondaryTextGlass, // rgba(255,255,255,0.7) - Secondary text over glass
    glassTextSubtle: subtleTextGlass,   // rgba(255,255,255,0.5) - Subtle text over glass
    
    // Glass Morphism Input Colors
    glassInput: inputGlass,             // rgba(255,255,255,0.2) - Input backgrounds
    glassInputBorder: inputBorderGlass, // rgba(255,255,255,0.3) - Input borders
    glassPlaceholder: placeholderGlass, // rgba(255,255,255,0.5) - Placeholder text
    
    // Glass Morphism Borders
    glassBorderPrimary: primaryBorder,  // rgba(255,255,255,0.2) - Primary glass borders
    glassBorderSecondary: secondaryBorder, // rgba(255,255,255,0.15) - Secondary glass borders
    
    // Accent Colors (Sparingly Used)
    accentSage: warmSage,              // #8B9D83 - Encouraging actions
    accentCoral: softCoral,            // #E67E50 - Critical actions
    accentTan: warmTan,                // #B8956A - Special moments
    
    // Legacy Theme Colors (Maintain compatibility)
    tint: warmSage,                    // Primary accent
    icon: charcoalText,                // Icons and symbols
    tabIconDefault: mediumGray,        // Inactive tab icons
    tabIconSelected: warmSage,         // Active tab icons
    card: softGraySurfaces,            // Card backgrounds
    
    // Semantic Colors
    textSecondary: 'rgba(44, 44, 44, 0.7)',    // Secondary text on solid backgrounds
    textTertiary: 'rgba(44, 44, 44, 0.5)',     // Tertiary text on solid backgrounds
    textDisabled: 'rgba(44, 44, 44, 0.3)',     // Disabled text
    accent: warmSage,                           // Primary accent for CTAs
  },
  dark: {
    // Dark Mode Glass Morphism (Maintains same glass morphism approach)
    text: textGlass,                    // Light text on dark
    background: '#1A1D21',              // Dark background
    surface: '#242831',                 // Dark surface backgrounds
    border: '#2F3339',                  // Dark borders
    
    // Glass Morphism Colors (Same as light - overlay on dark artwork)
    glassPrimary: primaryGlass,         // rgba(255,255,255,0.15) - Works on dark backgrounds
    glassSecondary: secondaryGlass,     // rgba(255,255,255,0.25) - Works on dark backgrounds
    glassText: textGlass,               // rgba(255,255,255,0.9) - Text over glass/artwork
    glassTextSecondary: secondaryTextGlass, // rgba(255,255,255,0.7) - Secondary text
    glassTextSubtle: subtleTextGlass,   // rgba(255,255,255,0.5) - Subtle text
    
    // Glass Morphism Input Colors (Same - designed for overlay)
    glassInput: inputGlass,             // rgba(255,255,255,0.2)
    glassInputBorder: inputBorderGlass, // rgba(255,255,255,0.3)
    glassPlaceholder: placeholderGlass, // rgba(255,255,255,0.5)
    
    // Glass Morphism Borders (Same - designed for overlay)
    glassBorderPrimary: primaryBorder,  // rgba(255,255,255,0.2)
    glassBorderSecondary: secondaryBorder, // rgba(255,255,255,0.15)
    
    // Accent Colors (Same - work on both backgrounds)
    accentSage: warmSage,              // #8B9D83
    accentCoral: softCoral,            // #E67E50
    accentTan: warmTan,                // #B8956A
    
    // Legacy Theme Colors
    tint: warmSage,                    // Primary accent
    icon: textGlass,                   // Icons and symbols
    tabIconDefault: subtleTextGlass,   // Inactive tab icons
    tabIconSelected: warmSage,         // Active tab icons
    card: '#242831',                   // Card backgrounds
    
    // Semantic Colors
    textSecondary: secondaryTextGlass, // Secondary text
    textTertiary: subtleTextGlass,     // Tertiary text
    textDisabled: 'rgba(255, 255, 255, 0.3)', // Disabled text
    accent: warmSage,                  // Primary accent for CTAs
  },
};

================
File: store/classStore.ts
================
/**
 * Class Store using Zustand
 * 
 * This store manages global class and feed state including:
 * - Current active class context
 * - Class membership management
 * - Feed posts and interactions
 * - Real-time updates and notifications
 */

import { create } from 'zustand';
import { getUserClasses, joinClass, leaveClass } from '../lib/classService';
import type { Class, ClassMember, Comment, Post } from '../lib/supabase';
import { supabase } from '../lib/supabase';

// Extended post interface with user information
export interface PostWithUser extends Post {
  user?: {
    id: string;
    username?: string;
    avatar_url?: string;
  };
  comments_count?: number;
  has_ai_feedback?: boolean;
  user_has_viewed?: boolean;
}

// Extended comment interface with user information
export interface CommentWithUser extends Comment {
  user?: {
    id: string;
    username?: string;
    avatar_url?: string;
  };
}

// Class state interface
export interface ClassState {
  // Current state
  currentClass: (Class & { membership: ClassMember }) | null;
  userClasses: Array<Class & { membership: ClassMember }>;
  classPosts: PostWithUser[];
  postComments: { [postId: string]: CommentWithUser[] };
  isLoading: boolean;
  isLoadingPosts: boolean;
  isLoadingComments: { [postId: string]: boolean };
  
  // Feed state
  feedRefreshKey: number;
  lastPostUpdate: Date | null;
  
  // Actions
  loadUserClasses: (userId: string) => Promise<void>;
  setCurrentClass: (classData: (Class & { membership: ClassMember }) | null) => void;
  joinClassWithCode: (joinCode: string, userId: string) => Promise<{ success: boolean; error?: string; isExistingMember?: boolean }>;
  leaveCurrentClass: (userId: string) => Promise<{ success: boolean; error?: string }>;
  
  // Feed actions
  loadClassPosts: (classId: string, userId: string) => Promise<void>;
  loadPostComments: (postId: string) => Promise<void>;
  refreshFeed: () => void;
  markPostAsViewed: (postId: string, userId: string) => Promise<void>;
  
  // Internal state setters
  setLoading: (loading: boolean) => void;
  setLoadingPosts: (loading: boolean) => void;
  setLoadingComments: (postId: string, loading: boolean) => void;
  clearClassData: () => void;
}

export const useClassStore = create<ClassState>((set, get) => ({
  // Initial state
  currentClass: null,
  userClasses: [],
  classPosts: [],
  postComments: {},
  isLoading: false,
  isLoadingPosts: false,
  isLoadingComments: {},
  feedRefreshKey: 0,
  lastPostUpdate: null,

  // Load user's class memberships
  loadUserClasses: async (userId: string) => {
    console.log('📚 Class Store - Loading user classes:', userId);
    console.log('🔧 DEBUG - loadUserClasses START:', {
      currentUserClassesCount: get().userClasses.length,
      currentClassIds: get().userClasses.map(c => c.id),
      timestamp: Date.now()
    });
    set({ isLoading: true });

    try {
      const classes = await getUserClasses(userId);
      console.log('✅ Class Store - Loaded', classes.length, 'classes');
      
      set({ 
        userClasses: classes,
        isLoading: false 
      });

      console.log('🔧 DEBUG - loadUserClasses END:', {
        newUserClassesCount: classes.length,
        newClassIds: classes.map(c => c.id),
        newClassNames: classes.map(c => c.name),
        timestamp: Date.now()
      });

      // Don't auto-select any class - let user choose from ClassListScreen

    } catch (error) {
      console.error('❌ Class Store - Error loading user classes:', error);
      set({ isLoading: false });
    }
  },

  // Set current active class
  setCurrentClass: (classData) => {
    console.log('🎯 Class Store - Setting current class:', classData?.name || 'None');
    set({ 
      currentClass: classData,
      classPosts: [], // Clear posts when switching classes
      postComments: {},
      feedRefreshKey: get().feedRefreshKey + 1
    });
  },

  // Join a class with join code
  joinClassWithCode: async (joinCode: string, userId: string) => {
    console.log('🚀 Class Store - Joining class with code:', joinCode);
    set({ isLoading: true });

    try {
      const result = await joinClass(joinCode, userId);
      
      if (result.success && result.class && result.membership) {
        console.log('🎉 Class Store - Successfully joined class:', result.class.name);
        
        // Check if user is already a member of this class
        const { userClasses } = get();
        const existingClass = userClasses.find(c => c.id === result.class!.id);
        
        if (existingClass || result.isExistingMember) {
          console.log('ℹ️ Class Store - User already member of class, not adding duplicate');
          set({ isLoading: false });
          return { 
            success: true, 
            isExistingMember: result.isExistingMember
          };
        }
        
        // Add to user classes (only if not already a member)
        const newClass = { ...result.class, membership: result.membership };
        const updatedClasses = [...userClasses, newClass];
        
        set({ 
          userClasses: updatedClasses,
          // Don't auto-select - let user choose from class list
          isLoading: false 
        });

        console.log('🔧 DEBUG - State after joinClassWithCode:', { 
          userClassesCount: updatedClasses.length, 
          classIds: updatedClasses.map(c => c.id),
          classNames: updatedClasses.map(c => c.name),
          timestamp: Date.now(),
          newClassAdded: result.class.name
        });

        return { success: true, isExistingMember: false };
      } else {
        console.log('❌ Class Store - Failed to join class:', result.error);
        set({ isLoading: false });
        return { success: false, error: result.error, isExistingMember: false };
      }

    } catch (error) {
      console.error('❌ Class Store - Unexpected error joining class:', error);
      set({ isLoading: false });
      return { 
        success: false, 
        error: 'An unexpected error occurred while joining the class',
        isExistingMember: false
      };
    }
  },

  // Leave current class
  leaveCurrentClass: async (userId: string) => {
    const { currentClass } = get();
    if (!currentClass) {
      return { success: false, error: 'No class selected' };
    }

    console.log('👋 Class Store - Leaving class:', currentClass.name);
    set({ isLoading: true });

    try {
      const result = await leaveClass(currentClass.id, userId);
      
      if (result.success) {
        console.log('✅ Class Store - Successfully left class');
        
        // Remove from user classes
        const { userClasses } = get();
        const updatedClasses = userClasses.filter(c => c.id !== currentClass.id);
        
        set({ 
          userClasses: updatedClasses,
          currentClass: updatedClasses.length > 0 ? updatedClasses[0] : null,
          classPosts: [],
          postComments: {},
          isLoading: false 
        });

        return { success: true };
      } else {
        console.log('❌ Class Store - Failed to leave class:', result.error);
        set({ isLoading: false });
        return { success: false, error: result.error };
      }

    } catch (error) {
      console.error('❌ Class Store - Unexpected error leaving class:', error);
      set({ isLoading: false });
      return { 
        success: false, 
        error: 'An unexpected error occurred while leaving the class' 
      };
    }
  },

  // Load posts for current class
  loadClassPosts: async (classId: string, userId: string) => {
    console.log('📰 Class Store - Loading posts for class:', classId);
    set({ isLoadingPosts: true });

    try {
      // Fetch posts first (without user join to avoid foreign key error)
      const { data: posts, error } = await supabase
        .from('posts')
        .select('*')
        .eq('class_id', classId)
        .eq('is_expired', false)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('❌ Class Store - Error loading posts:', error);
        set({ isLoadingPosts: false });
        return;
      }

      // Get unique user IDs from posts
      const userIds = [...new Set(posts?.map(post => post.user_id) || [])];
      
      // Fetch user data separately
      const { data: users, error: usersError } = await supabase
        .from('users')
        .select('id, username, avatar_url')
        .in('id', userIds);

      if (usersError) {
        console.error('❌ Class Store - Error loading users:', usersError);
      }

      // Create user lookup map
      const userMap = new Map(users?.map(user => [user.id, user]) || []);

      // Check if user has viewed each post and get additional metadata
      const postsWithMetadata = await Promise.all(
        (posts || []).map(async (post) => {
          // Check if user has viewed this post
          const { data: viewData } = await supabase
            .from('post_views')
            .select('id')
            .eq('post_id', post.id)
            .eq('user_id', userId)
            .single();

          // Get comment count
          const { count: commentsCount } = await supabase
            .from('comments')
            .select('id', { count: 'exact' })
            .eq('post_id', post.id);

          // Check if post has AI feedback
          const { data: aiFeedback } = await supabase
            .from('ai_feedback')
            .select('id')
            .eq('post_id', post.id)
            .single();

          return {
            ...post,
            user: userMap.get(post.user_id) || null,
            comments_count: commentsCount || 0,
            has_ai_feedback: !!aiFeedback,
            user_has_viewed: !!viewData
          } as PostWithUser;
        })
      );

      console.log('✅ Class Store - Loaded', postsWithMetadata.length, 'posts');
      console.log('🔧 DEBUG - Posts loaded successfully:', {
        classId,
        postsCount: postsWithMetadata.length,
        postTitles: postsWithMetadata.map(p => p.image_url?.substring(0, 50) + '...'),
        timestamp: Date.now()
      });
      set({ 
        classPosts: postsWithMetadata,
        isLoadingPosts: false,
        lastPostUpdate: new Date()
      });

    } catch (error) {
      console.error('❌ Class Store - Unexpected error loading posts:', error);
      set({ isLoadingPosts: false });
    }
  },

  // Load comments for a specific post
  loadPostComments: async (postId: string) => {
    console.log('💬 Class Store - Loading comments for post:', postId);
    set({ isLoadingComments: { ...get().isLoadingComments, [postId]: true } });

    try {
      // Fetch comments first (without user join to avoid foreign key error)
      const { data: comments, error } = await supabase
        .from('comments')
        .select('*')
        .eq('post_id', postId)
        .order('created_at', { ascending: true });

      if (error) {
        console.error('❌ Class Store - Error loading comments:', error);
        set({ 
          isLoadingComments: { 
            ...get().isLoadingComments, 
            [postId]: false 
          } 
        });
        return;
      }

      // Get unique user IDs from comments
      const userIds = [...new Set(comments?.map(comment => comment.user_id) || [])];
      
      // Fetch user data separately
      const { data: users, error: usersError } = await supabase
        .from('users')
        .select('id, username, avatar_url')
        .in('id', userIds);

      if (usersError) {
        console.error('❌ Class Store - Error loading comment users:', usersError);
      }

      // Create user lookup map
      const userMap = new Map(users?.map(user => [user.id, user]) || []);

      const commentsWithUsers = (comments || []).map(comment => ({
        ...comment,
        user: userMap.get(comment.user_id) || null
      })) as CommentWithUser[];

      console.log('✅ Class Store - Loaded', commentsWithUsers.length, 'comments');
      set({ 
        postComments: { 
          ...get().postComments, 
          [postId]: commentsWithUsers 
        },
        isLoadingComments: { 
          ...get().isLoadingComments, 
          [postId]: false 
        }
      });

    } catch (error) {
      console.error('❌ Class Store - Unexpected error loading comments:', error);
      set({ 
        isLoadingComments: { 
          ...get().isLoadingComments, 
          [postId]: false 
        } 
      });
    }
  },

  // Refresh feed
  refreshFeed: () => {
    console.log('🔄 Class Store - Refreshing feed');
    set({ feedRefreshKey: get().feedRefreshKey + 1 });
  },

  // Mark post as viewed
  markPostAsViewed: async (postId: string, userId: string) => {
    console.log('👁️ Class Store - Marking post as viewed:', postId);

    try {
      // Record the view
      await supabase
        .from('post_views')
        .insert({
          post_id: postId,
          user_id: userId
        });

      // Increment view count using the database function
      await supabase.rpc('increment_post_view', {
        post_id: postId,
        viewer_id: userId
      });

      // Update local state
      const { classPosts } = get();
      const updatedPosts = classPosts.map(post => 
        post.id === postId 
          ? { ...post, user_has_viewed: true, view_count: post.view_count + 1 }
          : post
      );

      set({ classPosts: updatedPosts });

    } catch (error) {
      // Ignore errors (user might have already viewed this post)
      console.log('ℹ️ Class Store - Post view not recorded (already viewed?)');
    }
  },

  // State setters
  setLoading: (isLoading) => set({ isLoading }),
  setLoadingPosts: (isLoadingPosts) => set({ isLoadingPosts }),
  setLoadingComments: (postId, loading) => set({ 
    isLoadingComments: { 
      ...get().isLoadingComments, 
      [postId]: loading 
    } 
  }),

  // Clear all class data (for logout)
  clearClassData: () => {
    console.log('🧹 Class Store - Clearing all class data');
    set({
      currentClass: null,
      userClasses: [],
      classPosts: [],
      postComments: {},
      isLoading: false,
      isLoadingPosts: false,
      isLoadingComments: {},
      feedRefreshKey: 0,
      lastPostUpdate: null
    });
  }
}));

================
File: .gitignore
================
# Learn more https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files

# dependencies
node_modules/

# Expo
.expo/
dist/
web-build/
expo-env.d.ts

# Native
.kotlin/
*.orig.*
*.jks
*.p8
*.p12
*.key
*.mobileprovision

# Metro
.metro-health-check*

# debug
npm-debug.*
yarn-debug.*
yarn-error.*

# macOS
.DS_Store
*.pem

# local env files
.env*.local
.env
# typescript
*.tsbuildinfo

app-example

# Local configuration - do not commit
mcp.json

SupabaseAdmin.json

================
File: app/(auth)/login.tsx
================
/**
 * Login Screen Component - Glass Morphism Implementation
 * 
 * This screen implements the login interface from UIDesign.md specifications:
 * - Clean white background with subtle paper texture
 * - Glass morphism container (Primary Glass Card specs)
 * - "Welcome to EphemeralArt" header in Instrument Serif 28pt
 * - Email/password inputs with glass morphism styling
 * - Warm sage accent color for focus states
 * - Typography hierarchy per UIDesign.md exact specifications
 */

import { Link, router } from 'expo-router';
import React from 'react';
import {
    Alert,
    KeyboardAvoidingView,
    Platform,
    SafeAreaView,
    StyleSheet,
    View,
} from 'react-native';
import AuthForm, { type AuthFormData } from '../../components/auth/AuthForm';
import { ThemedText } from '../../components/ThemedText';
import GlassMorphismCard from '../../components/ui/GlassMorphismCard';
import { Colors } from '../../constants/Colors';
import { useColorScheme } from '../../hooks/useColorScheme';
import { useAuthStore } from '../../store/authStore';

export default function LoginScreen() {
  console.log('🔑 Login Screen - Rendering glass morphism login interface');

  const colorScheme = useColorScheme();
  const colors = Colors[colorScheme ?? 'light'];

  // Auth store
  const { signIn, isLoading } = useAuthStore();

  /**
   * Handle login form submission
   */
  const handleLogin = async (formData: AuthFormData) => {
    console.log('🚀 Login Screen - Starting login process');

    try {
      const result = await signIn(formData.email, formData.password);

      if (result.success) {
        console.log('✅ Login Screen - Login successful, redirecting to camera');
        router.replace('/(tabs)/camera');
      } else {
        console.error('❌ Login Screen - Login failed:', result.error);
        Alert.alert(
          'Login Failed',
          result.error || 'An error occurred during login. Please try again.',
          [{ text: 'OK' }]
        );
      }
    } catch (error) {
      console.error('❌ Login Screen - Unexpected login error:', error);
      Alert.alert(
        'Login Error',
        'An unexpected error occurred. Please try again.',
        [{ text: 'OK' }]
      );
      throw error; // Re-throw so AuthForm can handle loading state
    }
  };

  return (
    <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>
      {/* Soft gradient background per UIDesign.md */}
      <View style={[styles.backgroundGradient, { backgroundColor: colors.surface }]} />
      
      <KeyboardAvoidingView
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={styles.keyboardView}
      >
        <View style={styles.content}>
          {/* Glass Morphism Card Container per UIDesign.md */}
          <GlassMorphismCard type="primary" style={styles.loginCard}>
            {/* Header - EphemeralArt Branding per UIDesign.md */}
            <View style={styles.header}>
              <ThemedText type="screenTitle" style={[styles.title, { color: colors.text }]}>
                Welcome to EphemeralArt
              </ThemedText>
              <ThemedText type="bodyText" style={[styles.subtitle, { color: colors.textSecondary }]}>
                Sign in to join your art class
              </ThemedText>
            </View>

            {/* Form */}
            <View style={styles.form}>
              <AuthForm
                mode="login"
                onSubmit={handleLogin}
                isLoading={isLoading}
              />
            </View>

            {/* Footer */}
            <View style={styles.footer}>
              <ThemedText type="bodyText" style={[styles.footerText, { color: colors.textSecondary }]}>
                Don't have an account?{' '}
                <Link href="/(auth)/register" asChild>
                  <ThemedText type="link" style={[styles.linkText, { color: colors.accentSage }]}>
                    Create Account
                  </ThemedText>
                </Link>
              </ThemedText>
            </View>
          </GlassMorphismCard>
        </View>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}

// Glass Morphism Design System Styles per UIDesign.md
const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  backgroundGradient: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    // Subtle gradient from #F8F8F8 to #FFFFFF per UIDesign.md
    opacity: 0.5,
  },
  keyboardView: {
    flex: 1,
  },
  content: {
    flex: 1,
    justifyContent: 'center',    // Center the glass card vertically
    paddingHorizontal: 20,       // 20px screen margins per UIDesign.md
    paddingVertical: 40,
  },
  loginCard: {
    padding: 24,                 // 24px section spacing per UIDesign.md
    marginHorizontal: 4,         // Slight margin for card shadow visibility
  },
  header: {
    alignItems: 'center',
    marginBottom: 24,            // 24px section spacing per UIDesign.md
    gap: 8,                      // 8px base unit spacing
  },
  title: {
    textAlign: 'center',
    // Instrument Serif 28pt per UIDesign.md applied via ThemedText type="screenTitle"
  },
  subtitle: {
    textAlign: 'center',
    // Montserrat 16pt per UIDesign.md applied via ThemedText type="bodyText"
  },
  form: {
    marginBottom: 24,            // 24px section spacing
  },
  footer: {
    alignItems: 'center',
  },
  footerText: {
    textAlign: 'center',
    // Montserrat 16pt per UIDesign.md applied via ThemedText type="bodyText"
  },
  linkText: {
    // Warm sage color applied via color prop
    // Montserrat 16pt Medium per UIDesign.md applied via ThemedText type="link"
  },
});

================
File: app/(auth)/register.tsx
================
/**
 * Registration Screen Component - Glass Morphism Implementation
 * 
 * This screen implements the registration interface using UIDesign.md specifications:
 * - Clean white background with subtle paper texture
 * - Glass morphism container (Primary Glass Card specs)
 * - "Join EphemeralArt" header in Instrument Serif 28pt
 * - Email/password/confirm password inputs with glass morphism styling
 * - Warm sage accent color for focus states and submit button
 * - Typography hierarchy per UIDesign.md exact specifications
 */

import { Link, router } from 'expo-router';
import React from 'react';
import {
    Alert,
    KeyboardAvoidingView,
    Platform,
    SafeAreaView,
    ScrollView,
    StyleSheet,
    View,
} from 'react-native';
import AuthForm, { type AuthFormData } from '../../components/auth/AuthForm';
import { ThemedText } from '../../components/ThemedText';
import GlassMorphismCard from '../../components/ui/GlassMorphismCard';
import { Colors } from '../../constants/Colors';
import { useColorScheme } from '../../hooks/useColorScheme';
import { useAuthStore } from '../../store/authStore';

export default function RegisterScreen() {
  console.log('📝 Register Screen - Rendering glass morphism registration interface');

  const colorScheme = useColorScheme();
  const colors = Colors[colorScheme ?? 'light'];

  // Auth store
  const { signUp, isLoading } = useAuthStore();

  /**
   * Handle registration form submission
   */
  const handleRegister = async (formData: AuthFormData) => {
    console.log('🚀 Register Screen - Starting registration process');

    try {
      const result = await signUp(formData.email, formData.password);

      if (result.success) {
        console.log('✅ Register Screen - Registration successful, user automatically signed in');
        // User is automatically signed in after registration (no email verification needed)
        // The auth state listener will redirect them to the main app
        Alert.alert(
          'Welcome to EphemeralArt!',
          'Your account has been created successfully. Let\'s get you started!',
          [
            {
              text: 'Get Started',
              onPress: () => {
                console.log('🎉 Register Screen - User ready to start, redirecting to camera');
                router.replace('/(tabs)/camera');
              },
            },
          ]
        );
      } else {
        console.error('❌ Register Screen - Registration failed:', result.error);
        Alert.alert(
          'Registration Failed',
          result.error || 'An error occurred during registration. Please try again.',
          [{ text: 'OK' }]
        );
      }
    } catch (error) {
      console.error('❌ Register Screen - Unexpected registration error:', error);
      Alert.alert(
        'Registration Error',
        'An unexpected error occurred. Please try again.',
        [{ text: 'OK' }]
      );
      throw error; // Re-throw so AuthForm can handle loading state
    }
  };

  return (
    <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>
      {/* Soft gradient background per UIDesign.md */}
      <View style={[styles.backgroundGradient, { backgroundColor: colors.surface }]} />
      
      <KeyboardAvoidingView
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={styles.keyboardView}
      >
        <ScrollView 
          style={styles.scrollView}
          contentContainerStyle={styles.scrollContent}
          showsVerticalScrollIndicator={false}
        >
          <View style={styles.content}>
            {/* Glass Morphism Card Container per UIDesign.md */}
            <GlassMorphismCard type="primary" style={styles.registerCard}>
              {/* Header - EphemeralArt Branding per UIDesign.md */}
              <View style={styles.header}>
                <ThemedText type="screenTitle" style={[styles.title, { color: colors.text }]}>
                  Join EphemeralArt
                </ThemedText>
                <ThemedText type="bodyText" style={[styles.subtitle, { color: colors.textSecondary }]}>
                  Create your account to start sharing artwork
                </ThemedText>
              </View>

              {/* Form */}
              <View style={styles.form}>
                <AuthForm
                  mode="register"
                  onSubmit={handleRegister}
                  isLoading={isLoading}
                />
              </View>

              {/* Footer */}
              <View style={styles.footer}>
                <ThemedText type="bodyText" style={[styles.footerText, { color: colors.textSecondary }]}>
                  Already have an account?{' '}
                  <Link href="/(auth)/login" asChild>
                    <ThemedText type="link" style={[styles.linkText, { color: colors.accentSage }]}>
                      Sign In
                    </ThemedText>
                  </Link>
                </ThemedText>
              </View>
            </GlassMorphismCard>
          </View>
        </ScrollView>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}

// Glass Morphism Design System Styles per UIDesign.md
const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  backgroundGradient: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    // Subtle gradient from #F8F8F8 to #FFFFFF per UIDesign.md
    opacity: 0.5,
  },
  keyboardView: {
    flex: 1,
  },
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    flexGrow: 1,
    justifyContent: 'center',    // Center the glass card vertically
    paddingVertical: 40,
  },
  content: {
    paddingHorizontal: 20,       // 20px screen margins per UIDesign.md
  },
  registerCard: {
    padding: 24,                 // 24px section spacing per UIDesign.md
    marginHorizontal: 4,         // Slight margin for card shadow visibility
  },
  header: {
    alignItems: 'center',
    marginBottom: 24,            // 24px section spacing per UIDesign.md
    gap: 8,                      // 8px base unit spacing
  },
  title: {
    textAlign: 'center',
    // Instrument Serif 28pt per UIDesign.md applied via ThemedText type="screenTitle"
  },
  subtitle: {
    textAlign: 'center',
    // Montserrat 16pt per UIDesign.md applied via ThemedText type="bodyText"
  },
  form: {
    marginBottom: 24,            // 24px section spacing
  },
  footer: {
    alignItems: 'center',
  },
  footerText: {
    textAlign: 'center',
    // Montserrat 16pt per UIDesign.md applied via ThemedText type="bodyText"
  },
  linkText: {
    // Warm sage color applied via color prop
    // Montserrat 16pt Medium per UIDesign.md applied via ThemedText type="link"
  },
});

================
File: app/(tabs)/camera.tsx
================
/**
 * Camera Screen Component
 * 
 * This component provides camera functionality for the SnapClone app.
 * Features:
 * - Camera permissions handling
 * - Photo capture with quality settings
 * - Image preview after capture
 * - Photo upload to Supabase Storage
 * - Themed styling that adapts to light/dark mode
 * - Error handling and loading states
 * - Logout functionality for easy user testing
 */

import { ThemedText } from '@/components/ThemedText';
import { ThemedView } from '@/components/ThemedView';
import { useThemeColor } from '@/hooks/useThemeColor';
import { uploadPhoto } from '@/lib/photoService';
import { useAuthStore } from '@/store/authStore';
import { useClassStore } from '@/store/classStore';
import { CameraView, useCameraPermissions } from 'expo-camera';
import { router } from 'expo-router';
import React, { useRef, useState } from 'react';
import { Alert, Image, StyleSheet, Text, TouchableOpacity, View } from 'react-native';

export default function CameraScreen() {
  // Camera reference for accessing camera methods
  const cameraRef = useRef<CameraView>(null);
  
  // State for captured photo URI
  const [capturedPhoto, setCapturedPhoto] = useState<string | null>(null);
  
  // State for capturing process
  const [isCapturing, setIsCapturing] = useState(false);
  
  // State for upload process
  const [isUploading, setIsUploading] = useState(false);
  
  // State for upload success
  const [uploadSuccess, setUploadSuccess] = useState(false);
  
  // Camera permissions hook
  const [permission, requestPermission] = useCameraPermissions();
  
  // Auth store for logout functionality
  const { signOut } = useAuthStore();
  const { clearClassData } = useClassStore();
  
  // Themed colors
  const backgroundColor = useThemeColor({}, 'background');
  const textColor = useThemeColor({}, 'text');
  const tintColor = useThemeColor({}, 'tint');

  console.log('🎥 Camera Screen - Rendering with permission:', permission?.granted);
  console.log('📷 Camera Screen - Captured photo:', capturedPhoto ? 'Photo captured' : 'No photo');
  console.log('⏫ Camera Screen - Upload state:', { isUploading, uploadSuccess });

  /**
   * Handle logout for easy user testing
   */
  const handleLogout = async () => {
    console.log('👋 Camera Screen - User logout requested');
    
    Alert.alert(
      'Logout',
      'Are you sure you want to logout?',
      [
        {
          text: 'Cancel',
          style: 'cancel',
        },
        {
          text: 'Logout',
          style: 'destructive',
          onPress: async () => {
            console.log('🚪 Camera Screen - Logging out user');
            try {
              // Clear class data first
              clearClassData();
              
              // Sign out user
              await signOut();
              
              console.log('✅ Camera Screen - Logout successful, redirecting to login');
              router.replace('/(auth)/login');
            } catch (error) {
              console.error('❌ Camera Screen - Logout error:', error);
              Alert.alert('Error', 'Failed to logout. Please try again.');
            }
          },
        },
      ]
    );
  };

  /**
   * Handle camera permission request
   */
  const handlePermissionRequest = async () => {
    console.log('🔐 Camera Screen - Requesting camera permission');
    try {
      const result = await requestPermission();
      console.log('✅ Camera Screen - Permission result:', result.granted);
      
      if (!result.granted) {
        Alert.alert(
          'Camera Permission Required',
          'This app needs camera access to take photos. Please enable camera permissions in your device settings.',
          [{ text: 'OK' }]
        );
      }
    } catch (error) {
      console.error('❌ Camera Screen - Permission error:', error);
      Alert.alert('Error', 'Failed to request camera permission');
    }
  };

  /**
   * Capture photo using camera
   */
  const capturePhoto = async () => {
    console.log('📸 Camera Screen - Starting photo capture');
    
    if (!cameraRef.current) {
      console.error('❌ Camera Screen - Camera ref not available');
      Alert.alert('Error', 'Camera not ready');
      return;
    }

    try {
      setIsCapturing(true);
      
      // Take picture with optimized quality settings
      const photo = await cameraRef.current.takePictureAsync({
        quality: 0.6, // Balanced quality and file size
        base64: false, // Don't include base64 to save memory
        skipProcessing: false, // Allow processing for better quality
      });
      
      console.log('✅ Camera Screen - Photo captured:', photo.uri);
      setCapturedPhoto(photo.uri);
      setUploadSuccess(false); // Reset upload success state
      
    } catch (error) {
      console.error('❌ Camera Screen - Capture error:', error);
      Alert.alert('Error', 'Failed to capture photo');
    } finally {
      setIsCapturing(false);
    }
  };

  /**
   * Upload photo to Supabase
   */
  const handleUploadPhoto = async () => {
    if (!capturedPhoto) {
      console.error('❌ Camera Screen - No photo to upload');
      Alert.alert('Error', 'No photo to upload');
      return;
    }

    console.log('⏫ Camera Screen - Starting photo upload');
    setIsUploading(true);

    try {
      const result = await uploadPhoto(capturedPhoto);
      
      if (result.success) {
        console.log('✅ Camera Screen - Photo uploaded successfully!');
        console.log('🌐 Public URL:', result.publicUrl);
        
        setUploadSuccess(true);
        Alert.alert(
          'Success! 🎉',
          'Your photo has been uploaded to Supabase!',
          [
            {
              text: 'Take Another',
              onPress: resetCamera,
            },
            {
              text: 'OK',
              style: 'default',
            },
          ]
        );
      } else {
        console.error('❌ Camera Screen - Upload failed:', result.error);
        Alert.alert(
          'Upload Failed',
          result.error || 'Failed to upload photo. Please try again.',
          [{ text: 'OK' }]
        );
      }
    } catch (error) {
      console.error('❌ Camera Screen - Upload error:', error);
      Alert.alert(
        'Upload Error',
        'An unexpected error occurred while uploading. Please try again.',
        [{ text: 'OK' }]
      );
    } finally {
      setIsUploading(false);
    }
  };

  /**
   * Reset to camera view from preview
   */
  const resetCamera = () => {
    console.log('🔄 Camera Screen - Resetting camera view');
    setCapturedPhoto(null);
    setUploadSuccess(false);
  };

  // Handle permission not granted
  if (!permission) {
    console.log('⏳ Camera Screen - Permission loading');
    return (
      <ThemedView style={styles.container}>
        <ThemedText style={styles.loadingText}>Loading camera...</ThemedText>
      </ThemedView>
    );
  }

  if (!permission.granted) {
    console.log('🚫 Camera Screen - Permission not granted');
    return (
      <ThemedView style={styles.container}>
        <ThemedView style={styles.permissionContainer}>
          <ThemedText style={styles.permissionTitle}>Camera Access Required</ThemedText>
          <ThemedText style={styles.permissionText}>
            SnapClone needs access to your camera to take photos
          </ThemedText>
          <TouchableOpacity
            style={[styles.permissionButton, { backgroundColor: tintColor }]}
            onPress={handlePermissionRequest}
          >
            <Text style={[styles.permissionButtonText, { color: 'white' }]}>
              Grant Camera Permission
            </Text>
          </TouchableOpacity>
        </ThemedView>
      </ThemedView>
    );
  }

  return (
    <View style={[styles.container, { backgroundColor }]}>
      {/* Logout Button - positioned in top-right corner */}
      <TouchableOpacity
        style={[styles.logoutButton, { backgroundColor: 'rgba(0, 0, 0, 0.6)' }]}
        onPress={handleLogout}
        activeOpacity={0.8}
      >
        <Text style={styles.logoutButtonText}>Logout</Text>
      </TouchableOpacity>

      {capturedPhoto ? (
        // Photo preview mode
        <>
          <Image 
            source={{ uri: capturedPhoto }} 
            style={styles.previewImage}
            resizeMode="cover"
          />
          <View style={styles.previewOverlay}>
            <View style={styles.buttonContainer}>
              <TouchableOpacity
                style={[styles.secondaryButton, { borderColor: tintColor }]}
                onPress={resetCamera}
                disabled={isUploading}
              >
                <Text style={[styles.secondaryButtonText, { color: tintColor }]}>
                  Take Another
                </Text>
              </TouchableOpacity>
              
              <TouchableOpacity
                style={[
                  styles.primaryButton,
                  { backgroundColor: uploadSuccess ? '#4CAF50' : tintColor },
                  isUploading && styles.buttonDisabled
                ]}
                onPress={handleUploadPhoto}
                disabled={isUploading || uploadSuccess}
              >
                <Text style={styles.primaryButtonText}>
                  {isUploading 
                    ? 'Uploading...' 
                    : uploadSuccess 
                      ? 'Uploaded! ✅' 
                      : 'Save to Supabase'}
                </Text>
              </TouchableOpacity>
            </View>
            
            {isUploading && (
              <Text style={[styles.statusText, { color: textColor }]}>
                📤 Uploading to Supabase...
              </Text>
            )}
          </View>
        </>
      ) : (
        // Camera mode
        <>
          <CameraView 
            ref={cameraRef} 
            style={styles.camera} 
            facing="back"
          />
          <View style={styles.cameraOverlay}>
            <TouchableOpacity
              style={[
                styles.captureButton,
                { borderColor: tintColor },
                isCapturing && styles.captureButtonDisabled
              ]}
              onPress={capturePhoto}
              disabled={isCapturing}
            >
              <View style={[
                styles.captureButtonInner,
                { backgroundColor: isCapturing ? '#ccc' : 'white' }
              ]} />
            </TouchableOpacity>
            
            {isCapturing && (
              <Text style={[styles.capturingText, { color: textColor }]}>
                Capturing...
              </Text>
            )}
          </View>
        </>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  
  // Logout button
  logoutButton: {
    position: 'absolute',
    top: 60, // Below status bar
    right: 20,
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
    zIndex: 1000, // Ensure it's above other elements
  },
  logoutButtonText: {
    color: 'white',
    fontSize: 14,
    fontWeight: '600',
  },
  
  // Loading state
  loadingText: {
    textAlign: 'center',
    marginTop: 100,
    fontSize: 18,
  },
  
  // Permission request
  permissionContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  permissionTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 16,
    textAlign: 'center',
  },
  permissionText: {
    fontSize: 16,
    textAlign: 'center',
    marginBottom: 32,
    lineHeight: 24,
  },
  permissionButton: {
    paddingHorizontal: 32,
    paddingVertical: 16,
    borderRadius: 8,
  },
  permissionButtonText: {
    fontSize: 16,
    fontWeight: '600',
  },
  
  // Camera view
  camera: {
    flex: 1,
  },
  cameraOverlay: {
    position: 'absolute',
    bottom: 100, // Raised above tab bar (88px + 12px margin)
    left: 0,
    right: 0,
    height: 120,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.3)',
  },
  captureButton: {
    width: 80,
    height: 80,
    borderRadius: 40,
    borderWidth: 4,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'transparent',
  },
  captureButtonInner: {
    width: 60,
    height: 60,
    borderRadius: 30,
  },
  captureButtonDisabled: {
    opacity: 0.5,
  },
  capturingText: {
    position: 'absolute',
    bottom: 20,
    fontSize: 16,
    fontWeight: '600',
  },
  
  // Preview mode
  previewImage: {
    flex: 1,
    width: '100%',
  },
  previewOverlay: {
    position: 'absolute',
    bottom: 100, // Raised above tab bar (88px + 12px margin)
    left: 0,
    right: 0,
    height: 140,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
    paddingHorizontal: 20,
  },
  buttonContainer: {
    flexDirection: 'row',
    gap: 16,
    marginBottom: 8,
  },
  primaryButton: {
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
    minWidth: 140,
    alignItems: 'center',
  },
  primaryButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  secondaryButton: {
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
    borderWidth: 2,
    minWidth: 120,
    alignItems: 'center',
  },
  secondaryButtonText: {
    fontSize: 16,
    fontWeight: '600',
  },
  buttonDisabled: {
    opacity: 0.6,
  },
  statusText: {
    fontSize: 14,
    textAlign: 'center',
    marginTop: 8,
  },
});

================
File: app/_layout.tsx
================
import 'react-native-url-polyfill/auto';

import {
  InstrumentSerif_400Regular,
  InstrumentSerif_400Regular_Italic
} from '@expo-google-fonts/instrument-serif';
import {
  Montserrat_400Regular,
  Montserrat_500Medium,
  Montserrat_600SemiBold,
  Montserrat_700Bold
} from '@expo-google-fonts/montserrat';
import { DarkTheme, DefaultTheme, ThemeProvider } from '@react-navigation/native';
import { useFonts } from 'expo-font';
import { Stack } from 'expo-router';
import { StatusBar } from 'expo-status-bar';
import { useEffect } from 'react';
import 'react-native-reanimated';

import { useColorScheme } from '@/hooks/useColorScheme';
import { useAuthStore } from '@/store/authStore';

export default function RootLayout() {
  const colorScheme = useColorScheme();
  const { initialize, isInitialized } = useAuthStore();
  
  const [loaded] = useFonts({
    // Draft Typography System - Instrument Serif for headers/emphasis
    InstrumentSerif_400Regular,
    InstrumentSerif_400Regular_Italic,
    
    // Draft Typography System - Montserrat for UI/body text
    Montserrat_400Regular,
    Montserrat_500Medium,
    Montserrat_600SemiBold,
    Montserrat_700Bold,
    
    // Keep SpaceMono as fallback for development
    SpaceMono: require('../assets/fonts/SpaceMono-Regular.ttf'),
  });

  console.log('🚀 Root Layout - Initializing Draft app with proper typography');

  // Initialize auth store when app starts
  useEffect(() => {
    console.log('🔐 Root Layout - Initializing auth store');
    if (!isInitialized) {
      initialize();
    }
  }, [isInitialized, initialize]);

  if (!loaded) {
    // Async font loading only occurs in development.
    return null;
  }

  return (
    <ThemeProvider value={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>
      <Stack screenOptions={{ headerShown: false }}>
        <Stack.Screen name="index" />
        <Stack.Screen 
          name="(auth)" 
          options={{ 
            headerShown: false,
            gestureEnabled: false,
          }} 
        />
        <Stack.Screen name="(tabs)" options={{ headerShown: false }} />
        <Stack.Screen name="+not-found" />
      </Stack>
      <StatusBar style="auto" />
    </ThemeProvider>
  );
}

================
File: app/(tabs)/index.tsx
================
/**
 * Class Feed Screen - Glass Morphism Artwork-as-Background System
 * 
 * This screen displays the ephemeral art sharing feed where students can:
 * - View classmates' artwork posts as full-screen backgrounds with glass morphism overlays
 * - Swipe vertically between posts with smooth artwork crossfades
 * - Access camera to share their own artwork
 * - Engage with posts through comments and interactions
 * - Experience anxiety-reducing, ephemeral content sharing
 * 
 * Design System: Glass morphism elegance per UIDesign.md specifications
 */

import { router } from 'expo-router';
import React, { useEffect, useState } from 'react';
import {
  Animated,
  Dimensions,
  ImageBackground,
  Platform,
  SafeAreaView,
  StyleSheet,
  TouchableOpacity,
  View
} from 'react-native';

import { ThemedText } from '@/components/ThemedText';
import ClassJoinModal from '@/components/feed/ClassJoinModal';
import ClassListScreen from '@/components/feed/ClassListScreen';
import GlassMorphismCard from '@/components/ui/GlassMorphismCard';
import { Colors } from '@/constants/Colors';
import { useColorScheme } from '@/hooks/useColorScheme';
import { useAuthStore } from '@/store/authStore';
import { useClassStore } from '@/store/classStore';

const { width: SCREEN_WIDTH, height: SCREEN_HEIGHT } = Dimensions.get('window');

export default function ClassFeedScreen() {
  console.log('🎨 Class Feed Screen - Rendering glass morphism artwork-as-background feed');
  
  const colorScheme = useColorScheme();
  const colors = Colors[colorScheme ?? 'light'];
  
  // Auth state
  const { user, profile } = useAuthStore();
  
  // Class state
  const { 
    currentClass, 
    userClasses, 
    classPosts, 
    isLoading, 
    isLoadingPosts,
    loadUserClasses, 
    loadClassPosts,
    setCurrentClass,
    refreshFeed 
  } = useClassStore();
  
  // Local state
  const [showJoinModal, setShowJoinModal] = useState(false);
  const [showClassList, setShowClassList] = useState(true); // New state for class selection
  const [currentPostIndex, setCurrentPostIndex] = useState(0);
  const [backgroundOpacity] = useState(new Animated.Value(1));

  /**
   * Load user's classes on mount and when user changes
   */
  useEffect(() => {
    console.log('📚 Class Feed Screen - Loading user classes for:', user?.id);
    if (user?.id) {
      loadUserClasses(user.id);
    }
  }, [user?.id, loadUserClasses]);

  /**
   * Load class posts when current class changes
   */
  useEffect(() => {
    console.log('📰 Class Feed Screen - Current class changed:', currentClass?.name);
    if (currentClass && user?.id) {
      loadClassPosts(currentClass.id, user.id);
      // Don't automatically hide class list - let user navigation control this
    }
  }, [currentClass?.id, user?.id, loadClassPosts]);

  /**
   * Check if user should see class list vs feed
   */
  useEffect(() => {
    console.log('🔍 Class Feed Screen - Checking class membership status');
    
    // Always show class list first when user loads the feed tab
    if (user && !isLoading) {
      if (!currentClass) {
        console.log('📚 Class Feed Screen - No class selected, showing class list');
        setShowClassList(true);
        setShowJoinModal(false);
      } else {
        console.log('🎨 Class Feed Screen - Class selected, showing feed');
        setShowClassList(false);
      }
    }
  }, [user, isLoading, currentClass]);

  /**
   * Handle class selection from class list
   */
  const handleClassSelect = (classId: string) => {
    console.log('🎯 Class Feed Screen - Class selected from list:', classId);
    console.log('🔧 DEBUG - handleClassSelect called:', {
      classId,
      userClassesCount: userClasses.length,
      availableClassIds: userClasses.map(c => c.id),
      timestamp: Date.now()
    });
    const selectedClass = userClasses.find(c => c.id === classId);
    console.log('🔧 DEBUG - selectedClass found:', {
      found: !!selectedClass,
      className: selectedClass?.name,
      timestamp: Date.now()
    });
    if (selectedClass) {
      setCurrentClass(selectedClass);
      
      // Force load posts immediately when selecting a class
      // This ensures posts load even if it's the same class being selected again
      if (user?.id) {
        console.log('🔄 Class Feed Screen - Force loading posts for selected class');
        loadClassPosts(selectedClass.id, user.id);
      }
    }
  };

  /**
   * Handle join class button from class list
   */
  const handleJoinClassFromList = () => {
    console.log('➕ Class Feed Screen - Opening join modal from class list');
    setShowJoinModal(true);
  };

  /**
   * Handle camera navigation
   */
  const handleCameraPress = () => {
    console.log('📸 Class Feed Screen - Opening camera');
    router.push('/camera');
  };

  /**
   * Handle join modal success
   */
  const handleJoinSuccess = () => {
    console.log('🎉 Class Feed Screen - Successfully joined class');
    console.log('🔧 DEBUG - handleJoinSuccess START:', {
      userClassesCount: userClasses.length,
      currentClassId: currentClass?.id,
      currentClassName: currentClass?.name,
      timestamp: Date.now(),
      showClassList,
      showJoinModal
    });
    setShowJoinModal(false);
    
    // Force refresh of user classes to ensure UI updates
    if (user?.id) {
      console.log('🔄 Class Feed Screen - Refreshing user classes after join');
      console.log('🔧 DEBUG - About to call loadUserClasses:', {
        userId: user.id,
        timestamp: Date.now()
      });
      loadUserClasses(user.id);
    }
  };

  /**
   * Get current user display name
   */
  const getUserDisplayName = () => {
    return profile?.username || user?.email?.split('@')[0] || 'Artist';
  };

  /**
   * Handle vertical swipe navigation between posts
   */
  const handleSwipeToNext = () => {
    if (currentPostIndex < classPosts.length - 1) {
      console.log('👆 Swiping to next post');
      // Crossfade animation (400ms ease-out per UIDesign.md)
      Animated.timing(backgroundOpacity, {
        toValue: 0,
        duration: 200,
        useNativeDriver: true,
      }).start(() => {
        setCurrentPostIndex(currentPostIndex + 1);
        Animated.timing(backgroundOpacity, {
          toValue: 1,
          duration: 200,
          useNativeDriver: true,
        }).start();
      });
    }
  };

  const handleSwipeToPrevious = () => {
    if (currentPostIndex > 0) {
      console.log('👇 Swiping to previous post');
      // Crossfade animation (400ms ease-out per UIDesign.md)
      Animated.timing(backgroundOpacity, {
        toValue: 0,
        duration: 200,
        useNativeDriver: true,
      }).start(() => {
        setCurrentPostIndex(currentPostIndex - 1);
        Animated.timing(backgroundOpacity, {
          toValue: 1,
          duration: 200,
          useNativeDriver: true,
        }).start();
      });
    }
  };

  /**
   * Format time remaining for display
   */
  const formatTimeRemaining = (expiresAt: string) => {
    const now = new Date().getTime();
    const expiry = new Date(expiresAt).getTime();
    const diff = expiry - now;
    
    if (diff <= 0) return 'Expired';
    
    const minutes = Math.floor(diff / (1000 * 60));
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);
    
    if (days > 0) return `${days}d ${hours % 24}h`;
    if (hours > 0) return `${hours}h ${minutes % 60}m`;
    return `${minutes}m`;
  };

  // Show class selection screen when showClassList is true (for all users)
  if (showClassList) {
    return (
      <>
        <ClassListScreen 
          onClassSelect={handleClassSelect}
          onJoinClass={handleJoinClassFromList}
        />
        
        {/* Join Class Modal */}
        <ClassJoinModal
          visible={showJoinModal}
          onClose={() => setShowJoinModal(false)}
          onSuccess={handleJoinSuccess}
        />
      </>
    );
  }

  // If no class or no posts, show traditional layout for join/empty states
  if (!currentClass || classPosts.length === 0) {
    return (
      <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>
        {/* Header with class context */}
        <View style={[styles.header, { borderBottomColor: colors.border }]}>
          <View style={styles.headerContent}>
            <ThemedText type="title" style={[styles.appTitle, { color: colors.text }]}>
              Draft
            </ThemedText>
            {currentClass ? (
              <ThemedText type="metadata" style={[styles.classTitle, { color: colors.textSecondary }]}>
                {currentClass.name}
              </ThemedText>
            ) : (
              <ThemedText type="metadata" style={[styles.classTitle, { color: colors.textTertiary }]}>
                No class joined
              </ThemedText>
            )}
          </View>
        </View>

        {/* Empty/Loading State Content */}
        <View style={styles.emptyStateContainer}>
          {!currentClass ? (
            // No class joined
            <GlassMorphismCard type="primary" style={styles.emptyStateCard}>
              <ThemedText type="screenTitle" style={[styles.emptyStateTitle, { color: colors.text }]}>
                Welcome, {getUserDisplayName()}
              </ThemedText>
              <ThemedText type="bodyText" style={[styles.emptyStateText, { color: colors.textSecondary }]}>
                Join a class to start sharing your artwork with classmates in a supportive, 
                ephemeral environment where posts disappear after their timer expires.
              </ThemedText>
              <TouchableOpacity
                style={[styles.primaryButton, { backgroundColor: colors.accentSage }]}
                onPress={() => setShowJoinModal(true)}
                activeOpacity={0.8}
              >
                <ThemedText type="button" style={styles.primaryButtonText}>
                  Join a Class
                </ThemedText>
              </TouchableOpacity>
            </GlassMorphismCard>
          ) : isLoadingPosts ? (
            // Loading posts
            <GlassMorphismCard type="primary" style={styles.emptyStateCard}>
              <ThemedText type="screenTitle" style={[styles.emptyStateTitle, { color: colors.text }]}>
                Loading Feed...
              </ThemedText>
              <ThemedText type="bodyText" style={[styles.emptyStateText, { color: colors.textSecondary }]}>
                Discovering artwork shared by your classmates.
              </ThemedText>
            </GlassMorphismCard>
          ) : (
            // No posts in class
            <GlassMorphismCard type="primary" style={styles.emptyStateCard}>
              <ThemedText type="screenTitle" style={[styles.emptyStateTitle, { color: colors.text }]}>
                No Posts Yet
              </ThemedText>
              <ThemedText type="bodyText" style={[styles.emptyStateText, { color: colors.textSecondary }]}>
                Be the first to share artwork in {currentClass.name}! Your classmates will see your 
                post appear here with a live countdown timer.
              </ThemedText>
              <TouchableOpacity
                style={[styles.primaryButton, { backgroundColor: colors.accentSage }]}
                onPress={handleCameraPress}
                activeOpacity={0.8}
              >
                <ThemedText type="button" style={styles.primaryButtonText}>
                  📸 Share First Artwork
                </ThemedText>
              </TouchableOpacity>
            </GlassMorphismCard>
          )}
        </View>

        {/* Class Join Modal */}
        <ClassJoinModal
          visible={showJoinModal}
          onClose={() => setShowJoinModal(false)}
          onSuccess={handleJoinSuccess}
        />
      </SafeAreaView>
    );
  }

  // Glass Morphism Artwork-as-Background Feed
  const currentPost = classPosts[currentPostIndex];
  
  return (
    <View style={styles.feedContainer}>
      {/* Full-Screen Artwork Background with Dark Gradient Overlay */}
      <Animated.View style={[styles.artworkBackground, { opacity: backgroundOpacity }]}>
        <ImageBackground
          source={{ uri: currentPost.image_url }}
          style={styles.backgroundImage}
          resizeMode="cover"
        >
          {/* Dark gradient overlay (rgba(0,0,0,0.3) to transparent per UIDesign.md) */}
          <View style={styles.gradientOverlay} />
        </ImageBackground>
      </Animated.View>

      {/* Safe Area for glass morphism overlays */}
      <SafeAreaView style={styles.overlayContainer}>
        {/* Top Card - Post Information with Back Button (20px margins per UIDesign.md) */}
        <GlassMorphismCard type="primary" style={styles.topCard}>
          <View style={styles.topCardHeader}>
            {/* Back Button */}
            <TouchableOpacity 
              style={styles.backButton}
              onPress={() => {
                console.log('🔙 Class Feed Screen - Back button pressed, returning to class list');
                // Clear current class and return to class list
                setCurrentClass(null);
                setShowClassList(true);
              }}
              activeOpacity={0.7}
            >
              <ThemedText style={styles.backButtonIcon}>‹</ThemedText>
            </TouchableOpacity>
            
            {/* Post Info */}
            <View style={styles.postInfo}>
              <ThemedText 
                type="username" 
                glassText={true} 
                style={styles.artistName}
              >
                {currentPost.user?.username || 'Unknown Artist'}
              </ThemedText>
              <ThemedText 
                type="metadata" 
                glassText={true} 
                style={styles.className}
              >
                {currentClass.name}
              </ThemedText>
              
              {/* View Count and Expiration Side by Side */}
              <View style={styles.statsRow}>
                <ThemedText 
                  type="metadata" 
                  glassText={true} 
                  style={styles.viewCountTop}
                >
                  {currentPost.view_count}/{currentPost.max_viewers} views
                </ThemedText>
                <ThemedText 
                  type="label" 
                  glassText={true} 
                  style={styles.timerTop}
                >
                  Expires in {formatTimeRemaining(currentPost.expires_at)}
                </ThemedText>
              </View>
            </View>
          </View>
        </GlassMorphismCard>

        {/* Bottom Right - Actions Card (Always visible) */}
        <View style={styles.bottomActions}>
          <GlassMorphismCard type="secondary" style={styles.actionsCard}>
            <TouchableOpacity 
              style={styles.actionButton}
              activeOpacity={0.7}
            >
              <View style={styles.commentButtonContainer}>
                <ThemedText style={styles.actionIcon}>💬</ThemedText>
                {/* Comment count would go here */}
              </View>
            </TouchableOpacity>
            
            {/* Next Photo Button - Always visible for cycling through photos */}
            <TouchableOpacity 
              style={styles.nextButton}
              onPress={handleSwipeToNext}
              activeOpacity={0.8}
            >
              <ThemedText type="caption" glassText={true} style={styles.nextLabel}>
                Next
              </ThemedText>
            </TouchableOpacity>
          </GlassMorphismCard>
        </View>
      </SafeAreaView>
    </View>
  );
}

// Glass Morphism Design System Styles per UIDesign.md
const styles = StyleSheet.create({
  // Base Container
  container: {
    flex: 1,
  },
  
  // Feed Container - Full Screen
  feedContainer: {
    flex: 1,
  },
  
  // Artwork Background System
  artworkBackground: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
  },
  backgroundImage: {
    width: SCREEN_WIDTH,
    height: SCREEN_HEIGHT,
    flex: 1,
  },
  gradientOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.3)', // Dark gradient overlay per UIDesign.md
  },
  
  // Glass Morphism Overlay Container
  overlayContainer: {
    flex: 1,
    justifyContent: 'space-between',
    paddingHorizontal: 20, // 20px screen margins per UIDesign.md
    paddingTop: 20,
    paddingBottom: 20,
  },
  
  // Top Card - Post Information with Back Button (Primary Glass Card specs)
  topCard: {
    padding: 20,
    gap: 8,
    alignSelf: 'stretch',
  },
  topCardHeader: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  backButton: {
    padding: 8,
    borderRadius: 16,
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    marginRight: 8,
  },
  backButtonIcon: {
    fontSize: 24,
    color: 'white',
  },
  postInfo: {
    flex: 1,
  },
  artistName: {
    fontSize: 18,        // 18pt per UIDesign.md
    fontWeight: '400',   // Regular weight for Instrument Serif
  },
  className: {
    fontSize: 12,        // 12pt per UIDesign.md
    opacity: 0.7,        // rgba(255,255,255,0.7) applied via glassTextSecondary
  },
  timer: {
    fontSize: 14,        // 14pt per UIDesign.md
    fontWeight: '500',   // Medium weight for emphasis
  },
  
  // Stats Row in Top Card (Side by Side)
  statsRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginTop: 8, // Space below class name
  },
  
  // Bottom Actions Container (Above tab bar)
  bottomActions: {
    position: 'absolute',
    bottom: 100, // Space above tab bar (88px tab bar + 12px margin)
    right: 20, // 20px from edge per UIDesign.md
    left: 20,
    alignItems: 'flex-end', // Align to right side
  },
  
  // Next Button (beside comments)
  nextButton: {
    backgroundColor: 'rgba(255, 255, 255, 0.1)', // Subtle button background
    borderRadius: 16,
    paddingVertical: 8,
    paddingHorizontal: 12,
    alignItems: 'center',
    justifyContent: 'center',
  },
  
  nextLabel: {
    fontSize: 12,
    textAlign: 'center',
    fontWeight: '500',
  },
  
  // Bottom Left - Stats Card (Secondary Glass specs)
  statsCard: {
    padding: 16,
    gap: 4,
    flex: 0,
    minWidth: 120,
  },
  viewCount: {
    fontSize: 12,        // 12pt per UIDesign.md
  },
  viewCountTop: {
    fontSize: 12,        // 12pt per UIDesign.md
  },
  timerTop: {
    fontSize: 12,        // 12pt per UIDesign.md
  },
  
  // Bottom Right - Actions Card (Secondary Glass specs)  
  actionsCard: {
    flexDirection: 'row',
    padding: 12,
    gap: 12,             // 12px gaps between buttons per UIDesign.md
    alignItems: 'center',
  },
  actionButton: {
    width: 44,           // 44px minimum touch target
    height: 44,
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 22,
    backgroundColor: 'rgba(255, 255, 255, 0.1)', // Subtle button background
  },
  actionIcon: {
    fontSize: 24,        // 24px icons per UIDesign.md
    color: 'white',
  },
  commentButtonContainer: {
    alignItems: 'center',
    justifyContent: 'center',
  },
  
  // Empty State Styles (Traditional layout)
  header: {
    borderBottomWidth: 1,
    paddingTop: Platform.OS === 'ios' ? 0 : 24,
  },
  headerContent: {
    paddingHorizontal: 24,
    paddingVertical: 20,
    alignItems: 'center',
  },
  appTitle: {
    marginBottom: 4,
    textAlign: 'center',
  },
  classTitle: {
    textAlign: 'center',
  },
  emptyStateContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 24,
  },
  emptyStateCard: {
    padding: 32,
    alignItems: 'center',
    gap: 20,
    maxWidth: 400,
  },
  emptyStateTitle: {
    textAlign: 'center',
  },
  emptyStateText: {
    textAlign: 'center',
    lineHeight: 24,
  },
  primaryButton: {
    height: 50,
    paddingHorizontal: 32,
    borderRadius: 28,        // 28px fully rounded per UIDesign.md
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: 16,
    
    // Glass morphism button shadow per UIDesign.md
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.1,
    shadowRadius: 16,
    elevation: 6,
  },
  primaryButtonText: {
    color: 'white',
    fontWeight: '500',
  },
});

================
File: tasks/tasks-prd-ephemeral-art-sharing.md
================
# Draft (EphemeralArt) - Task List
**Based on PRD**: `prd-ephemeral-art-sharing.md`

---

## Codebase Analysis Summary

**✅ What's Actually Implemented (compatible with Draft):**
- Supabase authentication with email/password (✅ works for Draft)
- User registration and login functionality (✅ works for Draft)
- Basic user profile system with username validation (✅ can be simplified)
- Camera functionality with photo capture and upload (✅ works for Draft)
- Supabase Storage integration with photos bucket (✅ works for Draft)
- Basic database migrations for users and photos (✅ foundation works)
- Zustand store for auth state management (✅ works for Draft)
- Basic navigation structure with auth and tabs (✅ structure works)

**🚨 What Needs Major Rework for Draft:**
- **Class Joining Flow**: Current flow has username setup, but Draft needs class code entry after authentication
- **Home Screen**: Current shows demo content, needs class feed with ephemeral posts
- **UI/Typography**: Review UIDesign.md
- **Database Schema**: Missing classes, posts, comments, AI feedback tables
- **Navigation**: Current tabs are "Home" and "Explore", needs "Class Feed" and "Camera"

**🔧 What Needs to be Built from Scratch:**
- Class-based social features (classes, posts, comments)
- Ephemeral content management with timers and auto-deletion
- Feed display with pre-populated demo content

- Sharing controls (viewer limits, duration selection)
- AI feedback integration with OpenAI GPT-4V
- Real-time commenting and interactions
- Demo environment with fake classmates

---

## Relevant Files

### Existing Files That Need Major Rework
- [x] `app/(auth)/login.tsx` - Email/password authentication (can reuse existing)
- [x] `app/(auth)/register.tsx` - User registration with validation (can reuse existing)
- [ ] `app/(auth)/profile-setup.tsx` - EXISTS but needs modification for Draft requirements
- [x] `app/(auth)/_layout.tsx` - Auth stack navigation layout (can reuse)
- [ ] `app/(tabs)/camera.tsx` - EXISTS but needs sharing controls and feed integration
- [x] `app/(tabs)/_layout.tsx` - CORRECT tab names "Class Feed"/"Camera" already implemented
- [ ] `app/(tabs)/index.tsx` - EXISTS but shows traditional cards, needs glass morphism feed
- [x] `components/auth/AuthForm.tsx` - Reusable authentication form components (can reuse existing)
- [x] `lib/auth.ts` - Authentication utilities (can partially reuse)
- [x] `lib/supabase.ts` - Supabase client configuration (can reuse)
- [x] `lib/photoService.ts` - Photo upload and storage management (can reuse)
- [x] `store/authStore.ts` - Zustand auth state management (can partially reuse)
- [x] `supabase/migrations/20250101000001_auth_tables.sql` - User authentication tables (can reuse)
- [x] `supabase/migrations/20250101000002_setup_storage.sql` - Storage bucket setup (can reuse)
- [ ] `supabase/migrations/20250101000003_create_photos_table.sql` - EXISTS but wrong schema for posts
- [x] `supabase/migrations/20250101000004_storage_policies.sql` - Storage policies (can reuse)

### New Files to Create
- [ ] `components/feed/ClassJoinModal.tsx` - Class code entry modal when accessing class feed
- [ ] `app/(tabs)/index.tsx` - Main class feed screen (rename/update existing)
- [ ] `app/post/[id].tsx` - Individual post detail view with comments
- [ ] `components/feed/FeedPost.tsx` - Individual post display component
- [ ] `components/feed/CommentBubble.tsx` - Comment display component
- [ ] `components/feed/CountdownTimer.tsx` - Live countdown timer component

- [ ] `components/camera/SharingControls.tsx` - Viewer limits and duration controls
- [ ] `lib/postService.ts` - Post creation and management service
- [ ] `components/ai/AIFeedbackButton.tsx` - AI feedback request component
- [ ] `components/ui/LoadingSpinner.tsx` - Loading states component
- [ ] `lib/classService.ts` - Class management and validation
- [ ] `lib/postService.ts` - Post creation and management
- [ ] `lib/commentService.ts` - Comment system management
- [ ] `lib/aiService.ts` - AI feedback integration with OpenAI
- [ ] `lib/ephemeralService.ts` - Timer and auto-deletion management

- [x] `store/classStore.ts` - Class and feed state management
- [ ] `store/postsStore.ts` - Posts and comments state
- [ ] `supabase/migrations/20250102000001_create_classes_table.sql` - Classes table
- [ ] `supabase/migrations/20250102000002_create_posts_table.sql` - Posts table
- [ ] `supabase/migrations/20250102000003_create_comments_table.sql` - Comments table
- [ ] `supabase/migrations/20250102000004_create_ai_feedback_table.sql` - AI feedback table
- [ ] `supabase/migrations/20250102000005_demo_data_seed.sql` - Pre-populated demo content
- [ ] `supabase/functions/ai-feedback/index.ts` - Edge function for AI integration
- [ ] `supabase/functions/cleanup-expired/index.ts` - Automatic content cleanup

- [ ] `docs/demo-walkthrough.md` - Demo experience documentation

---

## Tasks

- [x] **1.0 Foundation & Authentication System**
  - [x] 1.1 Configure Supabase Auth settings and policies in dashboard
  - [x] 1.2 Create auth navigation stack with login/register/profile-setup screens
  - [x] 1.3 Build reusable AuthForm component with email/password validation
  - [x] 1.4 Implement user registration with email verification and error handling
  - [x] 1.5 Create login functionality with session persistence
  - [x] 1.6 Build profile setup screen for username and optional avatar
  - [x] 1.7 Set up Zustand auth store for global authentication state
  - [x] 1.8 Implement automatic session restoration on app launch
  - [x] 1.9 Create user database migration and RLS policies
  - [x] 1.10 Create class joining modal for accessing class feed
  - [x] 1.11 Update profile setup to be optional/simplified for Draft requirements

- [x] **2.0 Camera & Photo Management System (Basic Implementation)**
  - [x] 2.1 Set up camera permissions handling and error states
  - [x] 2.2 Create camera interface with full-screen viewfinder
  - [x] 2.3 Implement photo capture with quality settings and haptic feedback
  - [x] 2.4 Build image preview mode with upload/retake options
  - [x] 2.5 Set up Supabase Storage with photos bucket and security policies
  - [x] 2.6 Create photo upload service with metadata storage
  - [x] 2.7 Implement file size optimization and MIME type handling
  - [x] 2.8 Add upload progress indicators and success/error states

- [x] **3.0 Class Management & Social Infrastructure**
  - [x] 3.1 Create classes database migration with join codes
  - [x] 3.2 Build class validation service and join code verification
  - [x] 3.3 Create posts database migration with ephemeral properties
  - [x] 3.4 Create comments database migration with character limits
  - [x] 3.5 Set up class association for users after authentication
  - [x] 3.6 Create Zustand store for class and feed state management
  - [x] 3.7 Build class welcome confirmation screen
  - [x] 3.8 Implement class context display in app header
  - [x] 3.9 Set up RLS policies for class-based content isolation
  - [x] 3.10 Create demo data seed with 5 fake classmates and sample posts
  - [x] 3.11 Validate demo content quality: ensure image URLs work, comments display properly, and timer states are realistic for consistent demo experience
  - [x] 3.12 Create demo refresh system: build script to reset demo data with fresh timestamps (NOW() + intervals) for reliable multi-session demos
  - [x] 3.13 Implement single-device testing architecture: update demo seed to use relative timestamps instead of fixed dates to prevent timer display issues

- [x] **4.0 Glass Morphism Feed Display (Artwork-as-Background System)**
  - [x] 4.1 Replace current solid card UI with artwork-as-background feed: each post artwork fills entire screen with dark gradient overlay (rgba(0,0,0,0.3) to transparent) - uses existing GlassMorphismCard component and Colors.ts system
  - [x] 4.2 Create glass morphism feed card components: Top card (post info), Bottom-left card (stats), Bottom-right card (actions) with exact UIDesign.md positioning (20px margins) - leverages existing Primary/Secondary Glass Card specs
  - [x] 4.3 Implement vertical navigation between posts with smooth artwork crossfades (400ms ease-out transitions) - Updated to use intentional engagement buttons instead of passive swipe areas
  - [x] 4.4 Build FeedPost component with Primary Glass Card specs for post info: artist name (Instrument Serif 18pt white), class name (Montserrat 12pt rgba(255,255,255,0.7)), timer (Montserrat 14pt white) - uses existing ThemedText typography system
  - [x] 4.5 Create bottom-left stats card with Secondary Glass specs: view count "3 of 5 viewers" (Montserrat 12pt), time remaining "Expires in 18 min" (Montserrat 11pt)
  - [x] 4.6 Build bottom-right actions card with Secondary Glass specs: comment icon with "Next" navigation button beside it - Updated to remove camera/AI icons and add intentional navigation
  - [x] 4.7 Create intermediate class selection screen: "Your Classes" page between Class Feed tab and feed content with glass morphism list of enrolled classes and "Join a Class +" button for better app orientation and mental breathing room - FIXED: Added back navigation chevron and prevented duplicate class memberships
  - [ ] 4.8 Replace current sharing controls with glass morphism card centered over artwork: viewer limit slider (warm sage accent), duration pills (30min/2hrs/tomorrow), "Share with Class" button (warm sage background)
  - [ ] 4.9 Implement glass morphism typography hierarchy: Instrument Serif for artist names/headers, Montserrat for all UI elements with exact UIDesign.md font sizes - typography system already complete in ThemedText.tsx
  - [ ] 4.10 Build skeleton screens maintaining glass morphism aesthetic: animated gradients from rgba(255,255,255,0.1) to rgba(255,255,255,0.2) with backdrop blur
  - [ ] 4.11 Create smooth loading states with glass morphism cards appearing (scale 0.95->1.0 with 300ms opacity fade-in)

- [ ] **5.0 Glass Morphism Camera Interface & Post Creation System**
  - [ ] 5.1 Update camera controls to glass morphism specs: implement bottom glass card that slides up from edge with backdrop blur, replace current overlay with Primary Glass Card styling per UIDesign.md
  - [ ] 5.2 Create glass morphism capture button: large 80px centered capture button with white background and subtle shadow (box-shadow 0 4px 20px rgba(0,0,0,0.08)) maintaining current functionality
  - [ ] 5.3 Add glass morphism settings controls: side buttons for flash, flip camera as glass morphism pills (Secondary Glass specs with 16px border radius) positioned left/right of capture button
  - [ ] 5.4 Build post-capture sharing interface with glass morphism: artwork displayed full-screen with large Primary Glass Card centered over artwork containing sharing controls
  - [ ] 5.5 Create PostService with database integration for ephemeral posts (classes, posts, comments tables) with expiration timestamps and viewer limits
  - [ ] 5.6 Implement sharing controls within glass morphism card: viewer limit slider (1-20, warm sage accent #8B9D83), duration pills ("30 minutes", "2 hours", "Until tomorrow"), "Share with Class" button
  - [ ] 5.7 Integrate ephemeral post properties: max viewers, duration selection, expiration time calculation, class association from current user context
  - [ ] 5.8 Implement seamless photo capture to post creation flow: capture → glass morphism sharing interface → post creation → navigation to feed
  - [ ] 5.9 Connect camera upload service to feed display system: upload to Supabase Storage, create post record, trigger feed refresh
  - [ ] 5.10 Add automatic navigation to feed tab after successful posting with success feedback and immediate display of new post at top of feed
  - [ ] 5.11 Add error handling and retry mechanism for post creation failures with glass morphism error states and user-friendly recovery options

- [ ] **6.0 Glass Morphism Social Features & Commenting System**
  - [ ] 6.1 Create full-screen artwork view with glass morphism comments overlay that slides up from bottom: higher opacity glass card (rgba(255,255,255,0.25)) with scrollable comment list
  - [ ] 6.2 Build CommentBubble component with glass morphism background and precise typography: user names (Instrument Serif 14pt white), comment text (Montserrat 14pt rgba(255,255,255,0.9)), timestamps (Montserrat 11pt rgba(255,255,255,0.5))
  - [ ] 6.3 Implement comment input with glass morphism styling: background rgba(255,255,255,0.2), border rgba(255,255,255,0.3), placeholder rgba(255,255,255,0.5), character counter (subtle, appears when typing)
  - [ ] 6.4 Create user names in Instrument Serif 14pt white over artwork backgrounds with 12px spacing between comments per UIDesign.md
  - [ ] 6.5 Add comment text in Montserrat 14pt rgba(255,255,255,0.9) with proper line height (1.4-1.5x) and padding within glass morphism comment bubbles
  - [ ] 6.6 Implement timestamp display in Montserrat 11pt rgba(255,255,255,0.5) positioned below comment text with consistent spacing
  - [ ] 6.7 Create comment submission with warm sage accent send button (#8B9D83) and paper plane icon, integrated on right side of multi-line input
  - [ ] 6.8 Build encouraging pre-populated demo comments with glass morphism styling: "Beautiful work on the shading!", "Love the composition!", "The texture details are amazing!"
  - [ ] 6.9 Add smooth comment appearance animations: slide up and fade (300ms) maintaining glass morphism backdrop blur throughout
  - [ ] 6.10 Implement real-time comment updates with glass morphism aesthetic: new comments appear with scale from 0.95 to 1.0 plus opacity fade-in

- [ ] **7.0 Glass Morphism AI Feedback Integration System**
  - [ ] 7.1 Create "Get AI Feedback" button in bottom-right actions card with glass morphism styling and warm tan accent (#B8956A) - only visible on user's own posts
  - [ ] 7.2 Implement AI feedback display as large glass morphism card with higher opacity (rgba(255,255,255,0.25)) centered over artwork background
  - [ ] 7.3 Add "AI Feedback" header in Instrument Serif 18pt white with proper spacing within glass card per UIDesign.md specifications
  - [ ] 7.4 Create elegant loading states with skeleton screen: animated gradient from rgba(255,255,255,0.1) to rgba(255,255,255,0.2) maintaining backdrop blur
  - [ ] 7.5 Display "Analyzing your artwork..." in Montserrat 12pt rgba(255,255,255,0.7) during 2-3 second processing with realistic progression
  - [ ] 7.6 Format AI response text in Montserrat 14pt rgba(255,255,255,0.9) with encouraging, constructive tone and proper line height (1.4-1.5x)
  - [ ] 7.7 Add dismissal interaction: tap outside card or X button (top-right) with smooth fade-out animation (300ms) maintaining glass aesthetic
  - [ ] 7.8 Position AI feedback button in bottom-right actions card alongside camera/comment icons with 12px gaps per UIDesign.md positioning specs
  - [ ] 7.9 Set up OpenAI API account, obtain GPT-4V access keys, and implement via Supabase Edge Functions for artwork analysis
  - [ ] 7.10 Ensure AI feedback button only appears on user's own posts with consistent glass morphism styling (Secondary Glass specs for icon button)

- [ ] **8.0 Glass Morphism Ephemeral Content Management System**
  - [ ] 8.1 Create countdown timer in Montserrat 14pt white within top glass card showing exact time remaining with live updates
  - [ ] 8.2 Implement live seconds display with smooth number transitions and proper typography (Montserrat Regular) maintaining glass morphism backdrop blur
  - [ ] 8.3 Add "Expires in X min" text in Montserrat 11pt rgba(255,255,255,0.7) in bottom-left stats card with consistent spacing
  - [ ] 8.4 Create post expiration with 2-second fade-out plus scale to 0.95 animation maintaining glass morphism aesthetic throughout transition
  - [ ] 8.5 Implement smooth artwork crossfade when posts expire and reorganize: 400ms ease-out transitions with glass cards maintained during artwork transitions
  - [ ] 8.6 Build visual countdown warnings for last 60 seconds with subtle glass morphism effects: gentle pulsing of timer text, no jarring color changes
  - [ ] 8.7 Create 5-second "undo" option with glass morphism popup after deletion: centered glass card with "Undo" button using warm sage accent (#8B9D83)
  - [ ] 8.8 Add peaceful transition animations maintaining glass aesthetic: all ephemeral actions use smooth scale/fade transitions rather than abrupt changes
  - [ ] 8.9 Implement automatic cleanup with smooth feed reorganization: expired posts fade out gracefully while maintaining glass morphism cards for remaining content
  - [ ] 8.10 Create visual indicators for content lifecycle within glass cards: subtle timer progression without anxiety-inducing urgency, celebrating temporary nature



- [ ] **9.0 Performance Optimization & Testing**
  - [ ] 9.1 Optimize photo capture to launch under 1 second
  - [ ] 9.2 Ensure image upload completion within 3 seconds
  - [ ] 9.3 Optimize AI feedback response to under 5 seconds
  - [ ] 9.4 Implement real-time updates within 1 second latency
  - [ ] 9.5 Test ephemeral cleanup within 1 minute of expiration
  - [ ] 9.6 Optimize app startup time for smooth demo experience
  - [ ] 9.7 Test memory usage during extended demo sessions
  - [ ] 9.8 Verify smooth animations on target iOS devices
  - [ ] 9.9 Validate complete user journey from launch to AI feedback
  - [ ] 9.10 Conduct comprehensive demo readiness testing



### Notes

**Implementation Priority:**
- **Phase 1** : Complete tasks 3.0-4.0 for basic class and feed functionality (includes demo content and glass morphism UI)
- **Phase 2** : Implement task 5.0 for camera-to-feed connection
- **Phase 3** : Build tasks 6.0-7.0 for social features and AI integration  
- **Phase 4** : Implement task 8.0 for ephemeral features
- **Phase 5** : Polish with task 9.0 for production-ready experience

**Key Architectural Decisions:**
- Maintain single-device testing approach with pre-populated content
- Use Supabase Realtime for live comment updates and feed synchronization

- Focus on anxiety-reducing, confidence-building user experience
- Live countdown timers demonstrate ephemeral nature
- AI feedback only appears on user's own posts

---

## 🚨 CRITICAL REWORK REQUIRED

**The existing codebase was built for "VEO Creative Image Messenger" and does NOT match the Draft PRD requirements. Major components need complete rebuilding:**

### **Immediate Priority (Must Fix First):**
1. **Glass Morphism Feed**: Replace traditional card layout with artwork-as-background system
2. **Class Joining Flow**: Add class code entry modal when accessing class feed
3. **Typography**: Replace SpaceMono with Instrument Serif + Montserrat
4. **Design System**: Implement complete glass morphism UI replacing current solid UI
5. **Feed Display**: Build full-screen artwork posts with glass morphism overlay cards

### **Architecture Mismatch:**
- **Current**: Email registration → username setup → group messaging with AI image generation
- **Required**: Email registration → class code entry → ephemeral art sharing with AI feedback

### **Files Requiring Major Updates:**
- `app/(tabs)/index.tsx` - Traditional card layout, needs glass morphism artwork-as-background system
- `app/(auth)/profile-setup.tsx` - Needs simplification for Draft requirements
- `constants/Colors.ts` - Needs glass morphism color specifications
- `components/ThemedText.tsx` - Needs Instrument Serif + Montserrat typography

### **Files That Can Be Reused:**
- `app/(auth)/login.tsx` - Email/password authentication works for Draft
- `app/(auth)/register.tsx` - User registration works for Draft
- `components/auth/AuthForm.tsx` - Email/password form works for Draft

### **Recommended Approach:**
1. **Preserve Authentication**: Keep existing email/password authentication system
2. **Add Class Joining**: Create modal for class code entry when accessing class feed
3. **Rebuild Feed Screen**: Replace demo content with class feed displaying ephemeral posts
4. **Database Migration**: Create new schema for classes, posts, comments while preserving auth tables
5. **Design System**: Implement Draft-specific typography and color scheme from scratch

*This task list prioritizes building a functional, anxiety-reducing ephemeral art sharing platform that demonstrates the value proposition through realistic demo content and smooth, confidence-building interactions.*

================
File: package.json
================
{
  "name": "snapclone",
  "main": "expo-router/entry",
  "version": "1.0.0",
  "scripts": {
    "start": "expo start",
    "reset-project": "node ./scripts/reset-project.js",
    "android": "expo start --android",
    "ios": "expo start --ios",
    "web": "expo start --web",
    "lint": "expo lint",
    "db:reset-local": "node scripts/migrate-both.js reset-local",
    "db:push-cloud": "node scripts/migrate-both.js push-cloud",
    "db:reset-both": "node scripts/migrate-both.js reset-both",
    "db:status": "node scripts/migrate-both.js status",
    "demo:reset": "node scripts/reset-demo.js",
    "demo:validate": "node scripts/validate-demo.js"
  },
  "dependencies": {
    "@expo-google-fonts/instrument-serif": "^0.4.0",
    "@expo-google-fonts/montserrat": "^0.4.1",
    "@expo/vector-icons": "^14.1.0",
    "@react-navigation/bottom-tabs": "^7.3.10",
    "@react-navigation/elements": "^2.3.8",
    "@react-navigation/native": "^7.1.6",
    "@supabase/supabase-js": "^2.50.0",
    "base64-arraybuffer": "^1.0.2",
    "dotenv": "^16.5.0",
    "expo": "~53.0.12",
    "expo-av": "~15.1.6",
    "expo-blur": "~14.1.5",
    "expo-camera": "~16.1.8",
    "expo-constants": "~17.1.6",
    "expo-file-system": "^18.1.10",
    "expo-font": "~13.3.1",
    "expo-haptics": "~14.1.4",
    "expo-image": "~2.3.0",
    "expo-image-picker": "~16.1.4",
    "expo-linking": "~7.1.5",
    "expo-router": "~5.1.0",
    "expo-splash-screen": "~0.30.9",
    "expo-status-bar": "~2.2.3",
    "expo-symbols": "~0.4.5",
    "expo-system-ui": "~5.0.9",
    "expo-web-browser": "~14.2.0",
    "node-fetch": "^3.3.2",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "react-native": "0.79.4",
    "react-native-gesture-handler": "~2.24.0",
    "react-native-reanimated": "~3.17.4",
    "react-native-safe-area-context": "5.4.0",
    "react-native-screens": "~4.11.1",
    "react-native-web": "~0.20.0",
    "react-native-webview": "13.13.5",
    "zustand": "^5.0.5"
  },
  "devDependencies": {
    "@babel/core": "^7.25.2",
    "@types/react": "~19.0.10",
    "eslint": "^9.25.0",
    "eslint-config-expo": "~9.2.0",
    "react-native-url-polyfill": "^2.0.0",
    "typescript": "~5.8.3"
  },
  "private": true
}




================================================================
End of Codebase
================================================================
